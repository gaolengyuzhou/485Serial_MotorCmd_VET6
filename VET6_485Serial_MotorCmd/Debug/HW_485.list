
HW_485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08009118  08009118  0000a118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b0  080096b0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080096b0  080096b0  0000a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b8  080096b8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b8  080096b8  0000a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096bc  080096bc  0000a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080096c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          000004d0  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006a4  200006a4  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce90  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238e  00000000  00000000  00018094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0001a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088c  00000000  00000000  0001af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022399  00000000  00000000  0001b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff49  00000000  00000000  0003db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c79b8  00000000  00000000  0004daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115466  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004310  00000000  00000000  001154ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001197bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009100 	.word	0x08009100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009100 	.word	0x08009100

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Serial_SendByte>:
#include "usart.h"



void Serial_SendByte(uint8_t Byte)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, &Byte, 1, 0xFFFF);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <Serial_SendByte+0x20>)
 8000ff8:	f002 f964 	bl	80032c4 <HAL_UART_Transmit>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000050c 	.word	0x2000050c

08001008 <Serial_SendArray>:

void Serial_SendArray(uint8_t *Array, uint16_t Length)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	for (i = 0; i < Length; i ++)
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
 8001018:	e009      	b.n	800102e <Serial_SendArray+0x26>
	{
		Serial_SendByte(Array[i]);
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffde 	bl	8000fe4 <Serial_SendByte>
	for (i = 0; i < Length; i ++)
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	3301      	adds	r3, #1
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	89fa      	ldrh	r2, [r7, #14]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3f1      	bcc.n	800101a <Serial_SendArray+0x12>
	}
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <RS485_SendPacket>:

void RS485_SendPacket(uint8_t *packet, uint16_t length)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
    Serial_SendArray(packet, length);
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffd9 	bl	8001008 <Serial_SendArray>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <control_PackCmd>:
* @param        None
* @retval        None
* 这个函数接收一个缓冲区指针buffer、命令cmd、设备 IDid、数据长度size和数据指针data。
*********************************************************************************/
void control_PackCmd(uint8_t *buffer, uint8_t cmd, uint8_t id, uint8_t size, uint8_t *data)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	70fb      	strb	r3, [r7, #3]
 8001072:	460b      	mov	r3, r1
 8001074:	70bb      	strb	r3, [r7, #2]
 8001076:	4613      	mov	r3, r2
 8001078:	707b      	strb	r3, [r7, #1]
        uint8_t i = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
        //首先，它将命令头、命令、设备 ID 和数据长度依次填入缓冲区的前四个位置。
        buffer[0] = CMD_HEAD;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	223e      	movs	r2, #62	@ 0x3e
 8001082:	701a      	strb	r2, [r3, #0]
        buffer[1] = cmd;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	701a      	strb	r2, [r3, #0]
        buffer[2] = id;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3302      	adds	r3, #2
 8001090:	78ba      	ldrb	r2, [r7, #2]
 8001092:	701a      	strb	r2, [r3, #0]
        buffer[3] = size;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3303      	adds	r3, #3
 8001098:	787a      	ldrb	r2, [r7, #1]
 800109a:	701a      	strb	r2, [r3, #0]
        //然后计算前四个字节的校验和，存储在缓冲区的第五个位置。
        buffer[4] = 0;        // 需要先清0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
        for (i=0; i<4; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e00e      	b.n	80010c8 <control_PackCmd+0x68>
                buffer[4] += buffer[i];
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3304      	adds	r3, #4
 80010ae:	7819      	ldrb	r1, [r3, #0]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	440a      	add	r2, r1
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
        for (i=0; i<4; i++)
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	3301      	adds	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d9ed      	bls.n	80010aa <control_PackCmd+0x4a>
        //如果数据长度不为 0，将数据复制到缓冲区的后续位置，并计算数据的校验和，存储在缓冲区的最后一个位置。
        if (size != 0)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d034      	beq.n	800113e <control_PackCmd+0xde>
        {
                buffer[LEAST_FRAME_SIZE+size] = 0;// 需要先清0
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	3305      	adds	r3, #5
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
                for (i=0; i<size; i++)        // 复制数据并计算校验值
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e020      	b.n	800112a <control_PackCmd+0xca>
                {
                        buffer[LEAST_FRAME_SIZE+i] = data[i];
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	441a      	add	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	3305      	adds	r3, #5
 80010f2:	4619      	mov	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	440b      	add	r3, r1
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	701a      	strb	r2, [r3, #0]
                        buffer[LEAST_FRAME_SIZE+size] += buffer[LEAST_FRAME_SIZE+i];
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	3305      	adds	r3, #5
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	7819      	ldrb	r1, [r3, #0]
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3305      	adds	r3, #5
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	3305      	adds	r3, #5
 8001118:	4618      	mov	r0, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4403      	add	r3, r0
 800111e:	440a      	add	r2, r1
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]
                for (i=0; i<size; i++)        // 复制数据并计算校验值
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	3301      	adds	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3da      	bcc.n	80010e8 <control_PackCmd+0x88>
                }
                //最后设置需要发送的数据总长度uart1TxDataSize。
                uart2TxDataSize = i + LEAST_FRAME_SIZE + 1;        // 需要发送的数据总长度
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3306      	adds	r3, #6
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <control_PackCmd+0xf0>)
 800113a:	701a      	strb	r2, [r3, #0]
        }
        else
                uart2TxDataSize = LEAST_FRAME_SIZE ;        // 需要发送的数据总长度
}
 800113c:	e002      	b.n	8001144 <control_PackCmd+0xe4>
                uart2TxDataSize = LEAST_FRAME_SIZE ;        // 需要发送的数据总长度
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <control_PackCmd+0xf0>)
 8001140:	2205      	movs	r2, #5
 8001142:	701a      	strb	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200004c0 	.word	0x200004c0

08001154 <control_CheckReceivedData>:
* @brief	检查电机回复数据
* @param	None
* @retval	None
*********************************************************************************/
uint8_t control_CheckReceivedData(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
	uint8_t receiveSuccess = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71bb      	strb	r3, [r7, #6]

	HAL_UART_Receive(&huart2, uart2RxBuffer, uart2RxDataSize,1000);
 8001166:	4b49      	ldr	r3, [pc, #292]	@ (800128c <control_CheckReceivedData+0x138>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001170:	4947      	ldr	r1, [pc, #284]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001172:	4848      	ldr	r0, [pc, #288]	@ (8001294 <control_CheckReceivedData+0x140>)
 8001174:	f002 f931 	bl	80033da <HAL_UART_Receive>

	if (uart2RxBuffer[0] == CMD_HEAD)
 8001178:	4b45      	ldr	r3, [pc, #276]	@ (8001290 <control_CheckReceivedData+0x13c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b3e      	cmp	r3, #62	@ 0x3e
 800117e:	d15b      	bne.n	8001238 <control_CheckReceivedData+0xe4>
	{
		temp = uart2RxBuffer[0] + uart2RxBuffer[1] + uart2RxBuffer[2] + uart2RxBuffer[3];
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	4413      	add	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <control_CheckReceivedData+0x13c>)
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	4413      	add	r3, r2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	4413      	add	r3, r2
 800119a:	717b      	strb	r3, [r7, #5]
		if (uart2RxBuffer[4] == temp)
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <control_CheckReceivedData+0x13c>)
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	797a      	ldrb	r2, [r7, #5]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d148      	bne.n	8001238 <control_CheckReceivedData+0xe4>
		{
			temp = uart2RxBuffer[5] + uart2RxBuffer[6] + uart2RxBuffer[7] + uart2RxBuffer[8] + uart2RxBuffer[9] + uart2RxBuffer[10] + uart2RxBuffer[11];
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011a8:	795a      	ldrb	r2, [r3, #5]
 80011aa:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011b4:	79db      	ldrb	r3, [r3, #7]
 80011b6:	4413      	add	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b35      	ldr	r3, [pc, #212]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011bc:	7a1b      	ldrb	r3, [r3, #8]
 80011be:	4413      	add	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011c4:	7a5b      	ldrb	r3, [r3, #9]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011cc:	7a9b      	ldrb	r3, [r3, #10]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011d4:	7adb      	ldrb	r3, [r3, #11]
 80011d6:	4413      	add	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
			if (uart2RxBuffer[12] == temp)
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011dc:	7b1b      	ldrb	r3, [r3, #12]
 80011de:	797a      	ldrb	r2, [r7, #5]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d129      	bne.n	8001238 <control_CheckReceivedData+0xe4>
			{
				motorTemperature = (int8_t)uart2RxBuffer[5];
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <control_CheckReceivedData+0x144>)
 80011ec:	701a      	strb	r2, [r3, #0]
				motorPowerOrTorque = (int16_t)(uart2RxBuffer[6] + (uart2RxBuffer[7]<<8));
 80011ee:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011f0:	799b      	ldrb	r3, [r3, #6]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <control_CheckReceivedData+0x13c>)
 80011f6:	79db      	ldrb	r3, [r3, #7]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <control_CheckReceivedData+0x148>)
 8001204:	801a      	strh	r2, [r3, #0]
				motorSpeed = (int16_t)(uart2RxBuffer[8] + (uart2RxBuffer[9]<<8));
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001208:	7a1b      	ldrb	r3, [r3, #8]
 800120a:	461a      	mov	r2, r3
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <control_CheckReceivedData+0x13c>)
 800120e:	7a5b      	ldrb	r3, [r3, #9]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29b      	uxth	r3, r3
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <control_CheckReceivedData+0x14c>)
 800121c:	801a      	strh	r2, [r3, #0]
				motorEncoder = (int16_t)(uart2RxBuffer[10] + (uart2RxBuffer[11]<<8));
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001220:	7a9b      	ldrb	r3, [r3, #10]
 8001222:	461a      	mov	r2, r3
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001226:	7adb      	ldrb	r3, [r3, #11]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <control_CheckReceivedData+0x150>)
 8001232:	801a      	strh	r2, [r3, #0]
				receiveSuccess = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	for (i=0; i<uart2RxDataSize; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	71bb      	strb	r3, [r7, #6]
 800123c:	e006      	b.n	800124c <control_CheckReceivedData+0xf8>
		uart2RxBuffer[i] = 0;
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <control_CheckReceivedData+0x13c>)
 8001242:	2100      	movs	r1, #0
 8001244:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<uart2RxDataSize; i++)
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	3301      	adds	r3, #1
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <control_CheckReceivedData+0x138>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3f3      	bcc.n	800123e <control_CheckReceivedData+0xea>
	uart2RxDataSize = 0;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <control_CheckReceivedData+0x138>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

	printf("motorTemperature = %d, motorPowerOrTorque = %d, motorSpeed = %d, motorEncoder = %d\n", motorTemperature, motorPowerOrTorque, motorSpeed, motorEncoder);
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <control_CheckReceivedData+0x144>)
 800125e:	f993 3000 	ldrsb.w	r3, [r3]
 8001262:	4619      	mov	r1, r3
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <control_CheckReceivedData+0x148>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	461a      	mov	r2, r3
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <control_CheckReceivedData+0x14c>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	4618      	mov	r0, r3
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <control_CheckReceivedData+0x150>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4603      	mov	r3, r0
 800127c:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <control_CheckReceivedData+0x154>)
 800127e:	f004 f8a9 	bl	80053d4 <iprintf>

	return receiveSuccess;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200004c1 	.word	0x200004c1
 8001290:	200003f8 	.word	0x200003f8
 8001294:	2000050c 	.word	0x2000050c
 8001298:	200001f0 	.word	0x200001f0
 800129c:	200001f2 	.word	0x200001f2
 80012a0:	200001f4 	.word	0x200001f4
 80012a4:	200001f6 	.word	0x200001f6
 80012a8:	08009118 	.word	0x08009118

080012ac <control_Send>:
* @brief        发送控制命令
* @param        None
* @retval        None
*********************************************************************************/
void control_Send(uint8_t cmd, uint8_t id, int16_t value)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	4613      	mov	r3, r2
 80012bc:	80bb      	strh	r3, [r7, #4]
        uint8_t dataSize = 0;        // 命令数据长度
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
        int16_t openCtlData = 0;     // 开环控制数据
 80012c2:	2300      	movs	r3, #0
 80012c4:	82bb      	strh	r3, [r7, #20]
        int16_t torqueCtlData = 0;   // 力矩环控制数据
 80012c6:	2300      	movs	r3, #0
 80012c8:	827b      	strh	r3, [r7, #18]
        int16_t speedCtlData = 0;    // 速度环控制数据
 80012ca:	2300      	movs	r3, #0
 80012cc:	823b      	strh	r3, [r7, #16]
        int16_t angleCtlData = 0;    // 位置环控制数据
 80012ce:	2300      	movs	r3, #0
 80012d0:	81fb      	strh	r3, [r7, #14]

        if (cmd == CMD_OPEN_CONTROL)
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80012d6:	d119      	bne.n	800130c <control_Send+0x60>
        {
                openCtlData = value;
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	82bb      	strh	r3, [r7, #20]
                dataSize = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	75fb      	strb	r3, [r7, #23]

                control_PackCmd(uart2TxBuffer, cmd, id, dataSize, (uint8_t *)&openCtlData);
 80012e0:	7df8      	ldrb	r0, [r7, #23]
 80012e2:	79ba      	ldrb	r2, [r7, #6]
 80012e4:	79f9      	ldrb	r1, [r7, #7]
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <control_Send+0x114>)
 80012f0:	f7ff feb6 	bl	8001060 <control_PackCmd>
                uart2RxDataSize = LEAST_FRAME_SIZE + 7 + 1;
 80012f4:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <control_Send+0x118>)
 80012f6:	220d      	movs	r2, #13
 80012f8:	701a      	strb	r2, [r3, #0]
                RS485_SendPacket(uart2TxBuffer, uart2TxDataSize);
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <control_Send+0x11c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	482f      	ldr	r0, [pc, #188]	@ (80013c0 <control_Send+0x114>)
 8001302:	f7ff fe9d 	bl	8001040 <RS485_SendPacket>
                control_CheckReceivedData();
 8001306:	f7ff ff25 	bl	8001154 <control_CheckReceivedData>
                control_PackCmd(uart2TxBuffer, cmd, id, dataSize, (uint8_t *)&angleCtlData);
                uart2RxDataSize = LEAST_FRAME_SIZE + 7 + 1;
                RS485_SendPacket(uart2TxBuffer, uart2TxDataSize);
                control_CheckReceivedData();
        }
}
 800130a:	e055      	b.n	80013b8 <control_Send+0x10c>
        else if (cmd == CMD_TORQUE_CONTROL)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2ba1      	cmp	r3, #161	@ 0xa1
 8001310:	d119      	bne.n	8001346 <control_Send+0x9a>
                torqueCtlData = value;
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	827b      	strh	r3, [r7, #18]
                dataSize = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	75fb      	strb	r3, [r7, #23]
                control_PackCmd(uart2TxBuffer, cmd, id, dataSize, (uint8_t *)&torqueCtlData);
 800131a:	7df8      	ldrb	r0, [r7, #23]
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	79f9      	ldrb	r1, [r7, #7]
 8001320:	f107 0312 	add.w	r3, r7, #18
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4603      	mov	r3, r0
 8001328:	4825      	ldr	r0, [pc, #148]	@ (80013c0 <control_Send+0x114>)
 800132a:	f7ff fe99 	bl	8001060 <control_PackCmd>
                uart2RxDataSize = LEAST_FRAME_SIZE + 7 + 1;
 800132e:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <control_Send+0x118>)
 8001330:	220d      	movs	r2, #13
 8001332:	701a      	strb	r2, [r3, #0]
                RS485_SendPacket(uart2TxBuffer, uart2TxDataSize);
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <control_Send+0x11c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4821      	ldr	r0, [pc, #132]	@ (80013c0 <control_Send+0x114>)
 800133c:	f7ff fe80 	bl	8001040 <RS485_SendPacket>
                control_CheckReceivedData();
 8001340:	f7ff ff08 	bl	8001154 <control_CheckReceivedData>
}
 8001344:	e038      	b.n	80013b8 <control_Send+0x10c>
        else if (cmd == CMD_SPEED_CONTROL)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2ba2      	cmp	r3, #162	@ 0xa2
 800134a:	d119      	bne.n	8001380 <control_Send+0xd4>
                speedCtlData = value;
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	823b      	strh	r3, [r7, #16]
                dataSize = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	75fb      	strb	r3, [r7, #23]
                control_PackCmd(uart2TxBuffer, cmd, id, dataSize, (uint8_t *)&speedCtlData);
 8001354:	7df8      	ldrb	r0, [r7, #23]
 8001356:	79ba      	ldrb	r2, [r7, #6]
 8001358:	79f9      	ldrb	r1, [r7, #7]
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	4603      	mov	r3, r0
 8001362:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <control_Send+0x114>)
 8001364:	f7ff fe7c 	bl	8001060 <control_PackCmd>
                uart2RxDataSize = LEAST_FRAME_SIZE + 7 + 1;
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <control_Send+0x118>)
 800136a:	220d      	movs	r2, #13
 800136c:	701a      	strb	r2, [r3, #0]
                RS485_SendPacket(uart2TxBuffer, uart2TxDataSize);
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <control_Send+0x11c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <control_Send+0x114>)
 8001376:	f7ff fe63 	bl	8001040 <RS485_SendPacket>
                control_CheckReceivedData();
 800137a:	f7ff feeb 	bl	8001154 <control_CheckReceivedData>
}
 800137e:	e01b      	b.n	80013b8 <control_Send+0x10c>
        else if (cmd == CMD_ANGLE_CONTROL1)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2ba3      	cmp	r3, #163	@ 0xa3
 8001384:	d118      	bne.n	80013b8 <control_Send+0x10c>
                angleCtlData = value;
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	81fb      	strh	r3, [r7, #14]
                dataSize = 8;
 800138a:	2308      	movs	r3, #8
 800138c:	75fb      	strb	r3, [r7, #23]
                control_PackCmd(uart2TxBuffer, cmd, id, dataSize, (uint8_t *)&angleCtlData);
 800138e:	7df8      	ldrb	r0, [r7, #23]
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	79f9      	ldrb	r1, [r7, #7]
 8001394:	f107 030e 	add.w	r3, r7, #14
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4603      	mov	r3, r0
 800139c:	4808      	ldr	r0, [pc, #32]	@ (80013c0 <control_Send+0x114>)
 800139e:	f7ff fe5f 	bl	8001060 <control_PackCmd>
                uart2RxDataSize = LEAST_FRAME_SIZE + 7 + 1;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <control_Send+0x118>)
 80013a4:	220d      	movs	r2, #13
 80013a6:	701a      	strb	r2, [r3, #0]
                RS485_SendPacket(uart2TxBuffer, uart2TxDataSize);
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <control_Send+0x11c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <control_Send+0x114>)
 80013b0:	f7ff fe46 	bl	8001040 <RS485_SendPacket>
                control_CheckReceivedData();
 80013b4:	f7ff fece 	bl	8001154 <control_CheckReceivedData>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000330 	.word	0x20000330
 80013c4:	200004c1 	.word	0x200004c1
 80013c8:	200004c0 	.word	0x200004c0

080013cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <MX_GPIO_Init+0xf0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a34      	ldr	r2, [pc, #208]	@ (80014bc <MX_GPIO_Init+0xf0>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <MX_GPIO_Init+0xf0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a2d      	ldr	r2, [pc, #180]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <MX_GPIO_Init+0xf0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_GPIO_Init+0xf0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <MX_GPIO_Init+0xf0>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_GPIO_Init+0xf0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <MX_GPIO_Init+0xf4>)
 8001492:	f001 f8f7 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_GPIO_Init+0xf4>)
 80014b0:	f000 ff4c 	bl	800234c <HAL_GPIO_Init>

}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	@ 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <MX_I2C1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014d0:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_I2C1_Init+0x58>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_I2C1_Init+0x50>)
 8001502:	f001 f8f3 	bl	80026ec <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800150c:	f000 faa0 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001f8 	.word	0x200001f8
 8001518:	40005400 	.word	0x40005400
 800151c:	00061a80 	.word	0x00061a80

08001520 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	@ (8001574 <MX_I2C2_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_I2C2_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <MX_I2C2_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_I2C2_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_I2C2_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_I2C2_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_I2C2_Init+0x50>)
 800155e:	f001 f8c5 	bl	80026ec <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 fa72 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000024c 	.word	0x2000024c
 8001574:	40005800 	.word	0x40005800
 8001578:	00061a80 	.word	0x00061a80

0800157c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C3_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <MX_I2C3_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C3_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_I2C3_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C3_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_I2C3_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_I2C3_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_I2C3_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_I2C3_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_I2C3_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_I2C3_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_I2C3_Init+0x50>)
 80015ba:	f001 f897 	bl	80026ec <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fa44 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002a0 	.word	0x200002a0
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	00061a80 	.word	0x00061a80

080015d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	@ 0x38
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001764 <HAL_I2C_MspInit+0x18c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a59      	ldr	r2, [pc, #356]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b57      	ldr	r3, [pc, #348]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001616:	23c0      	movs	r3, #192	@ 0xc0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001626:	2304      	movs	r3, #4
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	484e      	ldr	r0, [pc, #312]	@ (800176c <HAL_I2C_MspInit+0x194>)
 8001632:	f000 fe8b 	bl	800234c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	4b4b      	ldr	r3, [pc, #300]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a4a      	ldr	r2, [pc, #296]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b48      	ldr	r3, [pc, #288]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001652:	e083      	b.n	800175c <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a45      	ldr	r2, [pc, #276]	@ (8001770 <HAL_I2C_MspInit+0x198>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12d      	bne.n	80016ba <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a40      	ldr	r2, [pc, #256]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800167a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800168c:	2304      	movs	r3, #4
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4835      	ldr	r0, [pc, #212]	@ (800176c <HAL_I2C_MspInit+0x194>)
 8001698:	f000 fe58 	bl	800234c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
}
 80016b8:	e050      	b.n	800175c <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a2d      	ldr	r2, [pc, #180]	@ (8001774 <HAL_I2C_MspInit+0x19c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d14b      	bne.n	800175c <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a26      	ldr	r2, [pc, #152]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	2304      	movs	r3, #4
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4817      	ldr	r0, [pc, #92]	@ (8001778 <HAL_I2C_MspInit+0x1a0>)
 800171a:	f000 fe17 	bl	800234c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001730:	2304      	movs	r3, #4
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4810      	ldr	r0, [pc, #64]	@ (800177c <HAL_I2C_MspInit+0x1a4>)
 800173c:	f000 fe06 	bl	800234c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 800174a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800174e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <HAL_I2C_MspInit+0x190>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
}
 800175c:	bf00      	nop
 800175e:	3738      	adds	r7, #56	@ 0x38
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40005400 	.word	0x40005400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020400 	.word	0x40020400
 8001770:	40005800 	.word	0x40005800
 8001774:	40005c00 	.word	0x40005c00
 8001778:	40020800 	.word	0x40020800
 800177c:	40020000 	.word	0x40020000

08001780 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001788:	1d39      	adds	r1, r7, #4
 800178a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178e:	2201      	movs	r2, #1
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <__io_putchar+0x20>)
 8001792:	f001 fd97 	bl	80032c4 <HAL_UART_Transmit>
return ch;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200004c4 	.word	0x200004c4
 80017a4:	00000000 	.word	0x00000000

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ae:	f000 fb93 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b2:	f000 f8bb 	bl	800192c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b6:	f7ff fe09 	bl	80013cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ba:	f7ff fe83 	bl	80014c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017be:	f7ff feaf 	bl	8001520 <MX_I2C2_Init>
  MX_I2C3_Init();
 80017c2:	f7ff fedb 	bl	800157c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80017c6:	f000 fa83 	bl	8001cd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017ca:	f000 faab 	bl	8001d24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1,RS485_buff,50);
 80017ce:	2232      	movs	r2, #50	@ 0x32
 80017d0:	494f      	ldr	r1, [pc, #316]	@ (8001910 <main+0x168>)
 80017d2:	4850      	ldr	r0, [pc, #320]	@ (8001914 <main+0x16c>)
 80017d4:	f001 fe98 	bl	8003508 <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
//	  HAL_UART_Transmit(&huart1, (uint8_t *)&RS485_buff, 100, 0);//可以接收到
//	  control_Send(CMD_ANGLE_CONTROL1,1,ang);
//	  control_Send(CMD_ANGLE_CONTROL1,2,1);/*用于测试*/
	  if(re){
 80017d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001918 <main+0x170>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0fb      	beq.n	80017d8 <main+0x30>
		    // 假设 RS485_buff 中已经存储了接收到的数据，如 "10,5"
//		  int comma_found = 0;
		  int16_t value1 = 0, value2 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	83fb      	strh	r3, [r7, #30]
 80017e4:	2300      	movs	r3, #0
 80017e6:	83bb      	strh	r3, [r7, #28]
//	        }
//		  printf("value1: %hd, value2: %hd\n", value1, value2);

	        // 假设 RS485_buff 中已经存储了接收到的数据，如 "-10,5"
	        char *token;
	        int16_t x = 0, y = 0, z = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	837b      	strh	r3, [r7, #26]
 80017ec:	2300      	movs	r3, #0
 80017ee:	833b      	strh	r3, [r7, #24]
 80017f0:	2300      	movs	r3, #0
 80017f2:	82fb      	strh	r3, [r7, #22]
	        token = strtok((char *)RS485_buff, ",");
 80017f4:	4949      	ldr	r1, [pc, #292]	@ (800191c <main+0x174>)
 80017f6:	4846      	ldr	r0, [pc, #280]	@ (8001910 <main+0x168>)
 80017f8:	f003 fe6a 	bl	80054d0 <strtok>
 80017fc:	6138      	str	r0, [r7, #16]
	        x = (int16_t)strtol(token, NULL, 10);
 80017fe:	220a      	movs	r2, #10
 8001800:	2100      	movs	r1, #0
 8001802:	6938      	ldr	r0, [r7, #16]
 8001804:	f002 feae 	bl	8004564 <strtol>
 8001808:	4603      	mov	r3, r0
 800180a:	837b      	strh	r3, [r7, #26]
	        token = strtok(NULL, ",");
 800180c:	4943      	ldr	r1, [pc, #268]	@ (800191c <main+0x174>)
 800180e:	2000      	movs	r0, #0
 8001810:	f003 fe5e 	bl	80054d0 <strtok>
 8001814:	6138      	str	r0, [r7, #16]
	        y = (int16_t)strtol(token, NULL, 10);
 8001816:	220a      	movs	r2, #10
 8001818:	2100      	movs	r1, #0
 800181a:	6938      	ldr	r0, [r7, #16]
 800181c:	f002 fea2 	bl	8004564 <strtol>
 8001820:	4603      	mov	r3, r0
 8001822:	833b      	strh	r3, [r7, #24]
	        token = strtok(NULL, ",");
 8001824:	493d      	ldr	r1, [pc, #244]	@ (800191c <main+0x174>)
 8001826:	2000      	movs	r0, #0
 8001828:	f003 fe52 	bl	80054d0 <strtok>
 800182c:	6138      	str	r0, [r7, #16]
	        z = (int16_t)strtol(token, NULL, 10);
 800182e:	220a      	movs	r2, #10
 8001830:	2100      	movs	r1, #0
 8001832:	6938      	ldr	r0, [r7, #16]
 8001834:	f002 fe96 	bl	8004564 <strtol>
 8001838:	4603      	mov	r3, r0
 800183a:	82fb      	strh	r3, [r7, #22]

	        printf("value1: %hd, value2: %hd, value3: %hd\n", x, y, z);
 800183c:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8001840:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001844:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001848:	4835      	ldr	r0, [pc, #212]	@ (8001920 <main+0x178>)
 800184a:	f003 fdc3 	bl	80053d4 <iprintf>
	        double theta = atan2(y, x);
 800184e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe66 	bl	8000524 <__aeabi_i2d>
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
 800185c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe5f 	bl	8000524 <__aeabi_i2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ec43 2b11 	vmov	d1, r2, r3
 800186e:	ec45 4b10 	vmov	d0, r4, r5
 8001872:	f007 f9d9 	bl	8008c28 <atan2>
 8001876:	ed87 0b02 	vstr	d0, [r7, #8]
	        double degrees = theta * 180 / M_PI;
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <main+0x17c>)
 8001880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001884:	f7fe feb8 	bl	80005f8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a31d      	add	r3, pc, #116	@ (adr r3, 8001908 <main+0x160>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe ffd9 	bl	800084c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	e9c7 2300 	strd	r2, r3, [r7]
//	        double d = sqrt(x*x + y*y);
//	        double the = atan2(z, d);
//	        double deg = the * 180 / M_PI;


				value1 = (z+20) * 100;
 80018a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a6:	3314      	adds	r3, #20
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	0091      	lsls	r1, r2, #2
 80018b4:	461a      	mov	r2, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	83fb      	strh	r3, [r7, #30]
				value2 = (degrees) * 100;
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <main+0x180>)
 80018c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f93f 	bl	8000b58 <__aeabi_d2iz>
 80018da:	4603      	mov	r3, r0
 80018dc:	83bb      	strh	r3, [r7, #28]
		control_Send(CMD_ANGLE_CONTROL1, 1, value1);
 80018de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018e2:	461a      	mov	r2, r3
 80018e4:	2101      	movs	r1, #1
 80018e6:	20a3      	movs	r0, #163	@ 0xa3
 80018e8:	f7ff fce0 	bl	80012ac <control_Send>
		HAL_Delay(50);
 80018ec:	2032      	movs	r0, #50	@ 0x32
 80018ee:	f000 fb65 	bl	8001fbc <HAL_Delay>
		control_Send(CMD_ANGLE_CONTROL1, 2, value2);
 80018f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2102      	movs	r1, #2
 80018fa:	20a3      	movs	r0, #163	@ 0xa3
 80018fc:	f7ff fcd6 	bl	80012ac <control_Send>
		re=0;
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <main+0x170>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	  if(re){
 8001906:	e767      	b.n	80017d8 <main+0x30>
 8001908:	54442d18 	.word	0x54442d18
 800190c:	400921fb 	.word	0x400921fb
 8001910:	200002f4 	.word	0x200002f4
 8001914:	200004c4 	.word	0x200004c4
 8001918:	20000328 	.word	0x20000328
 800191c:	0800916c 	.word	0x0800916c
 8001920:	08009170 	.word	0x08009170
 8001924:	40668000 	.word	0x40668000
 8001928:	40590000 	.word	0x40590000

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b094      	sub	sp, #80	@ 0x50
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	2230      	movs	r2, #48	@ 0x30
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fdbf 	bl	80054be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <SystemClock_Config+0xcc>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <SystemClock_Config+0xcc>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001960:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <SystemClock_Config+0xcc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <SystemClock_Config+0xd0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <SystemClock_Config+0xd0>)
 8001976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <SystemClock_Config+0xd0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800198c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001992:	2302      	movs	r3, #2
 8001994:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001996:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800199c:	2319      	movs	r3, #25
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019aa:	2304      	movs	r3, #4
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 ffde 	bl	8002974 <HAL_RCC_OscConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019be:	f000 f847 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2105      	movs	r1, #5
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fa3f 	bl	8002e64 <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019ec:	f000 f830 	bl	8001a50 <Error_Handler>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3750      	adds	r7, #80	@ 0x50
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/*不定长数据帧接收中断*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
	if (huart == &huart1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_UARTEx_RxEventCallback+0x3c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d10f      	bne.n	8001a34 <HAL_UARTEx_RxEventCallback+0x34>
	{
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8001a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a18:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a1a:	f000 fe4c 	bl	80026b6 <HAL_GPIO_TogglePin>
		re=1;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_UARTEx_RxEventCallback+0x44>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
		size=Size;
 8001a24:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	8013      	strh	r3, [r2, #0]
//			}
//		}
	//    else{
	//    	RS485_SendPacket(RS485_buff,Size);/*接受到什么就返回�??么，用于测试*/
	//    }
		HAL_UARTEx_ReceiveToIdle_IT(&huart1,RS485_buff,50);
 8001a2a:	2232      	movs	r2, #50	@ 0x32
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001a2e:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <HAL_UARTEx_RxEventCallback+0x3c>)
 8001a30:	f001 fd6a 	bl	8003508 <HAL_UARTEx_ReceiveToIdle_IT>
	}
 }
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200004c4 	.word	0x200004c4
 8001a40:	40021000 	.word	0x40021000
 8001a44:	20000328 	.word	0x20000328
 8001a48:	20000326 	.word	0x20000326
 8001a4c:	200002f4 	.word	0x200002f4

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f000 fa3b 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <USART1_IRQHandler+0x10>)
 8001b12:	f001 fd57 	bl	80035c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200004c4 	.word	0x200004c4

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3a:	f003 fd6f 	bl	800561c <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b62:	bf00      	nop
 8001b64:	e7fd      	b.n	8001b62 <_exit+0x12>

08001b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e00a      	b.n	8001b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf0      	blt.n	8001b78 <_read+0x12>
  }

  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e009      	b.n	8001bc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fde0 	bl	8001780 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf1      	blt.n	8001bb2 <_write+0x12>
  }
  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_close>:

int _close(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c00:	605a      	str	r2, [r3, #4]
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_isatty>:

int _isatty(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f003 fcd4 	bl	800561c <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20020000 	.word	0x20020000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	2000032c 	.word	0x2000032c
 8001ca8:	200006a8 	.word	0x200006a8

08001cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <MX_USART1_UART_Init+0x50>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001d08:	f001 fa8c 	bl	8003224 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d12:	f7ff fe9d 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200004c4 	.word	0x200004c4
 8001d20:	40011000 	.word	0x40011000

08001d24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <MX_USART2_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	f001 fa62 	bl	8003224 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f7ff fe73 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000050c 	.word	0x2000050c
 8001d74:	40004400 	.word	0x40004400

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	@ 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a36      	ldr	r2, [pc, #216]	@ (8001e70 <HAL_UART_MspInit+0xf8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d135      	bne.n	8001e06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a34      	ldr	r2, [pc, #208]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dd2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de4:	2307      	movs	r3, #7
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4822      	ldr	r0, [pc, #136]	@ (8001e78 <HAL_UART_MspInit+0x100>)
 8001df0:	f000 faac 	bl	800234c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2025      	movs	r0, #37	@ 0x25
 8001dfa:	f000 f9de 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dfe:	2025      	movs	r0, #37	@ 0x25
 8001e00:	f000 f9f7 	bl	80021f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e04:	e030      	b.n	8001e68 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_UART_MspInit+0x104>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12b      	bne.n	8001e68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	4a16      	ldr	r2, [pc, #88]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e48:	2360      	movs	r3, #96	@ 0x60
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <HAL_UART_MspInit+0x108>)
 8001e64:	f000 fa72 	bl	800234c <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40020c00 	.word	0x40020c00

08001e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e88:	f7ff ff10 	bl	8001cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f003 fbb9 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7ff fc77 	bl	80017a8 <main>
  bx  lr    
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ec8:	080096c0 	.word	0x080096c0
  ldr r2, =_sbss
 8001ecc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ed0:	200006a4 	.word	0x200006a4

08001ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <HAL_Init+0x40>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_Init+0x40>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_Init+0x40>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f94f 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	200f      	movs	r0, #15
 8001f08:	f000 f808 	bl	8001f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fda6 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_InitTick+0x54>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f967 	bl	800220e <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00e      	b.n	8001f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d80a      	bhi.n	8001f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f000 f92f 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f5c:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <HAL_InitTick+0x5c>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000554 	.word	0x20000554

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000554 	.word	0x20000554

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff ffee 	bl	8001fa4 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_Delay+0x44>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	@ (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	@ (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	@ (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	@ 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff feb6 	bl	8001fa4 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d008      	beq.n	8002258 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e052      	b.n	80022fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0216 	bic.w	r2, r2, #22
 8002266:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002276:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <HAL_DMA_Abort+0x62>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0208 	bic.w	r2, r2, #8
 8002296:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e013      	b.n	80022d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff fe7b 	bl	8001fa4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d90c      	bls.n	80022d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e015      	b.n	80022fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e4      	bne.n	80022aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	223f      	movs	r2, #63	@ 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e00c      	b.n	800233e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e16b      	b.n	8002640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 815a 	bne.w	800263a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	2b02      	cmp	r3, #2
 800239c:	d130      	bne.n	8002400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0201 	and.w	r2, r3, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b03      	cmp	r3, #3
 800240a:	d017      	beq.n	800243c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80b4 	beq.w	800263a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b60      	ldr	r3, [pc, #384]	@ (8002658 <HAL_GPIO_Init+0x30c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	4a5f      	ldr	r2, [pc, #380]	@ (8002658 <HAL_GPIO_Init+0x30c>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002658 <HAL_GPIO_Init+0x30c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_GPIO_Init+0x310>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	@ (8002660 <HAL_GPIO_Init+0x314>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a51      	ldr	r2, [pc, #324]	@ (8002664 <HAL_GPIO_Init+0x318>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a50      	ldr	r2, [pc, #320]	@ (8002668 <HAL_GPIO_Init+0x31c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4f      	ldr	r2, [pc, #316]	@ (800266c <HAL_GPIO_Init+0x320>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x21a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4e      	ldr	r2, [pc, #312]	@ (8002670 <HAL_GPIO_Init+0x324>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x216>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4d      	ldr	r2, [pc, #308]	@ (8002674 <HAL_GPIO_Init+0x328>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x212>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4c      	ldr	r2, [pc, #304]	@ (8002678 <HAL_GPIO_Init+0x32c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x20e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4b      	ldr	r2, [pc, #300]	@ (800267c <HAL_GPIO_Init+0x330>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x20a>
 8002552:	2307      	movs	r3, #7
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002556:	2308      	movs	r3, #8
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	@ (800265c <HAL_GPIO_Init+0x310>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_GPIO_Init+0x334>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a32      	ldr	r2, [pc, #200]	@ (8002680 <HAL_GPIO_Init+0x334>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b30      	ldr	r3, [pc, #192]	@ (8002680 <HAL_GPIO_Init+0x334>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_GPIO_Init+0x334>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <HAL_GPIO_Init+0x334>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <HAL_GPIO_Init+0x334>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_GPIO_Init+0x334>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <HAL_GPIO_Init+0x334>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae90 	bls.w	8002368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40021c00 	.word	0x40021c00
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c8:	887a      	ldrh	r2, [r7, #2]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	041a      	lsls	r2, r3, #16
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	400b      	ands	r3, r1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe ff60 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f000 fd40 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	@ (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	@ (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	@ (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	@ (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e267      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002992:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b85      	ldr	r3, [pc, #532]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b82      	ldr	r3, [pc, #520]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e242      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x74>
 80029da:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4b70      	ldr	r3, [pc, #448]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6c      	ldr	r2, [pc, #432]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	4b69      	ldr	r3, [pc, #420]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff faba 	bl	8001fa4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff fab6 	bl	8001fa4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e207      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xc0>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff faa6 	bl	8001fa4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff faa2 	bl	8001fa4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1f3      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe8>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b44      	ldr	r3, [pc, #272]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c7      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4937      	ldr	r1, [pc, #220]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7ff fa5b 	bl	8001fa4 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff fa57 	bl	8001fa4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1a8      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4925      	ldr	r1, [pc, #148]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fa3a 	bl	8001fa4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fa36 	bl	8001fa4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e187      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d036      	beq.n	8002bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fa1a 	bl	8001fa4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff fa16 	bl	8001fa4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e167      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x200>
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff fa03 	bl	8001fa4 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7ff f9ff 	bl	8001fa4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e150      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b88      	ldr	r3, [pc, #544]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8097 	beq.w	8002d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b81      	ldr	r3, [pc, #516]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b7d      	ldr	r3, [pc, #500]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b77      	ldr	r3, [pc, #476]	@ (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b74      	ldr	r3, [pc, #464]	@ (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	@ (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7ff f9bf 	bl	8001fa4 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7ff f9bb 	bl	8001fa4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e10c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
 8002c50:	4b64      	ldr	r3, [pc, #400]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	4a63      	ldr	r2, [pc, #396]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x30c>
 8002c66:	4b5f      	ldr	r3, [pc, #380]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c72:	4b5c      	ldr	r3, [pc, #368]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a5b      	ldr	r2, [pc, #364]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c80:	4b58      	ldr	r3, [pc, #352]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a57      	ldr	r2, [pc, #348]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	4b55      	ldr	r3, [pc, #340]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a54      	ldr	r2, [pc, #336]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7ff f980 	bl	8001fa4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7ff f97c 	bl	8001fa4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0cb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x334>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7ff f96a 	bl	8001fa4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7ff f966 	bl	8001fa4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0b5      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	4a38      	ldr	r2, [pc, #224]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a1 	beq.w	8002e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d12:	4b34      	ldr	r3, [pc, #208]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d05c      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d141      	bne.n	8002daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff f93a 	bl	8001fa4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7ff f936 	bl	8001fa4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e087      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	491b      	ldr	r1, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff f90f 	bl	8001fa4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7ff f90b 	bl	8001fa4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e05c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x416>
 8002da8:	e054      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_OscConfig+0x478>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f8f8 	bl	8001fa4 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7ff f8f4 	bl	8001fa4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e045      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x444>
 8002dd6:	e03d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e038      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x4ec>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d028      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d121      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d11a      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d111      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800

08002e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cc      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b68      	ldr	r3, [pc, #416]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d90c      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b65      	ldr	r3, [pc, #404]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d044      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b3f      	ldr	r3, [pc, #252]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e067      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4934      	ldr	r1, [pc, #208]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7ff f826 	bl	8001fa4 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7ff f822 	bl	8001fa4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e04f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b25      	ldr	r3, [pc, #148]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d20c      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b22      	ldr	r3, [pc, #136]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe ff86 	bl	8001f1c <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	08009198 	.word	0x08009198
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b090      	sub	sp, #64	@ 0x40
 8003036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003048:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d00d      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x40>
 8003054:	2b08      	cmp	r3, #8
 8003056:	f200 80a1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x16c>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x34>
 800305e:	2b04      	cmp	r3, #4
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x3a>
 8003062:	e09b      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003068:	e09b      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800306e:	e098      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b4f      	ldr	r3, [pc, #316]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307a:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d028      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	2200      	movs	r2, #0
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	627a      	str	r2, [r7, #36]	@ 0x24
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003098:	2100      	movs	r1, #0
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800309c:	fb03 f201 	mul.w	r2, r3, r1
 80030a0:	2300      	movs	r3, #0
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	4a43      	ldr	r2, [pc, #268]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030aa:	fba0 1202 	umull	r1, r2, r0, r2
 80030ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b0:	460a      	mov	r2, r1
 80030b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b6:	4413      	add	r3, r2
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	2200      	movs	r2, #0
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	61fa      	str	r2, [r7, #28]
 80030c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030ca:	f7fd fddd 	bl	8000c88 <__aeabi_uldivmod>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4613      	mov	r3, r2
 80030d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030d6:	e053      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4b35      	ldr	r3, [pc, #212]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	617a      	str	r2, [r7, #20]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ea:	f04f 0b00 	mov.w	fp, #0
 80030ee:	4652      	mov	r2, sl
 80030f0:	465b      	mov	r3, fp
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	0159      	lsls	r1, r3, #5
 80030fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003100:	0150      	lsls	r0, r2, #5
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	ebb2 080a 	subs.w	r8, r2, sl
 800310a:	eb63 090b 	sbc.w	r9, r3, fp
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800311a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800311e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003122:	ebb2 0408 	subs.w	r4, r2, r8
 8003126:	eb63 0509 	sbc.w	r5, r3, r9
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	00eb      	lsls	r3, r5, #3
 8003134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003138:	00e2      	lsls	r2, r4, #3
 800313a:	4614      	mov	r4, r2
 800313c:	461d      	mov	r5, r3
 800313e:	eb14 030a 	adds.w	r3, r4, sl
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	eb45 030b 	adc.w	r3, r5, fp
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003156:	4629      	mov	r1, r5
 8003158:	028b      	lsls	r3, r1, #10
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003160:	4621      	mov	r1, r4
 8003162:	028a      	lsls	r2, r1, #10
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	2200      	movs	r2, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003174:	f7fd fd88 	bl	8000c88 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003190:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3740      	adds	r7, #64	@ 0x40
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	017d7840 	.word	0x017d7840

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff0 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	080091a8 	.word	0x080091a8

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003200:	f7ff ffdc 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0b5b      	lsrs	r3, r3, #13
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	080091a8 	.word	0x080091a8

08003224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e042      	b.n	80032bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe fd94 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	@ 0x24
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fe8b 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800327c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800328c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800329c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d175      	bne.n	80033d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Transmit+0x2c>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06e      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2221      	movs	r2, #33	@ 0x21
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003302:	f7fe fe4f 	bl	8001fa4 <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331c:	d108      	bne.n	8003330 <HAL_UART_Transmit+0x6c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e003      	b.n	8003338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003338:	e02e      	b.n	8003398 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2180      	movs	r1, #128	@ 0x80
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fbed 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e03a      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e007      	b.n	800338a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1cb      	bne.n	800333a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2140      	movs	r1, #64	@ 0x40
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fbb9 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e006      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08a      	sub	sp, #40	@ 0x28
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	f040 8081 	bne.w	80034fe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Receive+0x2e>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e079      	b.n	8003500 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2222      	movs	r2, #34	@ 0x22
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003420:	f7fe fdc0 	bl	8001fa4 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d108      	bne.n	800344e <HAL_UART_Receive+0x74>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e003      	b.n	8003456 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003456:	e047      	b.n	80034e8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	2120      	movs	r1, #32
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb5e 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e042      	b.n	8003500 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10c      	bne.n	800349a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	b29a      	uxth	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	3302      	adds	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e01f      	b.n	80034da <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a2:	d007      	beq.n	80034b4 <HAL_UART_Receive+0xda>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_UART_Receive+0xe8>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e008      	b.n	80034d4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1b2      	bne.n	8003458 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	@ 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d14a      	bne.n	80035b8 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e043      	b.n	80035ba <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fb46 	bl	8003bd6 <UART_Start_Receive_IT>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003554:	2b00      	cmp	r3, #0
 8003556:	d12c      	bne.n	80035b2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	d125      	bne.n	80035ac <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	617b      	str	r3, [r7, #20]
   return(result);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003596:	627a      	str	r2, [r7, #36]	@ 0x24
 8003598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80035aa:	e002      	b.n	80035b2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80035b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035b6:	e000      	b.n	80035ba <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3730      	adds	r7, #48	@ 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b0ba      	sub	sp, #232	@ 0xe8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_UART_IRQHandler+0x66>
 8003616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fbf0 	bl	8003e08 <UART_Receive_IT>
      return;
 8003628:	e25b      	b.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800362a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80de 	beq.w	80037f0 <HAL_UART_IRQHandler+0x22c>
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003644:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80d1 	beq.w	80037f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_UART_IRQHandler+0xae>
 800365a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0xd2>
 800367e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xf6>
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d011      	beq.n	80036ea <HAL_UART_IRQHandler+0x126>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 81f2 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_UART_IRQHandler+0x14e>
 8003700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb7b 	bl	8003e08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <HAL_UART_IRQHandler+0x17a>
 8003736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04f      	beq.n	80037de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa83 	bl	8003c4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d141      	bne.n	80037d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3314      	adds	r3, #20
 8003758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800376c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800377e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800378a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1d9      	bne.n	8003752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d013      	beq.n	80037ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037aa:	4a7e      	ldr	r2, [pc, #504]	@ (80039a4 <HAL_UART_IRQHandler+0x3e0>)
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fda7 	bl	8002306 <HAL_DMA_Abort_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e00e      	b.n	80037ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f99e 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00a      	b.n	80037ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f99a 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e006      	b.n	80037ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f996 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037ea:	e175      	b.n	8003ad8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	bf00      	nop
    return;
 80037ee:	e173      	b.n	8003ad8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 814f 	bne.w	8003a98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8148 	beq.w	8003a98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8141 	beq.w	8003a98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	f040 80b6 	bne.w	80039a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8145 	beq.w	8003adc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800385a:	429a      	cmp	r2, r3
 800385c:	f080 813e 	bcs.w	8003adc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003866:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003872:	f000 8088 	beq.w	8003986 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800388c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1d9      	bne.n	8003876 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e1      	bne.n	80038c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800390e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e3      	bne.n	80038fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003956:	f023 0310 	bic.w	r3, r3, #16
 800395a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003968:	65ba      	str	r2, [r7, #88]	@ 0x58
 800396a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800396e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e3      	bne.n	8003944 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fc50 	bl	8002226 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	4619      	mov	r1, r3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fe f82f 	bl	8001a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a2:	e09b      	b.n	8003adc <HAL_UART_IRQHandler+0x518>
 80039a4:	08003d11 	.word	0x08003d11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 808e 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8089 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80039f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	623b      	str	r3, [r7, #32]
   return(result);
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e3      	bne.n	8003a06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0310 	bic.w	r3, r3, #16
 8003a62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a70:	61fa      	str	r2, [r7, #28]
 8003a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e3      	bne.n	8003a4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fd ffb5 	bl	8001a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a96:	e023      	b.n	8003ae0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x4f4>
 8003aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f941 	bl	8003d38 <UART_Transmit_IT>
    return;
 8003ab6:	e014      	b.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f981 	bl	8003dd8 <UART_EndTransmit_IT>
    return;
 8003ad6:	e004      	b.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ad8:	bf00      	nop
 8003ada:	e002      	b.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ae0:	bf00      	nop
  }
}
 8003ae2:	37e8      	adds	r7, #232	@ 0xe8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	e03b      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d037      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fa31 	bl	8001fa4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03a      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d020      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d01d      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d116      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f857 	bl	8003c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00f      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d0b4      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	@ 0x22
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b095      	sub	sp, #84	@ 0x54
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c72:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d119      	bne.n	8003cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce2:	61ba      	str	r2, [r7, #24]
 8003ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6979      	ldr	r1, [r7, #20]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e5      	bne.n	8003cc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d04:	bf00      	nop
 8003d06:	3754      	adds	r7, #84	@ 0x54
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff fef0 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b21      	cmp	r3, #33	@ 0x21
 8003d4a:	d13e      	bne.n	8003dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d114      	bne.n	8003d80 <UART_Transmit_IT+0x48>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d110      	bne.n	8003d80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	e008      	b.n	8003d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6211      	str	r1, [r2, #32]
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fe75 	bl	8003ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b22      	cmp	r3, #34	@ 0x22
 8003e1a:	f040 80ae 	bne.w	8003f7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e26:	d117      	bne.n	8003e58 <UART_Receive_IT+0x50>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e56:	e026      	b.n	8003ea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d007      	beq.n	8003e7c <UART_Receive_IT+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <UART_Receive_IT+0x82>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e008      	b.n	8003e9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15d      	bne.n	8003f76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0220 	bic.w	r2, r2, #32
 8003ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d135      	bne.n	8003f6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f26:	623a      	str	r2, [r7, #32]
 8003f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d10a      	bne.n	8003f5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7fd fd4b 	bl	8001a00 <HAL_UARTEx_RxEventCallback>
 8003f6a:	e002      	b.n	8003f72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fdc5 	bl	8003afc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e002      	b.n	8003f7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3730      	adds	r7, #48	@ 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	@ 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	@ (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	@ (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7ff f8ea 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff f8d1 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040c8:	f7fc fdde 	bl	8000c88 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	@ (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	@ 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800415e:	f7fc fd93 	bl	8000c88 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	@ 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800421a:	f7fc fd35 	bl	8000c88 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	@ 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	@ 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e106      	b.n	800445c <UART_SetConfig+0x4d8>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042dc:	f7fc fcd4 	bl	8000c88 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	@ (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800435a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800437a:	f7fc fc85 	bl	8000c88 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4611      	mov	r1, r2
 8004384:	4b38      	ldr	r3, [pc, #224]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004386:	fba3 2301 	umull	r2, r3, r3, r1
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2264      	movs	r2, #100	@ 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	@ 0x32
 8004398:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <UART_SetConfig+0x4e4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a4:	441c      	add	r4, r3
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80043b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	415b      	adcs	r3, r3
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043f6:	464b      	mov	r3, r9
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	663b      	str	r3, [r7, #96]	@ 0x60
 800440a:	667a      	str	r2, [r7, #100]	@ 0x64
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800442a:	f7fc fc2d 	bl	8000c88 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	@ 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	@ 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	@ (8004468 <UART_SetConfig+0x4e4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4422      	add	r2, r4
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004462:	46bd      	mov	sp, r7
 8004464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <_strtol_l.constprop.0>:
 800446c:	2b24      	cmp	r3, #36	@ 0x24
 800446e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004472:	4686      	mov	lr, r0
 8004474:	4690      	mov	r8, r2
 8004476:	d801      	bhi.n	800447c <_strtol_l.constprop.0+0x10>
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <_strtol_l.constprop.0+0x1e>
 800447c:	f001 f8ce 	bl	800561c <__errno>
 8004480:	2316      	movs	r3, #22
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	2000      	movs	r0, #0
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	4834      	ldr	r0, [pc, #208]	@ (800455c <_strtol_l.constprop.0+0xf0>)
 800448c:	460d      	mov	r5, r1
 800448e:	462a      	mov	r2, r5
 8004490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004494:	5d06      	ldrb	r6, [r0, r4]
 8004496:	f016 0608 	ands.w	r6, r6, #8
 800449a:	d1f8      	bne.n	800448e <_strtol_l.constprop.0+0x22>
 800449c:	2c2d      	cmp	r4, #45	@ 0x2d
 800449e:	d12d      	bne.n	80044fc <_strtol_l.constprop.0+0x90>
 80044a0:	782c      	ldrb	r4, [r5, #0]
 80044a2:	2601      	movs	r6, #1
 80044a4:	1c95      	adds	r5, r2, #2
 80044a6:	f033 0210 	bics.w	r2, r3, #16
 80044aa:	d109      	bne.n	80044c0 <_strtol_l.constprop.0+0x54>
 80044ac:	2c30      	cmp	r4, #48	@ 0x30
 80044ae:	d12a      	bne.n	8004506 <_strtol_l.constprop.0+0x9a>
 80044b0:	782a      	ldrb	r2, [r5, #0]
 80044b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80044b6:	2a58      	cmp	r2, #88	@ 0x58
 80044b8:	d125      	bne.n	8004506 <_strtol_l.constprop.0+0x9a>
 80044ba:	786c      	ldrb	r4, [r5, #1]
 80044bc:	2310      	movs	r3, #16
 80044be:	3502      	adds	r5, #2
 80044c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80044c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80044c8:	2200      	movs	r2, #0
 80044ca:	fbbc f9f3 	udiv	r9, ip, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80044d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80044d8:	2f09      	cmp	r7, #9
 80044da:	d81b      	bhi.n	8004514 <_strtol_l.constprop.0+0xa8>
 80044dc:	463c      	mov	r4, r7
 80044de:	42a3      	cmp	r3, r4
 80044e0:	dd27      	ble.n	8004532 <_strtol_l.constprop.0+0xc6>
 80044e2:	1c57      	adds	r7, r2, #1
 80044e4:	d007      	beq.n	80044f6 <_strtol_l.constprop.0+0x8a>
 80044e6:	4581      	cmp	r9, r0
 80044e8:	d320      	bcc.n	800452c <_strtol_l.constprop.0+0xc0>
 80044ea:	d101      	bne.n	80044f0 <_strtol_l.constprop.0+0x84>
 80044ec:	45a2      	cmp	sl, r4
 80044ee:	db1d      	blt.n	800452c <_strtol_l.constprop.0+0xc0>
 80044f0:	fb00 4003 	mla	r0, r0, r3, r4
 80044f4:	2201      	movs	r2, #1
 80044f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044fa:	e7eb      	b.n	80044d4 <_strtol_l.constprop.0+0x68>
 80044fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80044fe:	bf04      	itt	eq
 8004500:	782c      	ldrbeq	r4, [r5, #0]
 8004502:	1c95      	addeq	r5, r2, #2
 8004504:	e7cf      	b.n	80044a6 <_strtol_l.constprop.0+0x3a>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1da      	bne.n	80044c0 <_strtol_l.constprop.0+0x54>
 800450a:	2c30      	cmp	r4, #48	@ 0x30
 800450c:	bf0c      	ite	eq
 800450e:	2308      	moveq	r3, #8
 8004510:	230a      	movne	r3, #10
 8004512:	e7d5      	b.n	80044c0 <_strtol_l.constprop.0+0x54>
 8004514:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004518:	2f19      	cmp	r7, #25
 800451a:	d801      	bhi.n	8004520 <_strtol_l.constprop.0+0xb4>
 800451c:	3c37      	subs	r4, #55	@ 0x37
 800451e:	e7de      	b.n	80044de <_strtol_l.constprop.0+0x72>
 8004520:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004524:	2f19      	cmp	r7, #25
 8004526:	d804      	bhi.n	8004532 <_strtol_l.constprop.0+0xc6>
 8004528:	3c57      	subs	r4, #87	@ 0x57
 800452a:	e7d8      	b.n	80044de <_strtol_l.constprop.0+0x72>
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	e7e1      	b.n	80044f6 <_strtol_l.constprop.0+0x8a>
 8004532:	1c53      	adds	r3, r2, #1
 8004534:	d108      	bne.n	8004548 <_strtol_l.constprop.0+0xdc>
 8004536:	2322      	movs	r3, #34	@ 0x22
 8004538:	f8ce 3000 	str.w	r3, [lr]
 800453c:	4660      	mov	r0, ip
 800453e:	f1b8 0f00 	cmp.w	r8, #0
 8004542:	d0a0      	beq.n	8004486 <_strtol_l.constprop.0+0x1a>
 8004544:	1e69      	subs	r1, r5, #1
 8004546:	e006      	b.n	8004556 <_strtol_l.constprop.0+0xea>
 8004548:	b106      	cbz	r6, 800454c <_strtol_l.constprop.0+0xe0>
 800454a:	4240      	negs	r0, r0
 800454c:	f1b8 0f00 	cmp.w	r8, #0
 8004550:	d099      	beq.n	8004486 <_strtol_l.constprop.0+0x1a>
 8004552:	2a00      	cmp	r2, #0
 8004554:	d1f6      	bne.n	8004544 <_strtol_l.constprop.0+0xd8>
 8004556:	f8c8 1000 	str.w	r1, [r8]
 800455a:	e794      	b.n	8004486 <_strtol_l.constprop.0+0x1a>
 800455c:	080091b1 	.word	0x080091b1

08004560 <_strtol_r>:
 8004560:	f7ff bf84 	b.w	800446c <_strtol_l.constprop.0>

08004564 <strtol>:
 8004564:	4613      	mov	r3, r2
 8004566:	460a      	mov	r2, r1
 8004568:	4601      	mov	r1, r0
 800456a:	4802      	ldr	r0, [pc, #8]	@ (8004574 <strtol+0x10>)
 800456c:	6800      	ldr	r0, [r0, #0]
 800456e:	f7ff bf7d 	b.w	800446c <_strtol_l.constprop.0>
 8004572:	bf00      	nop
 8004574:	20000018 	.word	0x20000018

08004578 <__cvt>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	ec57 6b10 	vmov	r6, r7, d0
 8004580:	2f00      	cmp	r7, #0
 8004582:	460c      	mov	r4, r1
 8004584:	4619      	mov	r1, r3
 8004586:	463b      	mov	r3, r7
 8004588:	bfbb      	ittet	lt
 800458a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800458e:	461f      	movlt	r7, r3
 8004590:	2300      	movge	r3, #0
 8004592:	232d      	movlt	r3, #45	@ 0x2d
 8004594:	700b      	strb	r3, [r1, #0]
 8004596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004598:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800459c:	4691      	mov	r9, r2
 800459e:	f023 0820 	bic.w	r8, r3, #32
 80045a2:	bfbc      	itt	lt
 80045a4:	4632      	movlt	r2, r6
 80045a6:	4616      	movlt	r6, r2
 80045a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045ac:	d005      	beq.n	80045ba <__cvt+0x42>
 80045ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045b2:	d100      	bne.n	80045b6 <__cvt+0x3e>
 80045b4:	3401      	adds	r4, #1
 80045b6:	2102      	movs	r1, #2
 80045b8:	e000      	b.n	80045bc <__cvt+0x44>
 80045ba:	2103      	movs	r1, #3
 80045bc:	ab03      	add	r3, sp, #12
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	ab02      	add	r3, sp, #8
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	ec47 6b10 	vmov	d0, r6, r7
 80045c8:	4653      	mov	r3, sl
 80045ca:	4622      	mov	r2, r4
 80045cc:	f001 f900 	bl	80057d0 <_dtoa_r>
 80045d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045d4:	4605      	mov	r5, r0
 80045d6:	d119      	bne.n	800460c <__cvt+0x94>
 80045d8:	f019 0f01 	tst.w	r9, #1
 80045dc:	d00e      	beq.n	80045fc <__cvt+0x84>
 80045de:	eb00 0904 	add.w	r9, r0, r4
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	4630      	mov	r0, r6
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7fc fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ee:	b108      	cbz	r0, 80045f4 <__cvt+0x7c>
 80045f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80045f4:	2230      	movs	r2, #48	@ 0x30
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	454b      	cmp	r3, r9
 80045fa:	d31e      	bcc.n	800463a <__cvt+0xc2>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004600:	1b5b      	subs	r3, r3, r5
 8004602:	4628      	mov	r0, r5
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	b004      	add	sp, #16
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004610:	eb00 0904 	add.w	r9, r0, r4
 8004614:	d1e5      	bne.n	80045e2 <__cvt+0x6a>
 8004616:	7803      	ldrb	r3, [r0, #0]
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d10a      	bne.n	8004632 <__cvt+0xba>
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fc fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8004628:	b918      	cbnz	r0, 8004632 <__cvt+0xba>
 800462a:	f1c4 0401 	rsb	r4, r4, #1
 800462e:	f8ca 4000 	str.w	r4, [sl]
 8004632:	f8da 3000 	ldr.w	r3, [sl]
 8004636:	4499      	add	r9, r3
 8004638:	e7d3      	b.n	80045e2 <__cvt+0x6a>
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	9103      	str	r1, [sp, #12]
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e7d9      	b.n	80045f6 <__cvt+0x7e>

08004642 <__exponent>:
 8004642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004644:	2900      	cmp	r1, #0
 8004646:	bfba      	itte	lt
 8004648:	4249      	neglt	r1, r1
 800464a:	232d      	movlt	r3, #45	@ 0x2d
 800464c:	232b      	movge	r3, #43	@ 0x2b
 800464e:	2909      	cmp	r1, #9
 8004650:	7002      	strb	r2, [r0, #0]
 8004652:	7043      	strb	r3, [r0, #1]
 8004654:	dd29      	ble.n	80046aa <__exponent+0x68>
 8004656:	f10d 0307 	add.w	r3, sp, #7
 800465a:	461d      	mov	r5, r3
 800465c:	270a      	movs	r7, #10
 800465e:	461a      	mov	r2, r3
 8004660:	fbb1 f6f7 	udiv	r6, r1, r7
 8004664:	fb07 1416 	mls	r4, r7, r6, r1
 8004668:	3430      	adds	r4, #48	@ 0x30
 800466a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800466e:	460c      	mov	r4, r1
 8004670:	2c63      	cmp	r4, #99	@ 0x63
 8004672:	f103 33ff 	add.w	r3, r3, #4294967295
 8004676:	4631      	mov	r1, r6
 8004678:	dcf1      	bgt.n	800465e <__exponent+0x1c>
 800467a:	3130      	adds	r1, #48	@ 0x30
 800467c:	1e94      	subs	r4, r2, #2
 800467e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004682:	1c41      	adds	r1, r0, #1
 8004684:	4623      	mov	r3, r4
 8004686:	42ab      	cmp	r3, r5
 8004688:	d30a      	bcc.n	80046a0 <__exponent+0x5e>
 800468a:	f10d 0309 	add.w	r3, sp, #9
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	42ac      	cmp	r4, r5
 8004692:	bf88      	it	hi
 8004694:	2300      	movhi	r3, #0
 8004696:	3302      	adds	r3, #2
 8004698:	4403      	add	r3, r0
 800469a:	1a18      	subs	r0, r3, r0
 800469c:	b003      	add	sp, #12
 800469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046a8:	e7ed      	b.n	8004686 <__exponent+0x44>
 80046aa:	2330      	movs	r3, #48	@ 0x30
 80046ac:	3130      	adds	r1, #48	@ 0x30
 80046ae:	7083      	strb	r3, [r0, #2]
 80046b0:	70c1      	strb	r1, [r0, #3]
 80046b2:	1d03      	adds	r3, r0, #4
 80046b4:	e7f1      	b.n	800469a <__exponent+0x58>
	...

080046b8 <_printf_float>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	b08d      	sub	sp, #52	@ 0x34
 80046be:	460c      	mov	r4, r1
 80046c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80046c4:	4616      	mov	r6, r2
 80046c6:	461f      	mov	r7, r3
 80046c8:	4605      	mov	r5, r0
 80046ca:	f000 ff5d 	bl	8005588 <_localeconv_r>
 80046ce:	6803      	ldr	r3, [r0, #0]
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb fdcc 	bl	8000270 <strlen>
 80046d8:	2300      	movs	r3, #0
 80046da:	930a      	str	r3, [sp, #40]	@ 0x28
 80046dc:	f8d8 3000 	ldr.w	r3, [r8]
 80046e0:	9005      	str	r0, [sp, #20]
 80046e2:	3307      	adds	r3, #7
 80046e4:	f023 0307 	bic.w	r3, r3, #7
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046f0:	f8d4 b000 	ldr.w	fp, [r4]
 80046f4:	f8c8 2000 	str.w	r2, [r8]
 80046f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004700:	9307      	str	r3, [sp, #28]
 8004702:	f8cd 8018 	str.w	r8, [sp, #24]
 8004706:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800470a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470e:	4b9c      	ldr	r3, [pc, #624]	@ (8004980 <_printf_float+0x2c8>)
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	f7fc fa0a 	bl	8000b2c <__aeabi_dcmpun>
 8004718:	bb70      	cbnz	r0, 8004778 <_printf_float+0xc0>
 800471a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471e:	4b98      	ldr	r3, [pc, #608]	@ (8004980 <_printf_float+0x2c8>)
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	f7fc f9e4 	bl	8000af0 <__aeabi_dcmple>
 8004728:	bb30      	cbnz	r0, 8004778 <_printf_float+0xc0>
 800472a:	2200      	movs	r2, #0
 800472c:	2300      	movs	r3, #0
 800472e:	4640      	mov	r0, r8
 8004730:	4649      	mov	r1, r9
 8004732:	f7fc f9d3 	bl	8000adc <__aeabi_dcmplt>
 8004736:	b110      	cbz	r0, 800473e <_printf_float+0x86>
 8004738:	232d      	movs	r3, #45	@ 0x2d
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800473e:	4a91      	ldr	r2, [pc, #580]	@ (8004984 <_printf_float+0x2cc>)
 8004740:	4b91      	ldr	r3, [pc, #580]	@ (8004988 <_printf_float+0x2d0>)
 8004742:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004746:	bf94      	ite	ls
 8004748:	4690      	movls	r8, r2
 800474a:	4698      	movhi	r8, r3
 800474c:	2303      	movs	r3, #3
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	f02b 0304 	bic.w	r3, fp, #4
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	f04f 0900 	mov.w	r9, #0
 800475a:	9700      	str	r7, [sp, #0]
 800475c:	4633      	mov	r3, r6
 800475e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f000 f9d2 	bl	8004b0c <_printf_common>
 8004768:	3001      	adds	r0, #1
 800476a:	f040 808d 	bne.w	8004888 <_printf_float+0x1d0>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295
 8004772:	b00d      	add	sp, #52	@ 0x34
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	4640      	mov	r0, r8
 800477e:	4649      	mov	r1, r9
 8004780:	f7fc f9d4 	bl	8000b2c <__aeabi_dcmpun>
 8004784:	b140      	cbz	r0, 8004798 <_printf_float+0xe0>
 8004786:	464b      	mov	r3, r9
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfbc      	itt	lt
 800478c:	232d      	movlt	r3, #45	@ 0x2d
 800478e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004792:	4a7e      	ldr	r2, [pc, #504]	@ (800498c <_printf_float+0x2d4>)
 8004794:	4b7e      	ldr	r3, [pc, #504]	@ (8004990 <_printf_float+0x2d8>)
 8004796:	e7d4      	b.n	8004742 <_printf_float+0x8a>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800479e:	9206      	str	r2, [sp, #24]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	d13b      	bne.n	800481c <_printf_float+0x164>
 80047a4:	2306      	movs	r3, #6
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80047ac:	2300      	movs	r3, #0
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80047b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80047b8:	ab09      	add	r3, sp, #36	@ 0x24
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	6861      	ldr	r1, [r4, #4]
 80047be:	ec49 8b10 	vmov	d0, r8, r9
 80047c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7ff fed6 	bl	8004578 <__cvt>
 80047cc:	9b06      	ldr	r3, [sp, #24]
 80047ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047d0:	2b47      	cmp	r3, #71	@ 0x47
 80047d2:	4680      	mov	r8, r0
 80047d4:	d129      	bne.n	800482a <_printf_float+0x172>
 80047d6:	1cc8      	adds	r0, r1, #3
 80047d8:	db02      	blt.n	80047e0 <_printf_float+0x128>
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	4299      	cmp	r1, r3
 80047de:	dd41      	ble.n	8004864 <_printf_float+0x1ac>
 80047e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80047e4:	fa5f fa8a 	uxtb.w	sl, sl
 80047e8:	3901      	subs	r1, #1
 80047ea:	4652      	mov	r2, sl
 80047ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80047f2:	f7ff ff26 	bl	8004642 <__exponent>
 80047f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047f8:	1813      	adds	r3, r2, r0
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	4681      	mov	r9, r0
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	dc02      	bgt.n	8004808 <_printf_float+0x150>
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	07d2      	lsls	r2, r2, #31
 8004806:	d501      	bpl.n	800480c <_printf_float+0x154>
 8004808:	3301      	adds	r3, #1
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0a2      	beq.n	800475a <_printf_float+0xa2>
 8004814:	232d      	movs	r3, #45	@ 0x2d
 8004816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800481a:	e79e      	b.n	800475a <_printf_float+0xa2>
 800481c:	9a06      	ldr	r2, [sp, #24]
 800481e:	2a47      	cmp	r2, #71	@ 0x47
 8004820:	d1c2      	bne.n	80047a8 <_printf_float+0xf0>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1c0      	bne.n	80047a8 <_printf_float+0xf0>
 8004826:	2301      	movs	r3, #1
 8004828:	e7bd      	b.n	80047a6 <_printf_float+0xee>
 800482a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800482e:	d9db      	bls.n	80047e8 <_printf_float+0x130>
 8004830:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004834:	d118      	bne.n	8004868 <_printf_float+0x1b0>
 8004836:	2900      	cmp	r1, #0
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	dd0b      	ble.n	8004854 <_printf_float+0x19c>
 800483c:	6121      	str	r1, [r4, #16]
 800483e:	b913      	cbnz	r3, 8004846 <_printf_float+0x18e>
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	07d0      	lsls	r0, r2, #31
 8004844:	d502      	bpl.n	800484c <_printf_float+0x194>
 8004846:	3301      	adds	r3, #1
 8004848:	440b      	add	r3, r1
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800484e:	f04f 0900 	mov.w	r9, #0
 8004852:	e7db      	b.n	800480c <_printf_float+0x154>
 8004854:	b913      	cbnz	r3, 800485c <_printf_float+0x1a4>
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	07d2      	lsls	r2, r2, #31
 800485a:	d501      	bpl.n	8004860 <_printf_float+0x1a8>
 800485c:	3302      	adds	r3, #2
 800485e:	e7f4      	b.n	800484a <_printf_float+0x192>
 8004860:	2301      	movs	r3, #1
 8004862:	e7f2      	b.n	800484a <_printf_float+0x192>
 8004864:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800486a:	4299      	cmp	r1, r3
 800486c:	db05      	blt.n	800487a <_printf_float+0x1c2>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6121      	str	r1, [r4, #16]
 8004872:	07d8      	lsls	r0, r3, #31
 8004874:	d5ea      	bpl.n	800484c <_printf_float+0x194>
 8004876:	1c4b      	adds	r3, r1, #1
 8004878:	e7e7      	b.n	800484a <_printf_float+0x192>
 800487a:	2900      	cmp	r1, #0
 800487c:	bfd4      	ite	le
 800487e:	f1c1 0202 	rsble	r2, r1, #2
 8004882:	2201      	movgt	r2, #1
 8004884:	4413      	add	r3, r2
 8004886:	e7e0      	b.n	800484a <_printf_float+0x192>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	055a      	lsls	r2, r3, #21
 800488c:	d407      	bmi.n	800489e <_printf_float+0x1e6>
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	4642      	mov	r2, r8
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	d12b      	bne.n	80048f4 <_printf_float+0x23c>
 800489c:	e767      	b.n	800476e <_printf_float+0xb6>
 800489e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048a2:	f240 80dd 	bls.w	8004a60 <_printf_float+0x3a8>
 80048a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	f7fc f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d033      	beq.n	800491e <_printf_float+0x266>
 80048b6:	4a37      	ldr	r2, [pc, #220]	@ (8004994 <_printf_float+0x2dc>)
 80048b8:	2301      	movs	r3, #1
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af54 	beq.w	800476e <_printf_float+0xb6>
 80048c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80048ca:	4543      	cmp	r3, r8
 80048cc:	db02      	blt.n	80048d4 <_printf_float+0x21c>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	07d8      	lsls	r0, r3, #31
 80048d2:	d50f      	bpl.n	80048f4 <_printf_float+0x23c>
 80048d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d8:	4631      	mov	r1, r6
 80048da:	4628      	mov	r0, r5
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f af45 	beq.w	800476e <_printf_float+0xb6>
 80048e4:	f04f 0900 	mov.w	r9, #0
 80048e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80048ec:	f104 0a1a 	add.w	sl, r4, #26
 80048f0:	45c8      	cmp	r8, r9
 80048f2:	dc09      	bgt.n	8004908 <_printf_float+0x250>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	079b      	lsls	r3, r3, #30
 80048f8:	f100 8103 	bmi.w	8004b02 <_printf_float+0x44a>
 80048fc:	68e0      	ldr	r0, [r4, #12]
 80048fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004900:	4298      	cmp	r0, r3
 8004902:	bfb8      	it	lt
 8004904:	4618      	movlt	r0, r3
 8004906:	e734      	b.n	8004772 <_printf_float+0xba>
 8004908:	2301      	movs	r3, #1
 800490a:	4652      	mov	r2, sl
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	47b8      	blx	r7
 8004912:	3001      	adds	r0, #1
 8004914:	f43f af2b 	beq.w	800476e <_printf_float+0xb6>
 8004918:	f109 0901 	add.w	r9, r9, #1
 800491c:	e7e8      	b.n	80048f0 <_printf_float+0x238>
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	dc39      	bgt.n	8004998 <_printf_float+0x2e0>
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <_printf_float+0x2dc>)
 8004926:	2301      	movs	r3, #1
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af1d 	beq.w	800476e <_printf_float+0xb6>
 8004934:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004938:	ea59 0303 	orrs.w	r3, r9, r3
 800493c:	d102      	bne.n	8004944 <_printf_float+0x28c>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	07d9      	lsls	r1, r3, #31
 8004942:	d5d7      	bpl.n	80048f4 <_printf_float+0x23c>
 8004944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af0d 	beq.w	800476e <_printf_float+0xb6>
 8004954:	f04f 0a00 	mov.w	sl, #0
 8004958:	f104 0b1a 	add.w	fp, r4, #26
 800495c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800495e:	425b      	negs	r3, r3
 8004960:	4553      	cmp	r3, sl
 8004962:	dc01      	bgt.n	8004968 <_printf_float+0x2b0>
 8004964:	464b      	mov	r3, r9
 8004966:	e793      	b.n	8004890 <_printf_float+0x1d8>
 8004968:	2301      	movs	r3, #1
 800496a:	465a      	mov	r2, fp
 800496c:	4631      	mov	r1, r6
 800496e:	4628      	mov	r0, r5
 8004970:	47b8      	blx	r7
 8004972:	3001      	adds	r0, #1
 8004974:	f43f aefb 	beq.w	800476e <_printf_float+0xb6>
 8004978:	f10a 0a01 	add.w	sl, sl, #1
 800497c:	e7ee      	b.n	800495c <_printf_float+0x2a4>
 800497e:	bf00      	nop
 8004980:	7fefffff 	.word	0x7fefffff
 8004984:	080092b1 	.word	0x080092b1
 8004988:	080092b5 	.word	0x080092b5
 800498c:	080092b9 	.word	0x080092b9
 8004990:	080092bd 	.word	0x080092bd
 8004994:	080092c1 	.word	0x080092c1
 8004998:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800499a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800499e:	4553      	cmp	r3, sl
 80049a0:	bfa8      	it	ge
 80049a2:	4653      	movge	r3, sl
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	4699      	mov	r9, r3
 80049a8:	dc36      	bgt.n	8004a18 <_printf_float+0x360>
 80049aa:	f04f 0b00 	mov.w	fp, #0
 80049ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b2:	f104 021a 	add.w	r2, r4, #26
 80049b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049b8:	9306      	str	r3, [sp, #24]
 80049ba:	eba3 0309 	sub.w	r3, r3, r9
 80049be:	455b      	cmp	r3, fp
 80049c0:	dc31      	bgt.n	8004a26 <_printf_float+0x36e>
 80049c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049c4:	459a      	cmp	sl, r3
 80049c6:	dc3a      	bgt.n	8004a3e <_printf_float+0x386>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	07da      	lsls	r2, r3, #31
 80049cc:	d437      	bmi.n	8004a3e <_printf_float+0x386>
 80049ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d0:	ebaa 0903 	sub.w	r9, sl, r3
 80049d4:	9b06      	ldr	r3, [sp, #24]
 80049d6:	ebaa 0303 	sub.w	r3, sl, r3
 80049da:	4599      	cmp	r9, r3
 80049dc:	bfa8      	it	ge
 80049de:	4699      	movge	r9, r3
 80049e0:	f1b9 0f00 	cmp.w	r9, #0
 80049e4:	dc33      	bgt.n	8004a4e <_printf_float+0x396>
 80049e6:	f04f 0800 	mov.w	r8, #0
 80049ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ee:	f104 0b1a 	add.w	fp, r4, #26
 80049f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f4:	ebaa 0303 	sub.w	r3, sl, r3
 80049f8:	eba3 0309 	sub.w	r3, r3, r9
 80049fc:	4543      	cmp	r3, r8
 80049fe:	f77f af79 	ble.w	80048f4 <_printf_float+0x23c>
 8004a02:	2301      	movs	r3, #1
 8004a04:	465a      	mov	r2, fp
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f aeae 	beq.w	800476e <_printf_float+0xb6>
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	e7ec      	b.n	80049f2 <_printf_float+0x33a>
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1c2      	bne.n	80049aa <_printf_float+0x2f2>
 8004a24:	e6a3      	b.n	800476e <_printf_float+0xb6>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	9206      	str	r2, [sp, #24]
 8004a2e:	47b8      	blx	r7
 8004a30:	3001      	adds	r0, #1
 8004a32:	f43f ae9c 	beq.w	800476e <_printf_float+0xb6>
 8004a36:	9a06      	ldr	r2, [sp, #24]
 8004a38:	f10b 0b01 	add.w	fp, fp, #1
 8004a3c:	e7bb      	b.n	80049b6 <_printf_float+0x2fe>
 8004a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d1c0      	bne.n	80049ce <_printf_float+0x316>
 8004a4c:	e68f      	b.n	800476e <_printf_float+0xb6>
 8004a4e:	9a06      	ldr	r2, [sp, #24]
 8004a50:	464b      	mov	r3, r9
 8004a52:	4442      	add	r2, r8
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d1c3      	bne.n	80049e6 <_printf_float+0x32e>
 8004a5e:	e686      	b.n	800476e <_printf_float+0xb6>
 8004a60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a64:	f1ba 0f01 	cmp.w	sl, #1
 8004a68:	dc01      	bgt.n	8004a6e <_printf_float+0x3b6>
 8004a6a:	07db      	lsls	r3, r3, #31
 8004a6c:	d536      	bpl.n	8004adc <_printf_float+0x424>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4642      	mov	r2, r8
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f ae78 	beq.w	800476e <_printf_float+0xb6>
 8004a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f ae70 	beq.w	800476e <_printf_float+0xb6>
 8004a8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a9a:	f7fc f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a9e:	b9c0      	cbnz	r0, 8004ad2 <_printf_float+0x41a>
 8004aa0:	4653      	mov	r3, sl
 8004aa2:	f108 0201 	add.w	r2, r8, #1
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	d10c      	bne.n	8004aca <_printf_float+0x412>
 8004ab0:	e65d      	b.n	800476e <_printf_float+0xb6>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	465a      	mov	r2, fp
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	f43f ae56 	beq.w	800476e <_printf_float+0xb6>
 8004ac2:	f108 0801 	add.w	r8, r8, #1
 8004ac6:	45d0      	cmp	r8, sl
 8004ac8:	dbf3      	blt.n	8004ab2 <_printf_float+0x3fa>
 8004aca:	464b      	mov	r3, r9
 8004acc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ad0:	e6df      	b.n	8004892 <_printf_float+0x1da>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	f104 0b1a 	add.w	fp, r4, #26
 8004ada:	e7f4      	b.n	8004ac6 <_printf_float+0x40e>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4642      	mov	r2, r8
 8004ae0:	e7e1      	b.n	8004aa6 <_printf_float+0x3ee>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	464a      	mov	r2, r9
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f ae3e 	beq.w	800476e <_printf_float+0xb6>
 8004af2:	f108 0801 	add.w	r8, r8, #1
 8004af6:	68e3      	ldr	r3, [r4, #12]
 8004af8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004afa:	1a5b      	subs	r3, r3, r1
 8004afc:	4543      	cmp	r3, r8
 8004afe:	dcf0      	bgt.n	8004ae2 <_printf_float+0x42a>
 8004b00:	e6fc      	b.n	80048fc <_printf_float+0x244>
 8004b02:	f04f 0800 	mov.w	r8, #0
 8004b06:	f104 0919 	add.w	r9, r4, #25
 8004b0a:	e7f4      	b.n	8004af6 <_printf_float+0x43e>

08004b0c <_printf_common>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4616      	mov	r6, r2
 8004b12:	4698      	mov	r8, r3
 8004b14:	688a      	ldr	r2, [r1, #8]
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bfb8      	it	lt
 8004b20:	4613      	movlt	r3, r2
 8004b22:	6033      	str	r3, [r6, #0]
 8004b24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b10a      	cbz	r2, 8004b32 <_printf_common+0x26>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	0699      	lsls	r1, r3, #26
 8004b36:	bf42      	ittt	mi
 8004b38:	6833      	ldrmi	r3, [r6, #0]
 8004b3a:	3302      	addmi	r3, #2
 8004b3c:	6033      	strmi	r3, [r6, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	f015 0506 	ands.w	r5, r5, #6
 8004b44:	d106      	bne.n	8004b54 <_printf_common+0x48>
 8004b46:	f104 0a19 	add.w	sl, r4, #25
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	6832      	ldr	r2, [r6, #0]
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dc26      	bgt.n	8004ba2 <_printf_common+0x96>
 8004b54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	3b00      	subs	r3, #0
 8004b5c:	bf18      	it	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	0692      	lsls	r2, r2, #26
 8004b62:	d42b      	bmi.n	8004bbc <_printf_common+0xb0>
 8004b64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b68:	4641      	mov	r1, r8
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c8      	blx	r9
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d01e      	beq.n	8004bb0 <_printf_common+0xa4>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	6922      	ldr	r2, [r4, #16]
 8004b76:	f003 0306 	and.w	r3, r3, #6
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf02      	ittt	eq
 8004b7e:	68e5      	ldreq	r5, [r4, #12]
 8004b80:	6833      	ldreq	r3, [r6, #0]
 8004b82:	1aed      	subeq	r5, r5, r3
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	bf0c      	ite	eq
 8004b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b8c:	2500      	movne	r5, #0
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bfc4      	itt	gt
 8004b92:	1a9b      	subgt	r3, r3, r2
 8004b94:	18ed      	addgt	r5, r5, r3
 8004b96:	2600      	movs	r6, #0
 8004b98:	341a      	adds	r4, #26
 8004b9a:	42b5      	cmp	r5, r6
 8004b9c:	d11a      	bne.n	8004bd4 <_printf_common+0xc8>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e008      	b.n	8004bb4 <_printf_common+0xa8>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	4638      	mov	r0, r7
 8004baa:	47c8      	blx	r9
 8004bac:	3001      	adds	r0, #1
 8004bae:	d103      	bne.n	8004bb8 <_printf_common+0xac>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	3501      	adds	r5, #1
 8004bba:	e7c6      	b.n	8004b4a <_printf_common+0x3e>
 8004bbc:	18e1      	adds	r1, r4, r3
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	2030      	movs	r0, #48	@ 0x30
 8004bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bc6:	4422      	add	r2, r4
 8004bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	e7c7      	b.n	8004b64 <_printf_common+0x58>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4641      	mov	r1, r8
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c8      	blx	r9
 8004bde:	3001      	adds	r0, #1
 8004be0:	d0e6      	beq.n	8004bb0 <_printf_common+0xa4>
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7d9      	b.n	8004b9a <_printf_common+0x8e>
	...

08004be8 <_printf_i>:
 8004be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	7e0f      	ldrb	r7, [r1, #24]
 8004bee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bf0:	2f78      	cmp	r7, #120	@ 0x78
 8004bf2:	4691      	mov	r9, r2
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	469a      	mov	sl, r3
 8004bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bfe:	d807      	bhi.n	8004c10 <_printf_i+0x28>
 8004c00:	2f62      	cmp	r7, #98	@ 0x62
 8004c02:	d80a      	bhi.n	8004c1a <_printf_i+0x32>
 8004c04:	2f00      	cmp	r7, #0
 8004c06:	f000 80d2 	beq.w	8004dae <_printf_i+0x1c6>
 8004c0a:	2f58      	cmp	r7, #88	@ 0x58
 8004c0c:	f000 80b9 	beq.w	8004d82 <_printf_i+0x19a>
 8004c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c18:	e03a      	b.n	8004c90 <_printf_i+0xa8>
 8004c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c1e:	2b15      	cmp	r3, #21
 8004c20:	d8f6      	bhi.n	8004c10 <_printf_i+0x28>
 8004c22:	a101      	add	r1, pc, #4	@ (adr r1, 8004c28 <_printf_i+0x40>)
 8004c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c11 	.word	0x08004c11
 8004c34:	08004c11 	.word	0x08004c11
 8004c38:	08004c11 	.word	0x08004c11
 8004c3c:	08004c11 	.word	0x08004c11
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004c11 	.word	0x08004c11
 8004c48:	08004c11 	.word	0x08004c11
 8004c4c:	08004c11 	.word	0x08004c11
 8004c50:	08004c11 	.word	0x08004c11
 8004c54:	08004d95 	.word	0x08004d95
 8004c58:	08004cbf 	.word	0x08004cbf
 8004c5c:	08004d4f 	.word	0x08004d4f
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004c11 	.word	0x08004c11
 8004c68:	08004db7 	.word	0x08004db7
 8004c6c:	08004c11 	.word	0x08004c11
 8004c70:	08004cbf 	.word	0x08004cbf
 8004c74:	08004c11 	.word	0x08004c11
 8004c78:	08004c11 	.word	0x08004c11
 8004c7c:	08004d57 	.word	0x08004d57
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6032      	str	r2, [r6, #0]
 8004c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c90:	2301      	movs	r3, #1
 8004c92:	e09d      	b.n	8004dd0 <_printf_i+0x1e8>
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	1d19      	adds	r1, r3, #4
 8004c9a:	6031      	str	r1, [r6, #0]
 8004c9c:	0606      	lsls	r6, r0, #24
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0xbc>
 8004ca0:	681d      	ldr	r5, [r3, #0]
 8004ca2:	e003      	b.n	8004cac <_printf_i+0xc4>
 8004ca4:	0645      	lsls	r5, r0, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0xb8>
 8004ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xd0>
 8004cb0:	232d      	movs	r3, #45	@ 0x2d
 8004cb2:	426d      	negs	r5, r5
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb8:	4859      	ldr	r0, [pc, #356]	@ (8004e20 <_printf_i+0x238>)
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e011      	b.n	8004ce2 <_printf_i+0xfa>
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	6833      	ldr	r3, [r6, #0]
 8004cc2:	0608      	lsls	r0, r1, #24
 8004cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cc8:	d402      	bmi.n	8004cd0 <_printf_i+0xe8>
 8004cca:	0649      	lsls	r1, r1, #25
 8004ccc:	bf48      	it	mi
 8004cce:	b2ad      	uxthmi	r5, r5
 8004cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cd2:	4853      	ldr	r0, [pc, #332]	@ (8004e20 <_printf_i+0x238>)
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	bf14      	ite	ne
 8004cd8:	230a      	movne	r3, #10
 8004cda:	2308      	moveq	r3, #8
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ce2:	6866      	ldr	r6, [r4, #4]
 8004ce4:	60a6      	str	r6, [r4, #8]
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	bfa2      	ittt	ge
 8004cea:	6821      	ldrge	r1, [r4, #0]
 8004cec:	f021 0104 	bicge.w	r1, r1, #4
 8004cf0:	6021      	strge	r1, [r4, #0]
 8004cf2:	b90d      	cbnz	r5, 8004cf8 <_printf_i+0x110>
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	d04b      	beq.n	8004d90 <_printf_i+0x1a8>
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8004d02:	5dc7      	ldrb	r7, [r0, r7]
 8004d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d08:	462f      	mov	r7, r5
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	d9f4      	bls.n	8004cfa <_printf_i+0x112>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10b      	bne.n	8004d2c <_printf_i+0x144>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07df      	lsls	r7, r3, #31
 8004d18:	d508      	bpl.n	8004d2c <_printf_i+0x144>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6861      	ldr	r1, [r4, #4]
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	bfde      	ittt	le
 8004d22:	2330      	movle	r3, #48	@ 0x30
 8004d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d2c:	1b92      	subs	r2, r2, r6
 8004d2e:	6122      	str	r2, [r4, #16]
 8004d30:	f8cd a000 	str.w	sl, [sp]
 8004d34:	464b      	mov	r3, r9
 8004d36:	aa03      	add	r2, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fee6 	bl	8004b0c <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d14a      	bne.n	8004dda <_printf_i+0x1f2>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	b004      	add	sp, #16
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	f043 0320 	orr.w	r3, r3, #32
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	4833      	ldr	r0, [pc, #204]	@ (8004e24 <_printf_i+0x23c>)
 8004d58:	2778      	movs	r7, #120	@ 0x78
 8004d5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	6831      	ldr	r1, [r6, #0]
 8004d62:	061f      	lsls	r7, r3, #24
 8004d64:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d68:	d402      	bmi.n	8004d70 <_printf_i+0x188>
 8004d6a:	065f      	lsls	r7, r3, #25
 8004d6c:	bf48      	it	mi
 8004d6e:	b2ad      	uxthmi	r5, r5
 8004d70:	6031      	str	r1, [r6, #0]
 8004d72:	07d9      	lsls	r1, r3, #31
 8004d74:	bf44      	itt	mi
 8004d76:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7a:	6023      	strmi	r3, [r4, #0]
 8004d7c:	b11d      	cbz	r5, 8004d86 <_printf_i+0x19e>
 8004d7e:	2310      	movs	r3, #16
 8004d80:	e7ac      	b.n	8004cdc <_printf_i+0xf4>
 8004d82:	4827      	ldr	r0, [pc, #156]	@ (8004e20 <_printf_i+0x238>)
 8004d84:	e7e9      	b.n	8004d5a <_printf_i+0x172>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	f023 0320 	bic.w	r3, r3, #32
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	e7f6      	b.n	8004d7e <_printf_i+0x196>
 8004d90:	4616      	mov	r6, r2
 8004d92:	e7bd      	b.n	8004d10 <_printf_i+0x128>
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	6961      	ldr	r1, [r4, #20]
 8004d9a:	1d18      	adds	r0, r3, #4
 8004d9c:	6030      	str	r0, [r6, #0]
 8004d9e:	062e      	lsls	r6, r5, #24
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	d501      	bpl.n	8004da8 <_printf_i+0x1c0>
 8004da4:	6019      	str	r1, [r3, #0]
 8004da6:	e002      	b.n	8004dae <_printf_i+0x1c6>
 8004da8:	0668      	lsls	r0, r5, #25
 8004daa:	d5fb      	bpl.n	8004da4 <_printf_i+0x1bc>
 8004dac:	8019      	strh	r1, [r3, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	4616      	mov	r6, r2
 8004db4:	e7bc      	b.n	8004d30 <_printf_i+0x148>
 8004db6:	6833      	ldr	r3, [r6, #0]
 8004db8:	1d1a      	adds	r2, r3, #4
 8004dba:	6032      	str	r2, [r6, #0]
 8004dbc:	681e      	ldr	r6, [r3, #0]
 8004dbe:	6862      	ldr	r2, [r4, #4]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f7fb fa04 	bl	80001d0 <memchr>
 8004dc8:	b108      	cbz	r0, 8004dce <_printf_i+0x1e6>
 8004dca:	1b80      	subs	r0, r0, r6
 8004dcc:	6060      	str	r0, [r4, #4]
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	e7aa      	b.n	8004d30 <_printf_i+0x148>
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	4632      	mov	r2, r6
 8004dde:	4649      	mov	r1, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	47d0      	blx	sl
 8004de4:	3001      	adds	r0, #1
 8004de6:	d0ad      	beq.n	8004d44 <_printf_i+0x15c>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	079b      	lsls	r3, r3, #30
 8004dec:	d413      	bmi.n	8004e16 <_printf_i+0x22e>
 8004dee:	68e0      	ldr	r0, [r4, #12]
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	4298      	cmp	r0, r3
 8004df4:	bfb8      	it	lt
 8004df6:	4618      	movlt	r0, r3
 8004df8:	e7a6      	b.n	8004d48 <_printf_i+0x160>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	4649      	mov	r1, r9
 8004e00:	4640      	mov	r0, r8
 8004e02:	47d0      	blx	sl
 8004e04:	3001      	adds	r0, #1
 8004e06:	d09d      	beq.n	8004d44 <_printf_i+0x15c>
 8004e08:	3501      	adds	r5, #1
 8004e0a:	68e3      	ldr	r3, [r4, #12]
 8004e0c:	9903      	ldr	r1, [sp, #12]
 8004e0e:	1a5b      	subs	r3, r3, r1
 8004e10:	42ab      	cmp	r3, r5
 8004e12:	dcf2      	bgt.n	8004dfa <_printf_i+0x212>
 8004e14:	e7eb      	b.n	8004dee <_printf_i+0x206>
 8004e16:	2500      	movs	r5, #0
 8004e18:	f104 0619 	add.w	r6, r4, #25
 8004e1c:	e7f5      	b.n	8004e0a <_printf_i+0x222>
 8004e1e:	bf00      	nop
 8004e20:	080092c3 	.word	0x080092c3
 8004e24:	080092d4 	.word	0x080092d4

08004e28 <_scanf_float>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	4617      	mov	r7, r2
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	688b      	ldr	r3, [r1, #8]
 8004e34:	1e5a      	subs	r2, r3, #1
 8004e36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004e3a:	bf81      	itttt	hi
 8004e3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004e40:	eb03 0b05 	addhi.w	fp, r3, r5
 8004e44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004e48:	608b      	strhi	r3, [r1, #8]
 8004e4a:	680b      	ldr	r3, [r1, #0]
 8004e4c:	460a      	mov	r2, r1
 8004e4e:	f04f 0500 	mov.w	r5, #0
 8004e52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004e56:	f842 3b1c 	str.w	r3, [r2], #28
 8004e5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e5e:	4680      	mov	r8, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	bf98      	it	ls
 8004e64:	f04f 0b00 	movls.w	fp, #0
 8004e68:	9201      	str	r2, [sp, #4]
 8004e6a:	4616      	mov	r6, r2
 8004e6c:	46aa      	mov	sl, r5
 8004e6e:	46a9      	mov	r9, r5
 8004e70:	9502      	str	r5, [sp, #8]
 8004e72:	68a2      	ldr	r2, [r4, #8]
 8004e74:	b152      	cbz	r2, 8004e8c <_scanf_float+0x64>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e7c:	d864      	bhi.n	8004f48 <_scanf_float+0x120>
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d83c      	bhi.n	8004efc <_scanf_float+0xd4>
 8004e82:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e86:	b2c8      	uxtb	r0, r1
 8004e88:	280e      	cmp	r0, #14
 8004e8a:	d93a      	bls.n	8004f02 <_scanf_float+0xda>
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	d003      	beq.n	8004e9a <_scanf_float+0x72>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e9e:	f1ba 0f01 	cmp.w	sl, #1
 8004ea2:	f200 8117 	bhi.w	80050d4 <_scanf_float+0x2ac>
 8004ea6:	9b01      	ldr	r3, [sp, #4]
 8004ea8:	429e      	cmp	r6, r3
 8004eaa:	f200 8108 	bhi.w	80050be <_scanf_float+0x296>
 8004eae:	2001      	movs	r0, #1
 8004eb0:	b007      	add	sp, #28
 8004eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004eba:	2a0d      	cmp	r2, #13
 8004ebc:	d8e6      	bhi.n	8004e8c <_scanf_float+0x64>
 8004ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8004ec4 <_scanf_float+0x9c>)
 8004ec0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ec4:	0800500b 	.word	0x0800500b
 8004ec8:	08004e8d 	.word	0x08004e8d
 8004ecc:	08004e8d 	.word	0x08004e8d
 8004ed0:	08004e8d 	.word	0x08004e8d
 8004ed4:	0800506b 	.word	0x0800506b
 8004ed8:	08005043 	.word	0x08005043
 8004edc:	08004e8d 	.word	0x08004e8d
 8004ee0:	08004e8d 	.word	0x08004e8d
 8004ee4:	08005019 	.word	0x08005019
 8004ee8:	08004e8d 	.word	0x08004e8d
 8004eec:	08004e8d 	.word	0x08004e8d
 8004ef0:	08004e8d 	.word	0x08004e8d
 8004ef4:	08004e8d 	.word	0x08004e8d
 8004ef8:	08004fd1 	.word	0x08004fd1
 8004efc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004f00:	e7db      	b.n	8004eba <_scanf_float+0x92>
 8004f02:	290e      	cmp	r1, #14
 8004f04:	d8c2      	bhi.n	8004e8c <_scanf_float+0x64>
 8004f06:	a001      	add	r0, pc, #4	@ (adr r0, 8004f0c <_scanf_float+0xe4>)
 8004f08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f0c:	08004fc1 	.word	0x08004fc1
 8004f10:	08004e8d 	.word	0x08004e8d
 8004f14:	08004fc1 	.word	0x08004fc1
 8004f18:	08005057 	.word	0x08005057
 8004f1c:	08004e8d 	.word	0x08004e8d
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004fa7 	.word	0x08004fa7
 8004f28:	08004fa7 	.word	0x08004fa7
 8004f2c:	08004fa7 	.word	0x08004fa7
 8004f30:	08004fa7 	.word	0x08004fa7
 8004f34:	08004fa7 	.word	0x08004fa7
 8004f38:	08004fa7 	.word	0x08004fa7
 8004f3c:	08004fa7 	.word	0x08004fa7
 8004f40:	08004fa7 	.word	0x08004fa7
 8004f44:	08004fa7 	.word	0x08004fa7
 8004f48:	2b6e      	cmp	r3, #110	@ 0x6e
 8004f4a:	d809      	bhi.n	8004f60 <_scanf_float+0x138>
 8004f4c:	2b60      	cmp	r3, #96	@ 0x60
 8004f4e:	d8b2      	bhi.n	8004eb6 <_scanf_float+0x8e>
 8004f50:	2b54      	cmp	r3, #84	@ 0x54
 8004f52:	d07b      	beq.n	800504c <_scanf_float+0x224>
 8004f54:	2b59      	cmp	r3, #89	@ 0x59
 8004f56:	d199      	bne.n	8004e8c <_scanf_float+0x64>
 8004f58:	2d07      	cmp	r5, #7
 8004f5a:	d197      	bne.n	8004e8c <_scanf_float+0x64>
 8004f5c:	2508      	movs	r5, #8
 8004f5e:	e02c      	b.n	8004fba <_scanf_float+0x192>
 8004f60:	2b74      	cmp	r3, #116	@ 0x74
 8004f62:	d073      	beq.n	800504c <_scanf_float+0x224>
 8004f64:	2b79      	cmp	r3, #121	@ 0x79
 8004f66:	e7f6      	b.n	8004f56 <_scanf_float+0x12e>
 8004f68:	6821      	ldr	r1, [r4, #0]
 8004f6a:	05c8      	lsls	r0, r1, #23
 8004f6c:	d51b      	bpl.n	8004fa6 <_scanf_float+0x17e>
 8004f6e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f72:	6021      	str	r1, [r4, #0]
 8004f74:	f109 0901 	add.w	r9, r9, #1
 8004f78:	f1bb 0f00 	cmp.w	fp, #0
 8004f7c:	d003      	beq.n	8004f86 <_scanf_float+0x15e>
 8004f7e:	3201      	adds	r2, #1
 8004f80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f84:	60a2      	str	r2, [r4, #8]
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	f340 8087 	ble.w	80050ac <_scanf_float+0x284>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	e765      	b.n	8004e72 <_scanf_float+0x4a>
 8004fa6:	eb1a 0105 	adds.w	r1, sl, r5
 8004faa:	f47f af6f 	bne.w	8004e8c <_scanf_float+0x64>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004fb4:	6022      	str	r2, [r4, #0]
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	468a      	mov	sl, r1
 8004fba:	f806 3b01 	strb.w	r3, [r6], #1
 8004fbe:	e7e2      	b.n	8004f86 <_scanf_float+0x15e>
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	0610      	lsls	r0, r2, #24
 8004fc4:	f57f af62 	bpl.w	8004e8c <_scanf_float+0x64>
 8004fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	e7f4      	b.n	8004fba <_scanf_float+0x192>
 8004fd0:	f1ba 0f00 	cmp.w	sl, #0
 8004fd4:	d10e      	bne.n	8004ff4 <_scanf_float+0x1cc>
 8004fd6:	f1b9 0f00 	cmp.w	r9, #0
 8004fda:	d10e      	bne.n	8004ffa <_scanf_float+0x1d2>
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fe2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004fe6:	d108      	bne.n	8004ffa <_scanf_float+0x1d2>
 8004fe8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fec:	6022      	str	r2, [r4, #0]
 8004fee:	f04f 0a01 	mov.w	sl, #1
 8004ff2:	e7e2      	b.n	8004fba <_scanf_float+0x192>
 8004ff4:	f1ba 0f02 	cmp.w	sl, #2
 8004ff8:	d055      	beq.n	80050a6 <_scanf_float+0x27e>
 8004ffa:	2d01      	cmp	r5, #1
 8004ffc:	d002      	beq.n	8005004 <_scanf_float+0x1dc>
 8004ffe:	2d04      	cmp	r5, #4
 8005000:	f47f af44 	bne.w	8004e8c <_scanf_float+0x64>
 8005004:	3501      	adds	r5, #1
 8005006:	b2ed      	uxtb	r5, r5
 8005008:	e7d7      	b.n	8004fba <_scanf_float+0x192>
 800500a:	f1ba 0f01 	cmp.w	sl, #1
 800500e:	f47f af3d 	bne.w	8004e8c <_scanf_float+0x64>
 8005012:	f04f 0a02 	mov.w	sl, #2
 8005016:	e7d0      	b.n	8004fba <_scanf_float+0x192>
 8005018:	b97d      	cbnz	r5, 800503a <_scanf_float+0x212>
 800501a:	f1b9 0f00 	cmp.w	r9, #0
 800501e:	f47f af38 	bne.w	8004e92 <_scanf_float+0x6a>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005028:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800502c:	f040 8108 	bne.w	8005240 <_scanf_float+0x418>
 8005030:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	2501      	movs	r5, #1
 8005038:	e7bf      	b.n	8004fba <_scanf_float+0x192>
 800503a:	2d03      	cmp	r5, #3
 800503c:	d0e2      	beq.n	8005004 <_scanf_float+0x1dc>
 800503e:	2d05      	cmp	r5, #5
 8005040:	e7de      	b.n	8005000 <_scanf_float+0x1d8>
 8005042:	2d02      	cmp	r5, #2
 8005044:	f47f af22 	bne.w	8004e8c <_scanf_float+0x64>
 8005048:	2503      	movs	r5, #3
 800504a:	e7b6      	b.n	8004fba <_scanf_float+0x192>
 800504c:	2d06      	cmp	r5, #6
 800504e:	f47f af1d 	bne.w	8004e8c <_scanf_float+0x64>
 8005052:	2507      	movs	r5, #7
 8005054:	e7b1      	b.n	8004fba <_scanf_float+0x192>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	0591      	lsls	r1, r2, #22
 800505a:	f57f af17 	bpl.w	8004e8c <_scanf_float+0x64>
 800505e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	f8cd 9008 	str.w	r9, [sp, #8]
 8005068:	e7a7      	b.n	8004fba <_scanf_float+0x192>
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005070:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005074:	d006      	beq.n	8005084 <_scanf_float+0x25c>
 8005076:	0550      	lsls	r0, r2, #21
 8005078:	f57f af08 	bpl.w	8004e8c <_scanf_float+0x64>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	f000 80de 	beq.w	8005240 <_scanf_float+0x418>
 8005084:	0591      	lsls	r1, r2, #22
 8005086:	bf58      	it	pl
 8005088:	9902      	ldrpl	r1, [sp, #8]
 800508a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800508e:	bf58      	it	pl
 8005090:	eba9 0101 	subpl.w	r1, r9, r1
 8005094:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005098:	bf58      	it	pl
 800509a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	e789      	b.n	8004fba <_scanf_float+0x192>
 80050a6:	f04f 0a03 	mov.w	sl, #3
 80050aa:	e786      	b.n	8004fba <_scanf_float+0x192>
 80050ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80050b0:	4639      	mov	r1, r7
 80050b2:	4640      	mov	r0, r8
 80050b4:	4798      	blx	r3
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f43f aedb 	beq.w	8004e72 <_scanf_float+0x4a>
 80050bc:	e6e6      	b.n	8004e8c <_scanf_float+0x64>
 80050be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050c6:	463a      	mov	r2, r7
 80050c8:	4640      	mov	r0, r8
 80050ca:	4798      	blx	r3
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	e6e8      	b.n	8004ea6 <_scanf_float+0x7e>
 80050d4:	1e6b      	subs	r3, r5, #1
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d824      	bhi.n	8005124 <_scanf_float+0x2fc>
 80050da:	2d02      	cmp	r5, #2
 80050dc:	d836      	bhi.n	800514c <_scanf_float+0x324>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	429e      	cmp	r6, r3
 80050e2:	f67f aee4 	bls.w	8004eae <_scanf_float+0x86>
 80050e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050ee:	463a      	mov	r2, r7
 80050f0:	4640      	mov	r0, r8
 80050f2:	4798      	blx	r3
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	e7f0      	b.n	80050de <_scanf_float+0x2b6>
 80050fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005100:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005104:	463a      	mov	r2, r7
 8005106:	4640      	mov	r0, r8
 8005108:	4798      	blx	r3
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	3b01      	subs	r3, #1
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005114:	fa5f fa8a 	uxtb.w	sl, sl
 8005118:	f1ba 0f02 	cmp.w	sl, #2
 800511c:	d1ee      	bne.n	80050fc <_scanf_float+0x2d4>
 800511e:	3d03      	subs	r5, #3
 8005120:	b2ed      	uxtb	r5, r5
 8005122:	1b76      	subs	r6, r6, r5
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	05da      	lsls	r2, r3, #23
 8005128:	d530      	bpl.n	800518c <_scanf_float+0x364>
 800512a:	055b      	lsls	r3, r3, #21
 800512c:	d511      	bpl.n	8005152 <_scanf_float+0x32a>
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	429e      	cmp	r6, r3
 8005132:	f67f aebc 	bls.w	8004eae <_scanf_float+0x86>
 8005136:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800513a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800513e:	463a      	mov	r2, r7
 8005140:	4640      	mov	r0, r8
 8005142:	4798      	blx	r3
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	3b01      	subs	r3, #1
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	e7f0      	b.n	800512e <_scanf_float+0x306>
 800514c:	46aa      	mov	sl, r5
 800514e:	46b3      	mov	fp, r6
 8005150:	e7de      	b.n	8005110 <_scanf_float+0x2e8>
 8005152:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	2965      	cmp	r1, #101	@ 0x65
 800515a:	f103 33ff 	add.w	r3, r3, #4294967295
 800515e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005162:	6123      	str	r3, [r4, #16]
 8005164:	d00c      	beq.n	8005180 <_scanf_float+0x358>
 8005166:	2945      	cmp	r1, #69	@ 0x45
 8005168:	d00a      	beq.n	8005180 <_scanf_float+0x358>
 800516a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800516e:	463a      	mov	r2, r7
 8005170:	4640      	mov	r0, r8
 8005172:	4798      	blx	r3
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800517a:	3b01      	subs	r3, #1
 800517c:	1eb5      	subs	r5, r6, #2
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005184:	463a      	mov	r2, r7
 8005186:	4640      	mov	r0, r8
 8005188:	4798      	blx	r3
 800518a:	462e      	mov	r6, r5
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	f012 0210 	ands.w	r2, r2, #16
 8005192:	d001      	beq.n	8005198 <_scanf_float+0x370>
 8005194:	2000      	movs	r0, #0
 8005196:	e68b      	b.n	8004eb0 <_scanf_float+0x88>
 8005198:	7032      	strb	r2, [r6, #0]
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a4:	d11c      	bne.n	80051e0 <_scanf_float+0x3b8>
 80051a6:	9b02      	ldr	r3, [sp, #8]
 80051a8:	454b      	cmp	r3, r9
 80051aa:	eba3 0209 	sub.w	r2, r3, r9
 80051ae:	d123      	bne.n	80051f8 <_scanf_float+0x3d0>
 80051b0:	9901      	ldr	r1, [sp, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	4640      	mov	r0, r8
 80051b6:	f002 fc83 	bl	8007ac0 <_strtod_r>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f011 0f02 	tst.w	r1, #2
 80051c4:	ec57 6b10 	vmov	r6, r7, d0
 80051c8:	f103 0204 	add.w	r2, r3, #4
 80051cc:	d01f      	beq.n	800520e <_scanf_float+0x3e6>
 80051ce:	9903      	ldr	r1, [sp, #12]
 80051d0:	600a      	str	r2, [r1, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	e9c3 6700 	strd	r6, r7, [r3]
 80051d8:	68e3      	ldr	r3, [r4, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60e3      	str	r3, [r4, #12]
 80051de:	e7d9      	b.n	8005194 <_scanf_float+0x36c>
 80051e0:	9b04      	ldr	r3, [sp, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0e4      	beq.n	80051b0 <_scanf_float+0x388>
 80051e6:	9905      	ldr	r1, [sp, #20]
 80051e8:	230a      	movs	r3, #10
 80051ea:	3101      	adds	r1, #1
 80051ec:	4640      	mov	r0, r8
 80051ee:	f7ff f9b7 	bl	8004560 <_strtol_r>
 80051f2:	9b04      	ldr	r3, [sp, #16]
 80051f4:	9e05      	ldr	r6, [sp, #20]
 80051f6:	1ac2      	subs	r2, r0, r3
 80051f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80051fc:	429e      	cmp	r6, r3
 80051fe:	bf28      	it	cs
 8005200:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005204:	4910      	ldr	r1, [pc, #64]	@ (8005248 <_scanf_float+0x420>)
 8005206:	4630      	mov	r0, r6
 8005208:	f000 f8f6 	bl	80053f8 <siprintf>
 800520c:	e7d0      	b.n	80051b0 <_scanf_float+0x388>
 800520e:	f011 0f04 	tst.w	r1, #4
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	600a      	str	r2, [r1, #0]
 8005216:	d1dc      	bne.n	80051d2 <_scanf_float+0x3aa>
 8005218:	681d      	ldr	r5, [r3, #0]
 800521a:	4632      	mov	r2, r6
 800521c:	463b      	mov	r3, r7
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb fc83 	bl	8000b2c <__aeabi_dcmpun>
 8005226:	b128      	cbz	r0, 8005234 <_scanf_float+0x40c>
 8005228:	4808      	ldr	r0, [pc, #32]	@ (800524c <_scanf_float+0x424>)
 800522a:	f000 fa25 	bl	8005678 <nanf>
 800522e:	ed85 0a00 	vstr	s0, [r5]
 8005232:	e7d1      	b.n	80051d8 <_scanf_float+0x3b0>
 8005234:	4630      	mov	r0, r6
 8005236:	4639      	mov	r1, r7
 8005238:	f7fb fcd6 	bl	8000be8 <__aeabi_d2f>
 800523c:	6028      	str	r0, [r5, #0]
 800523e:	e7cb      	b.n	80051d8 <_scanf_float+0x3b0>
 8005240:	f04f 0900 	mov.w	r9, #0
 8005244:	e629      	b.n	8004e9a <_scanf_float+0x72>
 8005246:	bf00      	nop
 8005248:	080092e5 	.word	0x080092e5
 800524c:	08009396 	.word	0x08009396

08005250 <std>:
 8005250:	2300      	movs	r3, #0
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	e9c0 3300 	strd	r3, r3, [r0]
 800525a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525e:	6083      	str	r3, [r0, #8]
 8005260:	8181      	strh	r1, [r0, #12]
 8005262:	6643      	str	r3, [r0, #100]	@ 0x64
 8005264:	81c2      	strh	r2, [r0, #14]
 8005266:	6183      	str	r3, [r0, #24]
 8005268:	4619      	mov	r1, r3
 800526a:	2208      	movs	r2, #8
 800526c:	305c      	adds	r0, #92	@ 0x5c
 800526e:	f000 f926 	bl	80054be <memset>
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <std+0x58>)
 8005274:	6263      	str	r3, [r4, #36]	@ 0x24
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <std+0x5c>)
 8005278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <std+0x60>)
 800527c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <std+0x64>)
 8005280:	6323      	str	r3, [r4, #48]	@ 0x30
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <std+0x68>)
 8005284:	6224      	str	r4, [r4, #32]
 8005286:	429c      	cmp	r4, r3
 8005288:	d006      	beq.n	8005298 <std+0x48>
 800528a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800528e:	4294      	cmp	r4, r2
 8005290:	d002      	beq.n	8005298 <std+0x48>
 8005292:	33d0      	adds	r3, #208	@ 0xd0
 8005294:	429c      	cmp	r4, r3
 8005296:	d105      	bne.n	80052a4 <std+0x54>
 8005298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f000 b9e6 	b.w	8005670 <__retarget_lock_init_recursive>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	08005439 	.word	0x08005439
 80052ac:	0800545b 	.word	0x0800545b
 80052b0:	08005493 	.word	0x08005493
 80052b4:	080054b7 	.word	0x080054b7
 80052b8:	20000558 	.word	0x20000558

080052bc <stdio_exit_handler>:
 80052bc:	4a02      	ldr	r2, [pc, #8]	@ (80052c8 <stdio_exit_handler+0xc>)
 80052be:	4903      	ldr	r1, [pc, #12]	@ (80052cc <stdio_exit_handler+0x10>)
 80052c0:	4803      	ldr	r0, [pc, #12]	@ (80052d0 <stdio_exit_handler+0x14>)
 80052c2:	f000 b869 	b.w	8005398 <_fwalk_sglue>
 80052c6:	bf00      	nop
 80052c8:	2000000c 	.word	0x2000000c
 80052cc:	08008109 	.word	0x08008109
 80052d0:	2000001c 	.word	0x2000001c

080052d4 <cleanup_stdio>:
 80052d4:	6841      	ldr	r1, [r0, #4]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <cleanup_stdio+0x34>)
 80052d8:	4299      	cmp	r1, r3
 80052da:	b510      	push	{r4, lr}
 80052dc:	4604      	mov	r4, r0
 80052de:	d001      	beq.n	80052e4 <cleanup_stdio+0x10>
 80052e0:	f002 ff12 	bl	8008108 <_fflush_r>
 80052e4:	68a1      	ldr	r1, [r4, #8]
 80052e6:	4b09      	ldr	r3, [pc, #36]	@ (800530c <cleanup_stdio+0x38>)
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <cleanup_stdio+0x1e>
 80052ec:	4620      	mov	r0, r4
 80052ee:	f002 ff0b 	bl	8008108 <_fflush_r>
 80052f2:	68e1      	ldr	r1, [r4, #12]
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <cleanup_stdio+0x3c>)
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d004      	beq.n	8005304 <cleanup_stdio+0x30>
 80052fa:	4620      	mov	r0, r4
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f002 bf02 	b.w	8008108 <_fflush_r>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop
 8005308:	20000558 	.word	0x20000558
 800530c:	200005c0 	.word	0x200005c0
 8005310:	20000628 	.word	0x20000628

08005314 <global_stdio_init.part.0>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <global_stdio_init.part.0+0x30>)
 8005318:	4c0b      	ldr	r4, [pc, #44]	@ (8005348 <global_stdio_init.part.0+0x34>)
 800531a:	4a0c      	ldr	r2, [pc, #48]	@ (800534c <global_stdio_init.part.0+0x38>)
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4620      	mov	r0, r4
 8005320:	2200      	movs	r2, #0
 8005322:	2104      	movs	r1, #4
 8005324:	f7ff ff94 	bl	8005250 <std>
 8005328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800532c:	2201      	movs	r2, #1
 800532e:	2109      	movs	r1, #9
 8005330:	f7ff ff8e 	bl	8005250 <std>
 8005334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005338:	2202      	movs	r2, #2
 800533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533e:	2112      	movs	r1, #18
 8005340:	f7ff bf86 	b.w	8005250 <std>
 8005344:	20000690 	.word	0x20000690
 8005348:	20000558 	.word	0x20000558
 800534c:	080052bd 	.word	0x080052bd

08005350 <__sfp_lock_acquire>:
 8005350:	4801      	ldr	r0, [pc, #4]	@ (8005358 <__sfp_lock_acquire+0x8>)
 8005352:	f000 b98e 	b.w	8005672 <__retarget_lock_acquire_recursive>
 8005356:	bf00      	nop
 8005358:	20000699 	.word	0x20000699

0800535c <__sfp_lock_release>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__sfp_lock_release+0x8>)
 800535e:	f000 b989 	b.w	8005674 <__retarget_lock_release_recursive>
 8005362:	bf00      	nop
 8005364:	20000699 	.word	0x20000699

08005368 <__sinit>:
 8005368:	b510      	push	{r4, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	f7ff fff0 	bl	8005350 <__sfp_lock_acquire>
 8005370:	6a23      	ldr	r3, [r4, #32]
 8005372:	b11b      	cbz	r3, 800537c <__sinit+0x14>
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005378:	f7ff bff0 	b.w	800535c <__sfp_lock_release>
 800537c:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <__sinit+0x28>)
 800537e:	6223      	str	r3, [r4, #32]
 8005380:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <__sinit+0x2c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f5      	bne.n	8005374 <__sinit+0xc>
 8005388:	f7ff ffc4 	bl	8005314 <global_stdio_init.part.0>
 800538c:	e7f2      	b.n	8005374 <__sinit+0xc>
 800538e:	bf00      	nop
 8005390:	080052d5 	.word	0x080052d5
 8005394:	20000690 	.word	0x20000690

08005398 <_fwalk_sglue>:
 8005398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539c:	4607      	mov	r7, r0
 800539e:	4688      	mov	r8, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	2600      	movs	r6, #0
 80053a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a8:	f1b9 0901 	subs.w	r9, r9, #1
 80053ac:	d505      	bpl.n	80053ba <_fwalk_sglue+0x22>
 80053ae:	6824      	ldr	r4, [r4, #0]
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d1f7      	bne.n	80053a4 <_fwalk_sglue+0xc>
 80053b4:	4630      	mov	r0, r6
 80053b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d907      	bls.n	80053d0 <_fwalk_sglue+0x38>
 80053c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c4:	3301      	adds	r3, #1
 80053c6:	d003      	beq.n	80053d0 <_fwalk_sglue+0x38>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	4306      	orrs	r6, r0
 80053d0:	3568      	adds	r5, #104	@ 0x68
 80053d2:	e7e9      	b.n	80053a8 <_fwalk_sglue+0x10>

080053d4 <iprintf>:
 80053d4:	b40f      	push	{r0, r1, r2, r3}
 80053d6:	b507      	push	{r0, r1, r2, lr}
 80053d8:	4906      	ldr	r1, [pc, #24]	@ (80053f4 <iprintf+0x20>)
 80053da:	ab04      	add	r3, sp, #16
 80053dc:	6808      	ldr	r0, [r1, #0]
 80053de:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e2:	6881      	ldr	r1, [r0, #8]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f002 fcf3 	bl	8007dd0 <_vfiprintf_r>
 80053ea:	b003      	add	sp, #12
 80053ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f0:	b004      	add	sp, #16
 80053f2:	4770      	bx	lr
 80053f4:	20000018 	.word	0x20000018

080053f8 <siprintf>:
 80053f8:	b40e      	push	{r1, r2, r3}
 80053fa:	b500      	push	{lr}
 80053fc:	b09c      	sub	sp, #112	@ 0x70
 80053fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8005400:	9002      	str	r0, [sp, #8]
 8005402:	9006      	str	r0, [sp, #24]
 8005404:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005408:	4809      	ldr	r0, [pc, #36]	@ (8005430 <siprintf+0x38>)
 800540a:	9107      	str	r1, [sp, #28]
 800540c:	9104      	str	r1, [sp, #16]
 800540e:	4909      	ldr	r1, [pc, #36]	@ (8005434 <siprintf+0x3c>)
 8005410:	f853 2b04 	ldr.w	r2, [r3], #4
 8005414:	9105      	str	r1, [sp, #20]
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	a902      	add	r1, sp, #8
 800541c:	f002 fbb2 	bl	8007b84 <_svfiprintf_r>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	b01c      	add	sp, #112	@ 0x70
 8005428:	f85d eb04 	ldr.w	lr, [sp], #4
 800542c:	b003      	add	sp, #12
 800542e:	4770      	bx	lr
 8005430:	20000018 	.word	0x20000018
 8005434:	ffff0208 	.word	0xffff0208

08005438 <__sread>:
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	f000 f8c8 	bl	80055d4 <_read_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	bfab      	itete	ge
 8005448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800544a:	89a3      	ldrhlt	r3, [r4, #12]
 800544c:	181b      	addge	r3, r3, r0
 800544e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005452:	bfac      	ite	ge
 8005454:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005456:	81a3      	strhlt	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__swrite>:
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	461f      	mov	r7, r3
 8005460:	898b      	ldrh	r3, [r1, #12]
 8005462:	05db      	lsls	r3, r3, #23
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	4616      	mov	r6, r2
 800546a:	d505      	bpl.n	8005478 <__swrite+0x1e>
 800546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005470:	2302      	movs	r3, #2
 8005472:	2200      	movs	r2, #0
 8005474:	f000 f89c 	bl	80055b0 <_lseek_r>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	4632      	mov	r2, r6
 8005486:	463b      	mov	r3, r7
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	f000 b8b3 	b.w	80055f8 <_write_r>

08005492 <__sseek>:
 8005492:	b510      	push	{r4, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549a:	f000 f889 	bl	80055b0 <_lseek_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	bf15      	itete	ne
 80054a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ae:	81a3      	strheq	r3, [r4, #12]
 80054b0:	bf18      	it	ne
 80054b2:	81a3      	strhne	r3, [r4, #12]
 80054b4:	bd10      	pop	{r4, pc}

080054b6 <__sclose>:
 80054b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ba:	f000 b869 	b.w	8005590 <_close_r>

080054be <memset>:
 80054be:	4402      	add	r2, r0
 80054c0:	4603      	mov	r3, r0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d100      	bne.n	80054c8 <memset+0xa>
 80054c6:	4770      	bx	lr
 80054c8:	f803 1b01 	strb.w	r1, [r3], #1
 80054cc:	e7f9      	b.n	80054c2 <memset+0x4>
	...

080054d0 <strtok>:
 80054d0:	4b16      	ldr	r3, [pc, #88]	@ (800552c <strtok+0x5c>)
 80054d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	681f      	ldr	r7, [r3, #0]
 80054d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80054da:	4605      	mov	r5, r0
 80054dc:	460e      	mov	r6, r1
 80054de:	b9ec      	cbnz	r4, 800551c <strtok+0x4c>
 80054e0:	2050      	movs	r0, #80	@ 0x50
 80054e2:	f000 ff83 	bl	80063ec <malloc>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80054ea:	b920      	cbnz	r0, 80054f6 <strtok+0x26>
 80054ec:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <strtok+0x60>)
 80054ee:	4811      	ldr	r0, [pc, #68]	@ (8005534 <strtok+0x64>)
 80054f0:	215b      	movs	r1, #91	@ 0x5b
 80054f2:	f000 f8c7 	bl	8005684 <__assert_func>
 80054f6:	e9c0 4400 	strd	r4, r4, [r0]
 80054fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80054fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005502:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005506:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800550a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800550e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005512:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005516:	6184      	str	r4, [r0, #24]
 8005518:	7704      	strb	r4, [r0, #28]
 800551a:	6244      	str	r4, [r0, #36]	@ 0x24
 800551c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	2301      	movs	r3, #1
 8005524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005528:	f000 b806 	b.w	8005538 <__strtok_r>
 800552c:	20000018 	.word	0x20000018
 8005530:	080092ea 	.word	0x080092ea
 8005534:	08009301 	.word	0x08009301

08005538 <__strtok_r>:
 8005538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	b908      	cbnz	r0, 8005542 <__strtok_r+0xa>
 800553e:	6814      	ldr	r4, [r2, #0]
 8005540:	b144      	cbz	r4, 8005554 <__strtok_r+0x1c>
 8005542:	4620      	mov	r0, r4
 8005544:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005548:	460f      	mov	r7, r1
 800554a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800554e:	b91e      	cbnz	r6, 8005558 <__strtok_r+0x20>
 8005550:	b965      	cbnz	r5, 800556c <__strtok_r+0x34>
 8005552:	6015      	str	r5, [r2, #0]
 8005554:	2000      	movs	r0, #0
 8005556:	e005      	b.n	8005564 <__strtok_r+0x2c>
 8005558:	42b5      	cmp	r5, r6
 800555a:	d1f6      	bne.n	800554a <__strtok_r+0x12>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <__strtok_r+0xa>
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	7003      	strb	r3, [r0, #0]
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	461c      	mov	r4, r3
 8005568:	e00c      	b.n	8005584 <__strtok_r+0x4c>
 800556a:	b915      	cbnz	r5, 8005572 <__strtok_r+0x3a>
 800556c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005570:	460e      	mov	r6, r1
 8005572:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005576:	42ab      	cmp	r3, r5
 8005578:	d1f7      	bne.n	800556a <__strtok_r+0x32>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f3      	beq.n	8005566 <__strtok_r+0x2e>
 800557e:	2300      	movs	r3, #0
 8005580:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	e7ed      	b.n	8005564 <__strtok_r+0x2c>

08005588 <_localeconv_r>:
 8005588:	4800      	ldr	r0, [pc, #0]	@ (800558c <_localeconv_r+0x4>)
 800558a:	4770      	bx	lr
 800558c:	20000158 	.word	0x20000158

08005590 <_close_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d06      	ldr	r5, [pc, #24]	@ (80055ac <_close_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fc fb1c 	bl	8001bd8 <_close>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_close_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_close_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20000694 	.word	0x20000694

080055b0 <_lseek_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d07      	ldr	r5, [pc, #28]	@ (80055d0 <_lseek_r+0x20>)
 80055b4:	4604      	mov	r4, r0
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fc fb31 	bl	8001c26 <_lseek>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_lseek_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_lseek_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000694 	.word	0x20000694

080055d4 <_read_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d07      	ldr	r5, [pc, #28]	@ (80055f4 <_read_r+0x20>)
 80055d8:	4604      	mov	r4, r0
 80055da:	4608      	mov	r0, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	2200      	movs	r2, #0
 80055e0:	602a      	str	r2, [r5, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7fc fabf 	bl	8001b66 <_read>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_read_r+0x1e>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_read_r+0x1e>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000694 	.word	0x20000694

080055f8 <_write_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	@ (8005618 <_write_r+0x20>)
 80055fc:	4604      	mov	r4, r0
 80055fe:	4608      	mov	r0, r1
 8005600:	4611      	mov	r1, r2
 8005602:	2200      	movs	r2, #0
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fc faca 	bl	8001ba0 <_write>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_write_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_write_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000694 	.word	0x20000694

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	@ (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000018 	.word	0x20000018

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d0d      	ldr	r5, [pc, #52]	@ (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	@ (8005664 <__libc_init_array+0x3c>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2600      	movs	r6, #0
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4d0b      	ldr	r5, [pc, #44]	@ (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	@ (800566c <__libc_init_array+0x44>)
 800563c:	f003 fd60 	bl	8009100 <_init>
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2600      	movs	r6, #0
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f855 3b04 	ldr.w	r3, [r5], #4
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	080096b8 	.word	0x080096b8
 8005664:	080096b8 	.word	0x080096b8
 8005668:	080096b8 	.word	0x080096b8
 800566c:	080096bc 	.word	0x080096bc

08005670 <__retarget_lock_init_recursive>:
 8005670:	4770      	bx	lr

08005672 <__retarget_lock_acquire_recursive>:
 8005672:	4770      	bx	lr

08005674 <__retarget_lock_release_recursive>:
 8005674:	4770      	bx	lr
	...

08005678 <nanf>:
 8005678:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005680 <nanf+0x8>
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	7fc00000 	.word	0x7fc00000

08005684 <__assert_func>:
 8005684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005686:	4614      	mov	r4, r2
 8005688:	461a      	mov	r2, r3
 800568a:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <__assert_func+0x2c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4605      	mov	r5, r0
 8005690:	68d8      	ldr	r0, [r3, #12]
 8005692:	b954      	cbnz	r4, 80056aa <__assert_func+0x26>
 8005694:	4b07      	ldr	r3, [pc, #28]	@ (80056b4 <__assert_func+0x30>)
 8005696:	461c      	mov	r4, r3
 8005698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800569c:	9100      	str	r1, [sp, #0]
 800569e:	462b      	mov	r3, r5
 80056a0:	4905      	ldr	r1, [pc, #20]	@ (80056b8 <__assert_func+0x34>)
 80056a2:	f002 fd59 	bl	8008158 <fiprintf>
 80056a6:	f002 fe4f 	bl	8008348 <abort>
 80056aa:	4b04      	ldr	r3, [pc, #16]	@ (80056bc <__assert_func+0x38>)
 80056ac:	e7f4      	b.n	8005698 <__assert_func+0x14>
 80056ae:	bf00      	nop
 80056b0:	20000018 	.word	0x20000018
 80056b4:	08009396 	.word	0x08009396
 80056b8:	08009368 	.word	0x08009368
 80056bc:	0800935b 	.word	0x0800935b

080056c0 <quorem>:
 80056c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	6903      	ldr	r3, [r0, #16]
 80056c6:	690c      	ldr	r4, [r1, #16]
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	4607      	mov	r7, r0
 80056cc:	db7e      	blt.n	80057cc <quorem+0x10c>
 80056ce:	3c01      	subs	r4, #1
 80056d0:	f101 0814 	add.w	r8, r1, #20
 80056d4:	00a3      	lsls	r3, r4, #2
 80056d6:	f100 0514 	add.w	r5, r0, #20
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056ea:	3301      	adds	r3, #1
 80056ec:	429a      	cmp	r2, r3
 80056ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80056f6:	d32e      	bcc.n	8005756 <quorem+0x96>
 80056f8:	f04f 0a00 	mov.w	sl, #0
 80056fc:	46c4      	mov	ip, r8
 80056fe:	46ae      	mov	lr, r5
 8005700:	46d3      	mov	fp, sl
 8005702:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005706:	b298      	uxth	r0, r3
 8005708:	fb06 a000 	mla	r0, r6, r0, sl
 800570c:	0c02      	lsrs	r2, r0, #16
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	fb06 2303 	mla	r3, r6, r3, r2
 8005714:	f8de 2000 	ldr.w	r2, [lr]
 8005718:	b280      	uxth	r0, r0
 800571a:	b292      	uxth	r2, r2
 800571c:	1a12      	subs	r2, r2, r0
 800571e:	445a      	add	r2, fp
 8005720:	f8de 0000 	ldr.w	r0, [lr]
 8005724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005728:	b29b      	uxth	r3, r3
 800572a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800572e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005732:	b292      	uxth	r2, r2
 8005734:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005738:	45e1      	cmp	r9, ip
 800573a:	f84e 2b04 	str.w	r2, [lr], #4
 800573e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005742:	d2de      	bcs.n	8005702 <quorem+0x42>
 8005744:	9b00      	ldr	r3, [sp, #0]
 8005746:	58eb      	ldr	r3, [r5, r3]
 8005748:	b92b      	cbnz	r3, 8005756 <quorem+0x96>
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	3b04      	subs	r3, #4
 800574e:	429d      	cmp	r5, r3
 8005750:	461a      	mov	r2, r3
 8005752:	d32f      	bcc.n	80057b4 <quorem+0xf4>
 8005754:	613c      	str	r4, [r7, #16]
 8005756:	4638      	mov	r0, r7
 8005758:	f001 f9c2 	bl	8006ae0 <__mcmp>
 800575c:	2800      	cmp	r0, #0
 800575e:	db25      	blt.n	80057ac <quorem+0xec>
 8005760:	4629      	mov	r1, r5
 8005762:	2000      	movs	r0, #0
 8005764:	f858 2b04 	ldr.w	r2, [r8], #4
 8005768:	f8d1 c000 	ldr.w	ip, [r1]
 800576c:	fa1f fe82 	uxth.w	lr, r2
 8005770:	fa1f f38c 	uxth.w	r3, ip
 8005774:	eba3 030e 	sub.w	r3, r3, lr
 8005778:	4403      	add	r3, r0
 800577a:	0c12      	lsrs	r2, r2, #16
 800577c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005780:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800578a:	45c1      	cmp	r9, r8
 800578c:	f841 3b04 	str.w	r3, [r1], #4
 8005790:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005794:	d2e6      	bcs.n	8005764 <quorem+0xa4>
 8005796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800579a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800579e:	b922      	cbnz	r2, 80057aa <quorem+0xea>
 80057a0:	3b04      	subs	r3, #4
 80057a2:	429d      	cmp	r5, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	d30b      	bcc.n	80057c0 <quorem+0x100>
 80057a8:	613c      	str	r4, [r7, #16]
 80057aa:	3601      	adds	r6, #1
 80057ac:	4630      	mov	r0, r6
 80057ae:	b003      	add	sp, #12
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	3b04      	subs	r3, #4
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d1cb      	bne.n	8005754 <quorem+0x94>
 80057bc:	3c01      	subs	r4, #1
 80057be:	e7c6      	b.n	800574e <quorem+0x8e>
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	3b04      	subs	r3, #4
 80057c4:	2a00      	cmp	r2, #0
 80057c6:	d1ef      	bne.n	80057a8 <quorem+0xe8>
 80057c8:	3c01      	subs	r4, #1
 80057ca:	e7ea      	b.n	80057a2 <quorem+0xe2>
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7ee      	b.n	80057ae <quorem+0xee>

080057d0 <_dtoa_r>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	69c7      	ldr	r7, [r0, #28]
 80057d6:	b099      	sub	sp, #100	@ 0x64
 80057d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057dc:	ec55 4b10 	vmov	r4, r5, d0
 80057e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80057e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80057e4:	4683      	mov	fp, r0
 80057e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80057e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057ea:	b97f      	cbnz	r7, 800580c <_dtoa_r+0x3c>
 80057ec:	2010      	movs	r0, #16
 80057ee:	f000 fdfd 	bl	80063ec <malloc>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80057f8:	b920      	cbnz	r0, 8005804 <_dtoa_r+0x34>
 80057fa:	4ba7      	ldr	r3, [pc, #668]	@ (8005a98 <_dtoa_r+0x2c8>)
 80057fc:	21ef      	movs	r1, #239	@ 0xef
 80057fe:	48a7      	ldr	r0, [pc, #668]	@ (8005a9c <_dtoa_r+0x2cc>)
 8005800:	f7ff ff40 	bl	8005684 <__assert_func>
 8005804:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005808:	6007      	str	r7, [r0, #0]
 800580a:	60c7      	str	r7, [r0, #12]
 800580c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	b159      	cbz	r1, 800582c <_dtoa_r+0x5c>
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	604a      	str	r2, [r1, #4]
 8005818:	2301      	movs	r3, #1
 800581a:	4093      	lsls	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
 800581e:	4658      	mov	r0, fp
 8005820:	f000 feda 	bl	80065d8 <_Bfree>
 8005824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	1e2b      	subs	r3, r5, #0
 800582e:	bfb9      	ittee	lt
 8005830:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005834:	9303      	strlt	r3, [sp, #12]
 8005836:	2300      	movge	r3, #0
 8005838:	6033      	strge	r3, [r6, #0]
 800583a:	9f03      	ldr	r7, [sp, #12]
 800583c:	4b98      	ldr	r3, [pc, #608]	@ (8005aa0 <_dtoa_r+0x2d0>)
 800583e:	bfbc      	itt	lt
 8005840:	2201      	movlt	r2, #1
 8005842:	6032      	strlt	r2, [r6, #0]
 8005844:	43bb      	bics	r3, r7
 8005846:	d112      	bne.n	800586e <_dtoa_r+0x9e>
 8005848:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800584a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005854:	4323      	orrs	r3, r4
 8005856:	f000 854d 	beq.w	80062f4 <_dtoa_r+0xb24>
 800585a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800585c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ab4 <_dtoa_r+0x2e4>
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 854f 	beq.w	8006304 <_dtoa_r+0xb34>
 8005866:	f10a 0303 	add.w	r3, sl, #3
 800586a:	f000 bd49 	b.w	8006300 <_dtoa_r+0xb30>
 800586e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	ec51 0b17 	vmov	r0, r1, d7
 8005878:	2300      	movs	r3, #0
 800587a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800587e:	f7fb f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8005882:	4680      	mov	r8, r0
 8005884:	b158      	cbz	r0, 800589e <_dtoa_r+0xce>
 8005886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005888:	2301      	movs	r3, #1
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800588e:	b113      	cbz	r3, 8005896 <_dtoa_r+0xc6>
 8005890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005892:	4b84      	ldr	r3, [pc, #528]	@ (8005aa4 <_dtoa_r+0x2d4>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ab8 <_dtoa_r+0x2e8>
 800589a:	f000 bd33 	b.w	8006304 <_dtoa_r+0xb34>
 800589e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80058a2:	aa16      	add	r2, sp, #88	@ 0x58
 80058a4:	a917      	add	r1, sp, #92	@ 0x5c
 80058a6:	4658      	mov	r0, fp
 80058a8:	f001 fa3a 	bl	8006d20 <__d2b>
 80058ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058b0:	4681      	mov	r9, r0
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	d077      	beq.n	80059a6 <_dtoa_r+0x1d6>
 80058b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80058bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058d0:	4619      	mov	r1, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b74      	ldr	r3, [pc, #464]	@ (8005aa8 <_dtoa_r+0x2d8>)
 80058d6:	f7fa fcd7 	bl	8000288 <__aeabi_dsub>
 80058da:	a369      	add	r3, pc, #420	@ (adr r3, 8005a80 <_dtoa_r+0x2b0>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fe8a 	bl	80005f8 <__aeabi_dmul>
 80058e4:	a368      	add	r3, pc, #416	@ (adr r3, 8005a88 <_dtoa_r+0x2b8>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fccf 	bl	800028c <__adddf3>
 80058ee:	4604      	mov	r4, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	460d      	mov	r5, r1
 80058f4:	f7fa fe16 	bl	8000524 <__aeabi_i2d>
 80058f8:	a365      	add	r3, pc, #404	@ (adr r3, 8005a90 <_dtoa_r+0x2c0>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fe7b 	bl	80005f8 <__aeabi_dmul>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fa fcbf 	bl	800028c <__adddf3>
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
 8005912:	f7fb f921 	bl	8000b58 <__aeabi_d2iz>
 8005916:	2200      	movs	r2, #0
 8005918:	4607      	mov	r7, r0
 800591a:	2300      	movs	r3, #0
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fb f8dc 	bl	8000adc <__aeabi_dcmplt>
 8005924:	b140      	cbz	r0, 8005938 <_dtoa_r+0x168>
 8005926:	4638      	mov	r0, r7
 8005928:	f7fa fdfc 	bl	8000524 <__aeabi_i2d>
 800592c:	4622      	mov	r2, r4
 800592e:	462b      	mov	r3, r5
 8005930:	f7fb f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005934:	b900      	cbnz	r0, 8005938 <_dtoa_r+0x168>
 8005936:	3f01      	subs	r7, #1
 8005938:	2f16      	cmp	r7, #22
 800593a:	d851      	bhi.n	80059e0 <_dtoa_r+0x210>
 800593c:	4b5b      	ldr	r3, [pc, #364]	@ (8005aac <_dtoa_r+0x2dc>)
 800593e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800594a:	f7fb f8c7 	bl	8000adc <__aeabi_dcmplt>
 800594e:	2800      	cmp	r0, #0
 8005950:	d048      	beq.n	80059e4 <_dtoa_r+0x214>
 8005952:	3f01      	subs	r7, #1
 8005954:	2300      	movs	r3, #0
 8005956:	9312      	str	r3, [sp, #72]	@ 0x48
 8005958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800595a:	1b9b      	subs	r3, r3, r6
 800595c:	1e5a      	subs	r2, r3, #1
 800595e:	bf44      	itt	mi
 8005960:	f1c3 0801 	rsbmi	r8, r3, #1
 8005964:	2300      	movmi	r3, #0
 8005966:	9208      	str	r2, [sp, #32]
 8005968:	bf54      	ite	pl
 800596a:	f04f 0800 	movpl.w	r8, #0
 800596e:	9308      	strmi	r3, [sp, #32]
 8005970:	2f00      	cmp	r7, #0
 8005972:	db39      	blt.n	80059e8 <_dtoa_r+0x218>
 8005974:	9b08      	ldr	r3, [sp, #32]
 8005976:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005978:	443b      	add	r3, r7
 800597a:	9308      	str	r3, [sp, #32]
 800597c:	2300      	movs	r3, #0
 800597e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005982:	2b09      	cmp	r3, #9
 8005984:	d864      	bhi.n	8005a50 <_dtoa_r+0x280>
 8005986:	2b05      	cmp	r3, #5
 8005988:	bfc4      	itt	gt
 800598a:	3b04      	subgt	r3, #4
 800598c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800598e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005990:	f1a3 0302 	sub.w	r3, r3, #2
 8005994:	bfcc      	ite	gt
 8005996:	2400      	movgt	r4, #0
 8005998:	2401      	movle	r4, #1
 800599a:	2b03      	cmp	r3, #3
 800599c:	d863      	bhi.n	8005a66 <_dtoa_r+0x296>
 800599e:	e8df f003 	tbb	[pc, r3]
 80059a2:	372a      	.short	0x372a
 80059a4:	5535      	.short	0x5535
 80059a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80059aa:	441e      	add	r6, r3
 80059ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	bfc1      	itttt	gt
 80059b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059b8:	409f      	lslgt	r7, r3
 80059ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059c2:	bfd6      	itet	le
 80059c4:	f1c3 0320 	rsble	r3, r3, #32
 80059c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80059cc:	fa04 f003 	lslle.w	r0, r4, r3
 80059d0:	f7fa fd98 	bl	8000504 <__aeabi_ui2d>
 80059d4:	2201      	movs	r2, #1
 80059d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059da:	3e01      	subs	r6, #1
 80059dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80059de:	e777      	b.n	80058d0 <_dtoa_r+0x100>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e7b8      	b.n	8005956 <_dtoa_r+0x186>
 80059e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80059e6:	e7b7      	b.n	8005958 <_dtoa_r+0x188>
 80059e8:	427b      	negs	r3, r7
 80059ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ec:	2300      	movs	r3, #0
 80059ee:	eba8 0807 	sub.w	r8, r8, r7
 80059f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059f4:	e7c4      	b.n	8005980 <_dtoa_r+0x1b0>
 80059f6:	2300      	movs	r3, #0
 80059f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dc35      	bgt.n	8005a6c <_dtoa_r+0x29c>
 8005a00:	2301      	movs	r3, #1
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	9307      	str	r3, [sp, #28]
 8005a06:	461a      	mov	r2, r3
 8005a08:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a0a:	e00b      	b.n	8005a24 <_dtoa_r+0x254>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e7f3      	b.n	80059f8 <_dtoa_r+0x228>
 8005a10:	2300      	movs	r3, #0
 8005a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	9307      	str	r3, [sp, #28]
 8005a20:	bfb8      	it	lt
 8005a22:	2301      	movlt	r3, #1
 8005a24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	f102 0514 	add.w	r5, r2, #20
 8005a30:	429d      	cmp	r5, r3
 8005a32:	d91f      	bls.n	8005a74 <_dtoa_r+0x2a4>
 8005a34:	6041      	str	r1, [r0, #4]
 8005a36:	4658      	mov	r0, fp
 8005a38:	f000 fd8e 	bl	8006558 <_Balloc>
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d13c      	bne.n	8005abc <_dtoa_r+0x2ec>
 8005a42:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <_dtoa_r+0x2e0>)
 8005a44:	4602      	mov	r2, r0
 8005a46:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a4a:	e6d8      	b.n	80057fe <_dtoa_r+0x2e>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e7e0      	b.n	8005a12 <_dtoa_r+0x242>
 8005a50:	2401      	movs	r4, #1
 8005a52:	2300      	movs	r3, #0
 8005a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2312      	movs	r3, #18
 8005a64:	e7d0      	b.n	8005a08 <_dtoa_r+0x238>
 8005a66:	2301      	movs	r3, #1
 8005a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a6a:	e7f5      	b.n	8005a58 <_dtoa_r+0x288>
 8005a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	9307      	str	r3, [sp, #28]
 8005a72:	e7d7      	b.n	8005a24 <_dtoa_r+0x254>
 8005a74:	3101      	adds	r1, #1
 8005a76:	0052      	lsls	r2, r2, #1
 8005a78:	e7d8      	b.n	8005a2c <_dtoa_r+0x25c>
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w
 8005a80:	636f4361 	.word	0x636f4361
 8005a84:	3fd287a7 	.word	0x3fd287a7
 8005a88:	8b60c8b3 	.word	0x8b60c8b3
 8005a8c:	3fc68a28 	.word	0x3fc68a28
 8005a90:	509f79fb 	.word	0x509f79fb
 8005a94:	3fd34413 	.word	0x3fd34413
 8005a98:	080092ea 	.word	0x080092ea
 8005a9c:	080093a4 	.word	0x080093a4
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	080092c2 	.word	0x080092c2
 8005aa8:	3ff80000 	.word	0x3ff80000
 8005aac:	080094a0 	.word	0x080094a0
 8005ab0:	080093fc 	.word	0x080093fc
 8005ab4:	080093a0 	.word	0x080093a0
 8005ab8:	080092c1 	.word	0x080092c1
 8005abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	9b07      	ldr	r3, [sp, #28]
 8005ac4:	2b0e      	cmp	r3, #14
 8005ac6:	f200 80a4 	bhi.w	8005c12 <_dtoa_r+0x442>
 8005aca:	2c00      	cmp	r4, #0
 8005acc:	f000 80a1 	beq.w	8005c12 <_dtoa_r+0x442>
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	dd33      	ble.n	8005b3c <_dtoa_r+0x36c>
 8005ad4:	4bad      	ldr	r3, [pc, #692]	@ (8005d8c <_dtoa_r+0x5bc>)
 8005ad6:	f007 020f 	and.w	r2, r7, #15
 8005ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ade:	ed93 7b00 	vldr	d7, [r3]
 8005ae2:	05f8      	lsls	r0, r7, #23
 8005ae4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005aec:	d516      	bpl.n	8005b1c <_dtoa_r+0x34c>
 8005aee:	4ba8      	ldr	r3, [pc, #672]	@ (8005d90 <_dtoa_r+0x5c0>)
 8005af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005af8:	f7fa fea8 	bl	800084c <__aeabi_ddiv>
 8005afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b00:	f004 040f 	and.w	r4, r4, #15
 8005b04:	2603      	movs	r6, #3
 8005b06:	4da2      	ldr	r5, [pc, #648]	@ (8005d90 <_dtoa_r+0x5c0>)
 8005b08:	b954      	cbnz	r4, 8005b20 <_dtoa_r+0x350>
 8005b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b12:	f7fa fe9b 	bl	800084c <__aeabi_ddiv>
 8005b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1a:	e028      	b.n	8005b6e <_dtoa_r+0x39e>
 8005b1c:	2602      	movs	r6, #2
 8005b1e:	e7f2      	b.n	8005b06 <_dtoa_r+0x336>
 8005b20:	07e1      	lsls	r1, r4, #31
 8005b22:	d508      	bpl.n	8005b36 <_dtoa_r+0x366>
 8005b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b2c:	f7fa fd64 	bl	80005f8 <__aeabi_dmul>
 8005b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b34:	3601      	adds	r6, #1
 8005b36:	1064      	asrs	r4, r4, #1
 8005b38:	3508      	adds	r5, #8
 8005b3a:	e7e5      	b.n	8005b08 <_dtoa_r+0x338>
 8005b3c:	f000 80d2 	beq.w	8005ce4 <_dtoa_r+0x514>
 8005b40:	427c      	negs	r4, r7
 8005b42:	4b92      	ldr	r3, [pc, #584]	@ (8005d8c <_dtoa_r+0x5bc>)
 8005b44:	4d92      	ldr	r5, [pc, #584]	@ (8005d90 <_dtoa_r+0x5c0>)
 8005b46:	f004 020f 	and.w	r2, r4, #15
 8005b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b56:	f7fa fd4f 	bl	80005f8 <__aeabi_dmul>
 8005b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b5e:	1124      	asrs	r4, r4, #4
 8005b60:	2300      	movs	r3, #0
 8005b62:	2602      	movs	r6, #2
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	f040 80b2 	bne.w	8005cce <_dtoa_r+0x4fe>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d3      	bne.n	8005b16 <_dtoa_r+0x346>
 8005b6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80b7 	beq.w	8005ce8 <_dtoa_r+0x518>
 8005b7a:	4b86      	ldr	r3, [pc, #536]	@ (8005d94 <_dtoa_r+0x5c4>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa ffab 	bl	8000adc <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f000 80ae 	beq.w	8005ce8 <_dtoa_r+0x518>
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80aa 	beq.w	8005ce8 <_dtoa_r+0x518>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd37      	ble.n	8005c0a <_dtoa_r+0x43a>
 8005b9a:	1e7b      	subs	r3, r7, #1
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8005d98 <_dtoa_r+0x5c8>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa fd27 	bl	80005f8 <__aeabi_dmul>
 8005baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bae:	9c00      	ldr	r4, [sp, #0]
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7fa fcb6 	bl	8000524 <__aeabi_i2d>
 8005bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	4b76      	ldr	r3, [pc, #472]	@ (8005d9c <_dtoa_r+0x5cc>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f7fa fb62 	bl	800028c <__adddf3>
 8005bc8:	4605      	mov	r5, r0
 8005bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	f040 808d 	bne.w	8005cee <_dtoa_r+0x51e>
 8005bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd8:	4b71      	ldr	r3, [pc, #452]	@ (8005da0 <_dtoa_r+0x5d0>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f7fa fb54 	bl	8000288 <__aeabi_dsub>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005be8:	462a      	mov	r2, r5
 8005bea:	4633      	mov	r3, r6
 8005bec:	f7fa ff94 	bl	8000b18 <__aeabi_dcmpgt>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	f040 828b 	bne.w	800610c <_dtoa_r+0x93c>
 8005bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c00:	f7fa ff6c 	bl	8000adc <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 8128 	bne.w	8005e5a <_dtoa_r+0x68a>
 8005c0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f2c0 815a 	blt.w	8005ece <_dtoa_r+0x6fe>
 8005c1a:	2f0e      	cmp	r7, #14
 8005c1c:	f300 8157 	bgt.w	8005ece <_dtoa_r+0x6fe>
 8005c20:	4b5a      	ldr	r3, [pc, #360]	@ (8005d8c <_dtoa_r+0x5bc>)
 8005c22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c26:	ed93 7b00 	vldr	d7, [r3]
 8005c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	ed8d 7b00 	vstr	d7, [sp]
 8005c32:	da03      	bge.n	8005c3c <_dtoa_r+0x46c>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f340 8101 	ble.w	8005e3e <_dtoa_r+0x66e>
 8005c3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c40:	4656      	mov	r6, sl
 8005c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fdff 	bl	800084c <__aeabi_ddiv>
 8005c4e:	f7fa ff83 	bl	8000b58 <__aeabi_d2iz>
 8005c52:	4680      	mov	r8, r0
 8005c54:	f7fa fc66 	bl	8000524 <__aeabi_i2d>
 8005c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c5c:	f7fa fccc 	bl	80005f8 <__aeabi_dmul>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c6c:	f7fa fb0c 	bl	8000288 <__aeabi_dsub>
 8005c70:	f806 4b01 	strb.w	r4, [r6], #1
 8005c74:	9d07      	ldr	r5, [sp, #28]
 8005c76:	eba6 040a 	sub.w	r4, r6, sl
 8005c7a:	42a5      	cmp	r5, r4
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	f040 8117 	bne.w	8005eb2 <_dtoa_r+0x6e2>
 8005c84:	f7fa fb02 	bl	800028c <__adddf3>
 8005c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	460d      	mov	r5, r1
 8005c90:	f7fa ff42 	bl	8000b18 <__aeabi_dcmpgt>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f040 80f9 	bne.w	8005e8c <_dtoa_r+0x6bc>
 8005c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca6:	b118      	cbz	r0, 8005cb0 <_dtoa_r+0x4e0>
 8005ca8:	f018 0f01 	tst.w	r8, #1
 8005cac:	f040 80ee 	bne.w	8005e8c <_dtoa_r+0x6bc>
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4658      	mov	r0, fp
 8005cb4:	f000 fc90 	bl	80065d8 <_Bfree>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	7033      	strb	r3, [r6, #0]
 8005cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cbe:	3701      	adds	r7, #1
 8005cc0:	601f      	str	r7, [r3, #0]
 8005cc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 831d 	beq.w	8006304 <_dtoa_r+0xb34>
 8005cca:	601e      	str	r6, [r3, #0]
 8005ccc:	e31a      	b.n	8006304 <_dtoa_r+0xb34>
 8005cce:	07e2      	lsls	r2, r4, #31
 8005cd0:	d505      	bpl.n	8005cde <_dtoa_r+0x50e>
 8005cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cd6:	f7fa fc8f 	bl	80005f8 <__aeabi_dmul>
 8005cda:	3601      	adds	r6, #1
 8005cdc:	2301      	movs	r3, #1
 8005cde:	1064      	asrs	r4, r4, #1
 8005ce0:	3508      	adds	r5, #8
 8005ce2:	e73f      	b.n	8005b64 <_dtoa_r+0x394>
 8005ce4:	2602      	movs	r6, #2
 8005ce6:	e742      	b.n	8005b6e <_dtoa_r+0x39e>
 8005ce8:	9c07      	ldr	r4, [sp, #28]
 8005cea:	9704      	str	r7, [sp, #16]
 8005cec:	e761      	b.n	8005bb2 <_dtoa_r+0x3e2>
 8005cee:	4b27      	ldr	r3, [pc, #156]	@ (8005d8c <_dtoa_r+0x5bc>)
 8005cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cfa:	4454      	add	r4, sl
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	d053      	beq.n	8005da8 <_dtoa_r+0x5d8>
 8005d00:	4928      	ldr	r1, [pc, #160]	@ (8005da4 <_dtoa_r+0x5d4>)
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7fa fda2 	bl	800084c <__aeabi_ddiv>
 8005d08:	4633      	mov	r3, r6
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	f7fa fabc 	bl	8000288 <__aeabi_dsub>
 8005d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d14:	4656      	mov	r6, sl
 8005d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1a:	f7fa ff1d 	bl	8000b58 <__aeabi_d2iz>
 8005d1e:	4605      	mov	r5, r0
 8005d20:	f7fa fc00 	bl	8000524 <__aeabi_i2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	3530      	adds	r5, #48	@ 0x30
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d3a:	f806 5b01 	strb.w	r5, [r6], #1
 8005d3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d42:	f7fa fecb 	bl	8000adc <__aeabi_dcmplt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d171      	bne.n	8005e2e <_dtoa_r+0x65e>
 8005d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d4e:	4911      	ldr	r1, [pc, #68]	@ (8005d94 <_dtoa_r+0x5c4>)
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7fa fa99 	bl	8000288 <__aeabi_dsub>
 8005d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d5a:	f7fa febf 	bl	8000adc <__aeabi_dcmplt>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f040 8095 	bne.w	8005e8e <_dtoa_r+0x6be>
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	f43f af50 	beq.w	8005c0a <_dtoa_r+0x43a>
 8005d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <_dtoa_r+0x5c8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <_dtoa_r+0x5c8>)
 8005d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	f7fa fc39 	bl	80005f8 <__aeabi_dmul>
 8005d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d8a:	e7c4      	b.n	8005d16 <_dtoa_r+0x546>
 8005d8c:	080094a0 	.word	0x080094a0
 8005d90:	08009478 	.word	0x08009478
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	40240000 	.word	0x40240000
 8005d9c:	401c0000 	.word	0x401c0000
 8005da0:	40140000 	.word	0x40140000
 8005da4:	3fe00000 	.word	0x3fe00000
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fa fc24 	bl	80005f8 <__aeabi_dmul>
 8005db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005db4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005db6:	4656      	mov	r6, sl
 8005db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dbc:	f7fa fecc 	bl	8000b58 <__aeabi_d2iz>
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	f7fa fbaf 	bl	8000524 <__aeabi_i2d>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dce:	f7fa fa5b 	bl	8000288 <__aeabi_dsub>
 8005dd2:	3530      	adds	r5, #48	@ 0x30
 8005dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	42a6      	cmp	r6, r4
 8005dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	d124      	bne.n	8005e32 <_dtoa_r+0x662>
 8005de8:	4bac      	ldr	r3, [pc, #688]	@ (800609c <_dtoa_r+0x8cc>)
 8005dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dee:	f7fa fa4d 	bl	800028c <__adddf3>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dfa:	f7fa fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d145      	bne.n	8005e8e <_dtoa_r+0x6be>
 8005e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e06:	49a5      	ldr	r1, [pc, #660]	@ (800609c <_dtoa_r+0x8cc>)
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f7fa fa3d 	bl	8000288 <__aeabi_dsub>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	f7fa fe61 	bl	8000adc <__aeabi_dcmplt>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f43f aef5 	beq.w	8005c0a <_dtoa_r+0x43a>
 8005e20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e22:	1e73      	subs	r3, r6, #1
 8005e24:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e2a:	2b30      	cmp	r3, #48	@ 0x30
 8005e2c:	d0f8      	beq.n	8005e20 <_dtoa_r+0x650>
 8005e2e:	9f04      	ldr	r7, [sp, #16]
 8005e30:	e73e      	b.n	8005cb0 <_dtoa_r+0x4e0>
 8005e32:	4b9b      	ldr	r3, [pc, #620]	@ (80060a0 <_dtoa_r+0x8d0>)
 8005e34:	f7fa fbe0 	bl	80005f8 <__aeabi_dmul>
 8005e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e3c:	e7bc      	b.n	8005db8 <_dtoa_r+0x5e8>
 8005e3e:	d10c      	bne.n	8005e5a <_dtoa_r+0x68a>
 8005e40:	4b98      	ldr	r3, [pc, #608]	@ (80060a4 <_dtoa_r+0x8d4>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e48:	f7fa fbd6 	bl	80005f8 <__aeabi_dmul>
 8005e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e50:	f7fa fe58 	bl	8000b04 <__aeabi_dcmpge>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f000 8157 	beq.w	8006108 <_dtoa_r+0x938>
 8005e5a:	2400      	movs	r4, #0
 8005e5c:	4625      	mov	r5, r4
 8005e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e60:	43db      	mvns	r3, r3
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	4656      	mov	r6, sl
 8005e66:	2700      	movs	r7, #0
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4658      	mov	r0, fp
 8005e6c:	f000 fbb4 	bl	80065d8 <_Bfree>
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	d0dc      	beq.n	8005e2e <_dtoa_r+0x65e>
 8005e74:	b12f      	cbz	r7, 8005e82 <_dtoa_r+0x6b2>
 8005e76:	42af      	cmp	r7, r5
 8005e78:	d003      	beq.n	8005e82 <_dtoa_r+0x6b2>
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 fbab 	bl	80065d8 <_Bfree>
 8005e82:	4629      	mov	r1, r5
 8005e84:	4658      	mov	r0, fp
 8005e86:	f000 fba7 	bl	80065d8 <_Bfree>
 8005e8a:	e7d0      	b.n	8005e2e <_dtoa_r+0x65e>
 8005e8c:	9704      	str	r7, [sp, #16]
 8005e8e:	4633      	mov	r3, r6
 8005e90:	461e      	mov	r6, r3
 8005e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e96:	2a39      	cmp	r2, #57	@ 0x39
 8005e98:	d107      	bne.n	8005eaa <_dtoa_r+0x6da>
 8005e9a:	459a      	cmp	sl, r3
 8005e9c:	d1f8      	bne.n	8005e90 <_dtoa_r+0x6c0>
 8005e9e:	9a04      	ldr	r2, [sp, #16]
 8005ea0:	3201      	adds	r2, #1
 8005ea2:	9204      	str	r2, [sp, #16]
 8005ea4:	2230      	movs	r2, #48	@ 0x30
 8005ea6:	f88a 2000 	strb.w	r2, [sl]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	3201      	adds	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e7bd      	b.n	8005e2e <_dtoa_r+0x65e>
 8005eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80060a0 <_dtoa_r+0x8d0>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f7fa fb9f 	bl	80005f8 <__aeabi_dmul>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	f7fa fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aebb 	beq.w	8005c42 <_dtoa_r+0x472>
 8005ecc:	e6f0      	b.n	8005cb0 <_dtoa_r+0x4e0>
 8005ece:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f000 80db 	beq.w	800608c <_dtoa_r+0x8bc>
 8005ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	f300 80bf 	bgt.w	800605c <_dtoa_r+0x88c>
 8005ede:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	f000 80b7 	beq.w	8006054 <_dtoa_r+0x884>
 8005ee6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005eea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eec:	4646      	mov	r6, r8
 8005eee:	9a08      	ldr	r2, [sp, #32]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	441a      	add	r2, r3
 8005ef4:	4658      	mov	r0, fp
 8005ef6:	4498      	add	r8, r3
 8005ef8:	9208      	str	r2, [sp, #32]
 8005efa:	f000 fc6b 	bl	80067d4 <__i2b>
 8005efe:	4605      	mov	r5, r0
 8005f00:	b15e      	cbz	r6, 8005f1a <_dtoa_r+0x74a>
 8005f02:	9b08      	ldr	r3, [sp, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dd08      	ble.n	8005f1a <_dtoa_r+0x74a>
 8005f08:	42b3      	cmp	r3, r6
 8005f0a:	9a08      	ldr	r2, [sp, #32]
 8005f0c:	bfa8      	it	ge
 8005f0e:	4633      	movge	r3, r6
 8005f10:	eba8 0803 	sub.w	r8, r8, r3
 8005f14:	1af6      	subs	r6, r6, r3
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1c:	b1f3      	cbz	r3, 8005f5c <_dtoa_r+0x78c>
 8005f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80b7 	beq.w	8006094 <_dtoa_r+0x8c4>
 8005f26:	b18c      	cbz	r4, 8005f4c <_dtoa_r+0x77c>
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4658      	mov	r0, fp
 8005f2e:	f000 fd11 	bl	8006954 <__pow5mult>
 8005f32:	464a      	mov	r2, r9
 8005f34:	4601      	mov	r1, r0
 8005f36:	4605      	mov	r5, r0
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f000 fc61 	bl	8006800 <__multiply>
 8005f3e:	4649      	mov	r1, r9
 8005f40:	9004      	str	r0, [sp, #16]
 8005f42:	4658      	mov	r0, fp
 8005f44:	f000 fb48 	bl	80065d8 <_Bfree>
 8005f48:	9b04      	ldr	r3, [sp, #16]
 8005f4a:	4699      	mov	r9, r3
 8005f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f4e:	1b1a      	subs	r2, r3, r4
 8005f50:	d004      	beq.n	8005f5c <_dtoa_r+0x78c>
 8005f52:	4649      	mov	r1, r9
 8005f54:	4658      	mov	r0, fp
 8005f56:	f000 fcfd 	bl	8006954 <__pow5mult>
 8005f5a:	4681      	mov	r9, r0
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4658      	mov	r0, fp
 8005f60:	f000 fc38 	bl	80067d4 <__i2b>
 8005f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f66:	4604      	mov	r4, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 81cf 	beq.w	800630c <_dtoa_r+0xb3c>
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4601      	mov	r1, r0
 8005f72:	4658      	mov	r0, fp
 8005f74:	f000 fcee 	bl	8006954 <__pow5mult>
 8005f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	f300 8095 	bgt.w	80060ac <_dtoa_r+0x8dc>
 8005f82:	9b02      	ldr	r3, [sp, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8087 	bne.w	8006098 <_dtoa_r+0x8c8>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8089 	bne.w	80060a8 <_dtoa_r+0x8d8>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	051b      	lsls	r3, r3, #20
 8005fa0:	b12b      	cbz	r3, 8005fae <_dtoa_r+0x7de>
 8005fa2:	9b08      	ldr	r3, [sp, #32]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	9308      	str	r3, [sp, #32]
 8005fa8:	f108 0801 	add.w	r8, r8, #1
 8005fac:	2301      	movs	r3, #1
 8005fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 81b0 	beq.w	8006318 <_dtoa_r+0xb48>
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fbe:	6918      	ldr	r0, [r3, #16]
 8005fc0:	f000 fbbc 	bl	800673c <__hi0bits>
 8005fc4:	f1c0 0020 	rsb	r0, r0, #32
 8005fc8:	9b08      	ldr	r3, [sp, #32]
 8005fca:	4418      	add	r0, r3
 8005fcc:	f010 001f 	ands.w	r0, r0, #31
 8005fd0:	d077      	beq.n	80060c2 <_dtoa_r+0x8f2>
 8005fd2:	f1c0 0320 	rsb	r3, r0, #32
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	dd6b      	ble.n	80060b2 <_dtoa_r+0x8e2>
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	f1c0 001c 	rsb	r0, r0, #28
 8005fe0:	4403      	add	r3, r0
 8005fe2:	4480      	add	r8, r0
 8005fe4:	4406      	add	r6, r0
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	dd05      	ble.n	8005ffa <_dtoa_r+0x82a>
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	f000 fd08 	bl	8006a08 <__lshift>
 8005ff8:	4681      	mov	r9, r0
 8005ffa:	9b08      	ldr	r3, [sp, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dd05      	ble.n	800600c <_dtoa_r+0x83c>
 8006000:	4621      	mov	r1, r4
 8006002:	461a      	mov	r2, r3
 8006004:	4658      	mov	r0, fp
 8006006:	f000 fcff 	bl	8006a08 <__lshift>
 800600a:	4604      	mov	r4, r0
 800600c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800600e:	2b00      	cmp	r3, #0
 8006010:	d059      	beq.n	80060c6 <_dtoa_r+0x8f6>
 8006012:	4621      	mov	r1, r4
 8006014:	4648      	mov	r0, r9
 8006016:	f000 fd63 	bl	8006ae0 <__mcmp>
 800601a:	2800      	cmp	r0, #0
 800601c:	da53      	bge.n	80060c6 <_dtoa_r+0x8f6>
 800601e:	1e7b      	subs	r3, r7, #1
 8006020:	9304      	str	r3, [sp, #16]
 8006022:	4649      	mov	r1, r9
 8006024:	2300      	movs	r3, #0
 8006026:	220a      	movs	r2, #10
 8006028:	4658      	mov	r0, fp
 800602a:	f000 faf7 	bl	800661c <__multadd>
 800602e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006030:	4681      	mov	r9, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8172 	beq.w	800631c <_dtoa_r+0xb4c>
 8006038:	2300      	movs	r3, #0
 800603a:	4629      	mov	r1, r5
 800603c:	220a      	movs	r2, #10
 800603e:	4658      	mov	r0, fp
 8006040:	f000 faec 	bl	800661c <__multadd>
 8006044:	9b00      	ldr	r3, [sp, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	4605      	mov	r5, r0
 800604a:	dc67      	bgt.n	800611c <_dtoa_r+0x94c>
 800604c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604e:	2b02      	cmp	r3, #2
 8006050:	dc41      	bgt.n	80060d6 <_dtoa_r+0x906>
 8006052:	e063      	b.n	800611c <_dtoa_r+0x94c>
 8006054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800605a:	e746      	b.n	8005eea <_dtoa_r+0x71a>
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	1e5c      	subs	r4, r3, #1
 8006060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006062:	42a3      	cmp	r3, r4
 8006064:	bfbf      	itttt	lt
 8006066:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006068:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800606a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800606c:	1ae3      	sublt	r3, r4, r3
 800606e:	bfb4      	ite	lt
 8006070:	18d2      	addlt	r2, r2, r3
 8006072:	1b1c      	subge	r4, r3, r4
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	bfbc      	itt	lt
 8006078:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800607a:	2400      	movlt	r4, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	bfb5      	itete	lt
 8006080:	eba8 0603 	sublt.w	r6, r8, r3
 8006084:	9b07      	ldrge	r3, [sp, #28]
 8006086:	2300      	movlt	r3, #0
 8006088:	4646      	movge	r6, r8
 800608a:	e730      	b.n	8005eee <_dtoa_r+0x71e>
 800608c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800608e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006090:	4646      	mov	r6, r8
 8006092:	e735      	b.n	8005f00 <_dtoa_r+0x730>
 8006094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006096:	e75c      	b.n	8005f52 <_dtoa_r+0x782>
 8006098:	2300      	movs	r3, #0
 800609a:	e788      	b.n	8005fae <_dtoa_r+0x7de>
 800609c:	3fe00000 	.word	0x3fe00000
 80060a0:	40240000 	.word	0x40240000
 80060a4:	40140000 	.word	0x40140000
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	e780      	b.n	8005fae <_dtoa_r+0x7de>
 80060ac:	2300      	movs	r3, #0
 80060ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80060b0:	e782      	b.n	8005fb8 <_dtoa_r+0x7e8>
 80060b2:	d099      	beq.n	8005fe8 <_dtoa_r+0x818>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	331c      	adds	r3, #28
 80060b8:	441a      	add	r2, r3
 80060ba:	4498      	add	r8, r3
 80060bc:	441e      	add	r6, r3
 80060be:	9208      	str	r2, [sp, #32]
 80060c0:	e792      	b.n	8005fe8 <_dtoa_r+0x818>
 80060c2:	4603      	mov	r3, r0
 80060c4:	e7f6      	b.n	80060b4 <_dtoa_r+0x8e4>
 80060c6:	9b07      	ldr	r3, [sp, #28]
 80060c8:	9704      	str	r7, [sp, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dc20      	bgt.n	8006110 <_dtoa_r+0x940>
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	dd1e      	ble.n	8006114 <_dtoa_r+0x944>
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f aec0 	bne.w	8005e5e <_dtoa_r+0x68e>
 80060de:	4621      	mov	r1, r4
 80060e0:	2205      	movs	r2, #5
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fa9a 	bl	800661c <__multadd>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4648      	mov	r0, r9
 80060ee:	f000 fcf7 	bl	8006ae0 <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f77f aeb3 	ble.w	8005e5e <_dtoa_r+0x68e>
 80060f8:	4656      	mov	r6, sl
 80060fa:	2331      	movs	r3, #49	@ 0x31
 80060fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	3301      	adds	r3, #1
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	e6ae      	b.n	8005e66 <_dtoa_r+0x696>
 8006108:	9c07      	ldr	r4, [sp, #28]
 800610a:	9704      	str	r7, [sp, #16]
 800610c:	4625      	mov	r5, r4
 800610e:	e7f3      	b.n	80060f8 <_dtoa_r+0x928>
 8006110:	9b07      	ldr	r3, [sp, #28]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8104 	beq.w	8006324 <_dtoa_r+0xb54>
 800611c:	2e00      	cmp	r6, #0
 800611e:	dd05      	ble.n	800612c <_dtoa_r+0x95c>
 8006120:	4629      	mov	r1, r5
 8006122:	4632      	mov	r2, r6
 8006124:	4658      	mov	r0, fp
 8006126:	f000 fc6f 	bl	8006a08 <__lshift>
 800612a:	4605      	mov	r5, r0
 800612c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d05a      	beq.n	80061e8 <_dtoa_r+0xa18>
 8006132:	6869      	ldr	r1, [r5, #4]
 8006134:	4658      	mov	r0, fp
 8006136:	f000 fa0f 	bl	8006558 <_Balloc>
 800613a:	4606      	mov	r6, r0
 800613c:	b928      	cbnz	r0, 800614a <_dtoa_r+0x97a>
 800613e:	4b84      	ldr	r3, [pc, #528]	@ (8006350 <_dtoa_r+0xb80>)
 8006140:	4602      	mov	r2, r0
 8006142:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006146:	f7ff bb5a 	b.w	80057fe <_dtoa_r+0x2e>
 800614a:	692a      	ldr	r2, [r5, #16]
 800614c:	3202      	adds	r2, #2
 800614e:	0092      	lsls	r2, r2, #2
 8006150:	f105 010c 	add.w	r1, r5, #12
 8006154:	300c      	adds	r0, #12
 8006156:	f002 f8e1 	bl	800831c <memcpy>
 800615a:	2201      	movs	r2, #1
 800615c:	4631      	mov	r1, r6
 800615e:	4658      	mov	r0, fp
 8006160:	f000 fc52 	bl	8006a08 <__lshift>
 8006164:	f10a 0301 	add.w	r3, sl, #1
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	9b00      	ldr	r3, [sp, #0]
 800616c:	4453      	add	r3, sl
 800616e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006170:	9b02      	ldr	r3, [sp, #8]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	462f      	mov	r7, r5
 8006178:	930a      	str	r3, [sp, #40]	@ 0x28
 800617a:	4605      	mov	r5, r0
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	4621      	mov	r1, r4
 8006180:	3b01      	subs	r3, #1
 8006182:	4648      	mov	r0, r9
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	f7ff fa9b 	bl	80056c0 <quorem>
 800618a:	4639      	mov	r1, r7
 800618c:	9002      	str	r0, [sp, #8]
 800618e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006192:	4648      	mov	r0, r9
 8006194:	f000 fca4 	bl	8006ae0 <__mcmp>
 8006198:	462a      	mov	r2, r5
 800619a:	9008      	str	r0, [sp, #32]
 800619c:	4621      	mov	r1, r4
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 fcba 	bl	8006b18 <__mdiff>
 80061a4:	68c2      	ldr	r2, [r0, #12]
 80061a6:	4606      	mov	r6, r0
 80061a8:	bb02      	cbnz	r2, 80061ec <_dtoa_r+0xa1c>
 80061aa:	4601      	mov	r1, r0
 80061ac:	4648      	mov	r0, r9
 80061ae:	f000 fc97 	bl	8006ae0 <__mcmp>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4631      	mov	r1, r6
 80061b6:	4658      	mov	r0, fp
 80061b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80061ba:	f000 fa0d 	bl	80065d8 <_Bfree>
 80061be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061c2:	9e07      	ldr	r6, [sp, #28]
 80061c4:	ea43 0102 	orr.w	r1, r3, r2
 80061c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ca:	4319      	orrs	r1, r3
 80061cc:	d110      	bne.n	80061f0 <_dtoa_r+0xa20>
 80061ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061d2:	d029      	beq.n	8006228 <_dtoa_r+0xa58>
 80061d4:	9b08      	ldr	r3, [sp, #32]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dd02      	ble.n	80061e0 <_dtoa_r+0xa10>
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061e0:	9b00      	ldr	r3, [sp, #0]
 80061e2:	f883 8000 	strb.w	r8, [r3]
 80061e6:	e63f      	b.n	8005e68 <_dtoa_r+0x698>
 80061e8:	4628      	mov	r0, r5
 80061ea:	e7bb      	b.n	8006164 <_dtoa_r+0x994>
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7e1      	b.n	80061b4 <_dtoa_r+0x9e4>
 80061f0:	9b08      	ldr	r3, [sp, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	db04      	blt.n	8006200 <_dtoa_r+0xa30>
 80061f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061f8:	430b      	orrs	r3, r1
 80061fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061fc:	430b      	orrs	r3, r1
 80061fe:	d120      	bne.n	8006242 <_dtoa_r+0xa72>
 8006200:	2a00      	cmp	r2, #0
 8006202:	dded      	ble.n	80061e0 <_dtoa_r+0xa10>
 8006204:	4649      	mov	r1, r9
 8006206:	2201      	movs	r2, #1
 8006208:	4658      	mov	r0, fp
 800620a:	f000 fbfd 	bl	8006a08 <__lshift>
 800620e:	4621      	mov	r1, r4
 8006210:	4681      	mov	r9, r0
 8006212:	f000 fc65 	bl	8006ae0 <__mcmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	dc03      	bgt.n	8006222 <_dtoa_r+0xa52>
 800621a:	d1e1      	bne.n	80061e0 <_dtoa_r+0xa10>
 800621c:	f018 0f01 	tst.w	r8, #1
 8006220:	d0de      	beq.n	80061e0 <_dtoa_r+0xa10>
 8006222:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006226:	d1d8      	bne.n	80061da <_dtoa_r+0xa0a>
 8006228:	9a00      	ldr	r2, [sp, #0]
 800622a:	2339      	movs	r3, #57	@ 0x39
 800622c:	7013      	strb	r3, [r2, #0]
 800622e:	4633      	mov	r3, r6
 8006230:	461e      	mov	r6, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006238:	2a39      	cmp	r2, #57	@ 0x39
 800623a:	d052      	beq.n	80062e2 <_dtoa_r+0xb12>
 800623c:	3201      	adds	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e612      	b.n	8005e68 <_dtoa_r+0x698>
 8006242:	2a00      	cmp	r2, #0
 8006244:	dd07      	ble.n	8006256 <_dtoa_r+0xa86>
 8006246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800624a:	d0ed      	beq.n	8006228 <_dtoa_r+0xa58>
 800624c:	9a00      	ldr	r2, [sp, #0]
 800624e:	f108 0301 	add.w	r3, r8, #1
 8006252:	7013      	strb	r3, [r2, #0]
 8006254:	e608      	b.n	8005e68 <_dtoa_r+0x698>
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	9a07      	ldr	r2, [sp, #28]
 800625a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800625e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006260:	4293      	cmp	r3, r2
 8006262:	d028      	beq.n	80062b6 <_dtoa_r+0xae6>
 8006264:	4649      	mov	r1, r9
 8006266:	2300      	movs	r3, #0
 8006268:	220a      	movs	r2, #10
 800626a:	4658      	mov	r0, fp
 800626c:	f000 f9d6 	bl	800661c <__multadd>
 8006270:	42af      	cmp	r7, r5
 8006272:	4681      	mov	r9, r0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	f04f 020a 	mov.w	r2, #10
 800627c:	4639      	mov	r1, r7
 800627e:	4658      	mov	r0, fp
 8006280:	d107      	bne.n	8006292 <_dtoa_r+0xac2>
 8006282:	f000 f9cb 	bl	800661c <__multadd>
 8006286:	4607      	mov	r7, r0
 8006288:	4605      	mov	r5, r0
 800628a:	9b07      	ldr	r3, [sp, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	9307      	str	r3, [sp, #28]
 8006290:	e774      	b.n	800617c <_dtoa_r+0x9ac>
 8006292:	f000 f9c3 	bl	800661c <__multadd>
 8006296:	4629      	mov	r1, r5
 8006298:	4607      	mov	r7, r0
 800629a:	2300      	movs	r3, #0
 800629c:	220a      	movs	r2, #10
 800629e:	4658      	mov	r0, fp
 80062a0:	f000 f9bc 	bl	800661c <__multadd>
 80062a4:	4605      	mov	r5, r0
 80062a6:	e7f0      	b.n	800628a <_dtoa_r+0xaba>
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfcc      	ite	gt
 80062ae:	461e      	movgt	r6, r3
 80062b0:	2601      	movle	r6, #1
 80062b2:	4456      	add	r6, sl
 80062b4:	2700      	movs	r7, #0
 80062b6:	4649      	mov	r1, r9
 80062b8:	2201      	movs	r2, #1
 80062ba:	4658      	mov	r0, fp
 80062bc:	f000 fba4 	bl	8006a08 <__lshift>
 80062c0:	4621      	mov	r1, r4
 80062c2:	4681      	mov	r9, r0
 80062c4:	f000 fc0c 	bl	8006ae0 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dcb0      	bgt.n	800622e <_dtoa_r+0xa5e>
 80062cc:	d102      	bne.n	80062d4 <_dtoa_r+0xb04>
 80062ce:	f018 0f01 	tst.w	r8, #1
 80062d2:	d1ac      	bne.n	800622e <_dtoa_r+0xa5e>
 80062d4:	4633      	mov	r3, r6
 80062d6:	461e      	mov	r6, r3
 80062d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062dc:	2a30      	cmp	r2, #48	@ 0x30
 80062de:	d0fa      	beq.n	80062d6 <_dtoa_r+0xb06>
 80062e0:	e5c2      	b.n	8005e68 <_dtoa_r+0x698>
 80062e2:	459a      	cmp	sl, r3
 80062e4:	d1a4      	bne.n	8006230 <_dtoa_r+0xa60>
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	3301      	adds	r3, #1
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	2331      	movs	r3, #49	@ 0x31
 80062ee:	f88a 3000 	strb.w	r3, [sl]
 80062f2:	e5b9      	b.n	8005e68 <_dtoa_r+0x698>
 80062f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006354 <_dtoa_r+0xb84>
 80062fa:	b11b      	cbz	r3, 8006304 <_dtoa_r+0xb34>
 80062fc:	f10a 0308 	add.w	r3, sl, #8
 8006300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4650      	mov	r0, sl
 8006306:	b019      	add	sp, #100	@ 0x64
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630e:	2b01      	cmp	r3, #1
 8006310:	f77f ae37 	ble.w	8005f82 <_dtoa_r+0x7b2>
 8006314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006316:	930a      	str	r3, [sp, #40]	@ 0x28
 8006318:	2001      	movs	r0, #1
 800631a:	e655      	b.n	8005fc8 <_dtoa_r+0x7f8>
 800631c:	9b00      	ldr	r3, [sp, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f77f aed6 	ble.w	80060d0 <_dtoa_r+0x900>
 8006324:	4656      	mov	r6, sl
 8006326:	4621      	mov	r1, r4
 8006328:	4648      	mov	r0, r9
 800632a:	f7ff f9c9 	bl	80056c0 <quorem>
 800632e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006332:	f806 8b01 	strb.w	r8, [r6], #1
 8006336:	9b00      	ldr	r3, [sp, #0]
 8006338:	eba6 020a 	sub.w	r2, r6, sl
 800633c:	4293      	cmp	r3, r2
 800633e:	ddb3      	ble.n	80062a8 <_dtoa_r+0xad8>
 8006340:	4649      	mov	r1, r9
 8006342:	2300      	movs	r3, #0
 8006344:	220a      	movs	r2, #10
 8006346:	4658      	mov	r0, fp
 8006348:	f000 f968 	bl	800661c <__multadd>
 800634c:	4681      	mov	r9, r0
 800634e:	e7ea      	b.n	8006326 <_dtoa_r+0xb56>
 8006350:	080093fc 	.word	0x080093fc
 8006354:	08009397 	.word	0x08009397

08006358 <_free_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4605      	mov	r5, r0
 800635c:	2900      	cmp	r1, #0
 800635e:	d041      	beq.n	80063e4 <_free_r+0x8c>
 8006360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006364:	1f0c      	subs	r4, r1, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfb8      	it	lt
 800636a:	18e4      	addlt	r4, r4, r3
 800636c:	f000 f8e8 	bl	8006540 <__malloc_lock>
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <_free_r+0x90>)
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	b933      	cbnz	r3, 8006384 <_free_r+0x2c>
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6014      	str	r4, [r2, #0]
 800637a:	4628      	mov	r0, r5
 800637c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006380:	f000 b8e4 	b.w	800654c <__malloc_unlock>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d908      	bls.n	800639a <_free_r+0x42>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	1821      	adds	r1, r4, r0
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1809      	addeq	r1, r1, r0
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	e7ed      	b.n	8006376 <_free_r+0x1e>
 800639a:	461a      	mov	r2, r3
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b10b      	cbz	r3, 80063a4 <_free_r+0x4c>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d9fa      	bls.n	800639a <_free_r+0x42>
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	1850      	adds	r0, r2, r1
 80063a8:	42a0      	cmp	r0, r4
 80063aa:	d10b      	bne.n	80063c4 <_free_r+0x6c>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	4401      	add	r1, r0
 80063b0:	1850      	adds	r0, r2, r1
 80063b2:	4283      	cmp	r3, r0
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	d1e0      	bne.n	800637a <_free_r+0x22>
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	4408      	add	r0, r1
 80063c0:	6010      	str	r0, [r2, #0]
 80063c2:	e7da      	b.n	800637a <_free_r+0x22>
 80063c4:	d902      	bls.n	80063cc <_free_r+0x74>
 80063c6:	230c      	movs	r3, #12
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	e7d6      	b.n	800637a <_free_r+0x22>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	1821      	adds	r1, r4, r0
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf04      	itt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	bf04      	itt	eq
 80063dc:	1809      	addeq	r1, r1, r0
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6054      	str	r4, [r2, #4]
 80063e2:	e7ca      	b.n	800637a <_free_r+0x22>
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	bf00      	nop
 80063e8:	200006a0 	.word	0x200006a0

080063ec <malloc>:
 80063ec:	4b02      	ldr	r3, [pc, #8]	@ (80063f8 <malloc+0xc>)
 80063ee:	4601      	mov	r1, r0
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	f000 b825 	b.w	8006440 <_malloc_r>
 80063f6:	bf00      	nop
 80063f8:	20000018 	.word	0x20000018

080063fc <sbrk_aligned>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4e0f      	ldr	r6, [pc, #60]	@ (800643c <sbrk_aligned+0x40>)
 8006400:	460c      	mov	r4, r1
 8006402:	6831      	ldr	r1, [r6, #0]
 8006404:	4605      	mov	r5, r0
 8006406:	b911      	cbnz	r1, 800640e <sbrk_aligned+0x12>
 8006408:	f001 ff78 	bl	80082fc <_sbrk_r>
 800640c:	6030      	str	r0, [r6, #0]
 800640e:	4621      	mov	r1, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f001 ff73 	bl	80082fc <_sbrk_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d103      	bne.n	8006422 <sbrk_aligned+0x26>
 800641a:	f04f 34ff 	mov.w	r4, #4294967295
 800641e:	4620      	mov	r0, r4
 8006420:	bd70      	pop	{r4, r5, r6, pc}
 8006422:	1cc4      	adds	r4, r0, #3
 8006424:	f024 0403 	bic.w	r4, r4, #3
 8006428:	42a0      	cmp	r0, r4
 800642a:	d0f8      	beq.n	800641e <sbrk_aligned+0x22>
 800642c:	1a21      	subs	r1, r4, r0
 800642e:	4628      	mov	r0, r5
 8006430:	f001 ff64 	bl	80082fc <_sbrk_r>
 8006434:	3001      	adds	r0, #1
 8006436:	d1f2      	bne.n	800641e <sbrk_aligned+0x22>
 8006438:	e7ef      	b.n	800641a <sbrk_aligned+0x1e>
 800643a:	bf00      	nop
 800643c:	2000069c 	.word	0x2000069c

08006440 <_malloc_r>:
 8006440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006444:	1ccd      	adds	r5, r1, #3
 8006446:	f025 0503 	bic.w	r5, r5, #3
 800644a:	3508      	adds	r5, #8
 800644c:	2d0c      	cmp	r5, #12
 800644e:	bf38      	it	cc
 8006450:	250c      	movcc	r5, #12
 8006452:	2d00      	cmp	r5, #0
 8006454:	4606      	mov	r6, r0
 8006456:	db01      	blt.n	800645c <_malloc_r+0x1c>
 8006458:	42a9      	cmp	r1, r5
 800645a:	d904      	bls.n	8006466 <_malloc_r+0x26>
 800645c:	230c      	movs	r3, #12
 800645e:	6033      	str	r3, [r6, #0]
 8006460:	2000      	movs	r0, #0
 8006462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800653c <_malloc_r+0xfc>
 800646a:	f000 f869 	bl	8006540 <__malloc_lock>
 800646e:	f8d8 3000 	ldr.w	r3, [r8]
 8006472:	461c      	mov	r4, r3
 8006474:	bb44      	cbnz	r4, 80064c8 <_malloc_r+0x88>
 8006476:	4629      	mov	r1, r5
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff ffbf 	bl	80063fc <sbrk_aligned>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	4604      	mov	r4, r0
 8006482:	d158      	bne.n	8006536 <_malloc_r+0xf6>
 8006484:	f8d8 4000 	ldr.w	r4, [r8]
 8006488:	4627      	mov	r7, r4
 800648a:	2f00      	cmp	r7, #0
 800648c:	d143      	bne.n	8006516 <_malloc_r+0xd6>
 800648e:	2c00      	cmp	r4, #0
 8006490:	d04b      	beq.n	800652a <_malloc_r+0xea>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	4639      	mov	r1, r7
 8006496:	4630      	mov	r0, r6
 8006498:	eb04 0903 	add.w	r9, r4, r3
 800649c:	f001 ff2e 	bl	80082fc <_sbrk_r>
 80064a0:	4581      	cmp	r9, r0
 80064a2:	d142      	bne.n	800652a <_malloc_r+0xea>
 80064a4:	6821      	ldr	r1, [r4, #0]
 80064a6:	1a6d      	subs	r5, r5, r1
 80064a8:	4629      	mov	r1, r5
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7ff ffa6 	bl	80063fc <sbrk_aligned>
 80064b0:	3001      	adds	r0, #1
 80064b2:	d03a      	beq.n	800652a <_malloc_r+0xea>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	442b      	add	r3, r5
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	f8d8 3000 	ldr.w	r3, [r8]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	bb62      	cbnz	r2, 800651c <_malloc_r+0xdc>
 80064c2:	f8c8 7000 	str.w	r7, [r8]
 80064c6:	e00f      	b.n	80064e8 <_malloc_r+0xa8>
 80064c8:	6822      	ldr	r2, [r4, #0]
 80064ca:	1b52      	subs	r2, r2, r5
 80064cc:	d420      	bmi.n	8006510 <_malloc_r+0xd0>
 80064ce:	2a0b      	cmp	r2, #11
 80064d0:	d917      	bls.n	8006502 <_malloc_r+0xc2>
 80064d2:	1961      	adds	r1, r4, r5
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	6025      	str	r5, [r4, #0]
 80064d8:	bf18      	it	ne
 80064da:	6059      	strne	r1, [r3, #4]
 80064dc:	6863      	ldr	r3, [r4, #4]
 80064de:	bf08      	it	eq
 80064e0:	f8c8 1000 	streq.w	r1, [r8]
 80064e4:	5162      	str	r2, [r4, r5]
 80064e6:	604b      	str	r3, [r1, #4]
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 f82f 	bl	800654c <__malloc_unlock>
 80064ee:	f104 000b 	add.w	r0, r4, #11
 80064f2:	1d23      	adds	r3, r4, #4
 80064f4:	f020 0007 	bic.w	r0, r0, #7
 80064f8:	1ac2      	subs	r2, r0, r3
 80064fa:	bf1c      	itt	ne
 80064fc:	1a1b      	subne	r3, r3, r0
 80064fe:	50a3      	strne	r3, [r4, r2]
 8006500:	e7af      	b.n	8006462 <_malloc_r+0x22>
 8006502:	6862      	ldr	r2, [r4, #4]
 8006504:	42a3      	cmp	r3, r4
 8006506:	bf0c      	ite	eq
 8006508:	f8c8 2000 	streq.w	r2, [r8]
 800650c:	605a      	strne	r2, [r3, #4]
 800650e:	e7eb      	b.n	80064e8 <_malloc_r+0xa8>
 8006510:	4623      	mov	r3, r4
 8006512:	6864      	ldr	r4, [r4, #4]
 8006514:	e7ae      	b.n	8006474 <_malloc_r+0x34>
 8006516:	463c      	mov	r4, r7
 8006518:	687f      	ldr	r7, [r7, #4]
 800651a:	e7b6      	b.n	800648a <_malloc_r+0x4a>
 800651c:	461a      	mov	r2, r3
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	42a3      	cmp	r3, r4
 8006522:	d1fb      	bne.n	800651c <_malloc_r+0xdc>
 8006524:	2300      	movs	r3, #0
 8006526:	6053      	str	r3, [r2, #4]
 8006528:	e7de      	b.n	80064e8 <_malloc_r+0xa8>
 800652a:	230c      	movs	r3, #12
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	4630      	mov	r0, r6
 8006530:	f000 f80c 	bl	800654c <__malloc_unlock>
 8006534:	e794      	b.n	8006460 <_malloc_r+0x20>
 8006536:	6005      	str	r5, [r0, #0]
 8006538:	e7d6      	b.n	80064e8 <_malloc_r+0xa8>
 800653a:	bf00      	nop
 800653c:	200006a0 	.word	0x200006a0

08006540 <__malloc_lock>:
 8006540:	4801      	ldr	r0, [pc, #4]	@ (8006548 <__malloc_lock+0x8>)
 8006542:	f7ff b896 	b.w	8005672 <__retarget_lock_acquire_recursive>
 8006546:	bf00      	nop
 8006548:	20000698 	.word	0x20000698

0800654c <__malloc_unlock>:
 800654c:	4801      	ldr	r0, [pc, #4]	@ (8006554 <__malloc_unlock+0x8>)
 800654e:	f7ff b891 	b.w	8005674 <__retarget_lock_release_recursive>
 8006552:	bf00      	nop
 8006554:	20000698 	.word	0x20000698

08006558 <_Balloc>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	69c6      	ldr	r6, [r0, #28]
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	b976      	cbnz	r6, 8006580 <_Balloc+0x28>
 8006562:	2010      	movs	r0, #16
 8006564:	f7ff ff42 	bl	80063ec <malloc>
 8006568:	4602      	mov	r2, r0
 800656a:	61e0      	str	r0, [r4, #28]
 800656c:	b920      	cbnz	r0, 8006578 <_Balloc+0x20>
 800656e:	4b18      	ldr	r3, [pc, #96]	@ (80065d0 <_Balloc+0x78>)
 8006570:	4818      	ldr	r0, [pc, #96]	@ (80065d4 <_Balloc+0x7c>)
 8006572:	216b      	movs	r1, #107	@ 0x6b
 8006574:	f7ff f886 	bl	8005684 <__assert_func>
 8006578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800657c:	6006      	str	r6, [r0, #0]
 800657e:	60c6      	str	r6, [r0, #12]
 8006580:	69e6      	ldr	r6, [r4, #28]
 8006582:	68f3      	ldr	r3, [r6, #12]
 8006584:	b183      	cbz	r3, 80065a8 <_Balloc+0x50>
 8006586:	69e3      	ldr	r3, [r4, #28]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800658e:	b9b8      	cbnz	r0, 80065c0 <_Balloc+0x68>
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f605 	lsl.w	r6, r1, r5
 8006596:	1d72      	adds	r2, r6, #5
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	4620      	mov	r0, r4
 800659c:	f001 fedb 	bl	8008356 <_calloc_r>
 80065a0:	b160      	cbz	r0, 80065bc <_Balloc+0x64>
 80065a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065a6:	e00e      	b.n	80065c6 <_Balloc+0x6e>
 80065a8:	2221      	movs	r2, #33	@ 0x21
 80065aa:	2104      	movs	r1, #4
 80065ac:	4620      	mov	r0, r4
 80065ae:	f001 fed2 	bl	8008356 <_calloc_r>
 80065b2:	69e3      	ldr	r3, [r4, #28]
 80065b4:	60f0      	str	r0, [r6, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e4      	bne.n	8006586 <_Balloc+0x2e>
 80065bc:	2000      	movs	r0, #0
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	6802      	ldr	r2, [r0, #0]
 80065c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065c6:	2300      	movs	r3, #0
 80065c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065cc:	e7f7      	b.n	80065be <_Balloc+0x66>
 80065ce:	bf00      	nop
 80065d0:	080092ea 	.word	0x080092ea
 80065d4:	0800940d 	.word	0x0800940d

080065d8 <_Bfree>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	69c6      	ldr	r6, [r0, #28]
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	b976      	cbnz	r6, 8006600 <_Bfree+0x28>
 80065e2:	2010      	movs	r0, #16
 80065e4:	f7ff ff02 	bl	80063ec <malloc>
 80065e8:	4602      	mov	r2, r0
 80065ea:	61e8      	str	r0, [r5, #28]
 80065ec:	b920      	cbnz	r0, 80065f8 <_Bfree+0x20>
 80065ee:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <_Bfree+0x3c>)
 80065f0:	4809      	ldr	r0, [pc, #36]	@ (8006618 <_Bfree+0x40>)
 80065f2:	218f      	movs	r1, #143	@ 0x8f
 80065f4:	f7ff f846 	bl	8005684 <__assert_func>
 80065f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065fc:	6006      	str	r6, [r0, #0]
 80065fe:	60c6      	str	r6, [r0, #12]
 8006600:	b13c      	cbz	r4, 8006612 <_Bfree+0x3a>
 8006602:	69eb      	ldr	r3, [r5, #28]
 8006604:	6862      	ldr	r2, [r4, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800660c:	6021      	str	r1, [r4, #0]
 800660e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	080092ea 	.word	0x080092ea
 8006618:	0800940d 	.word	0x0800940d

0800661c <__multadd>:
 800661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006620:	690d      	ldr	r5, [r1, #16]
 8006622:	4607      	mov	r7, r0
 8006624:	460c      	mov	r4, r1
 8006626:	461e      	mov	r6, r3
 8006628:	f101 0c14 	add.w	ip, r1, #20
 800662c:	2000      	movs	r0, #0
 800662e:	f8dc 3000 	ldr.w	r3, [ip]
 8006632:	b299      	uxth	r1, r3
 8006634:	fb02 6101 	mla	r1, r2, r1, r6
 8006638:	0c1e      	lsrs	r6, r3, #16
 800663a:	0c0b      	lsrs	r3, r1, #16
 800663c:	fb02 3306 	mla	r3, r2, r6, r3
 8006640:	b289      	uxth	r1, r1
 8006642:	3001      	adds	r0, #1
 8006644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006648:	4285      	cmp	r5, r0
 800664a:	f84c 1b04 	str.w	r1, [ip], #4
 800664e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006652:	dcec      	bgt.n	800662e <__multadd+0x12>
 8006654:	b30e      	cbz	r6, 800669a <__multadd+0x7e>
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	42ab      	cmp	r3, r5
 800665a:	dc19      	bgt.n	8006690 <__multadd+0x74>
 800665c:	6861      	ldr	r1, [r4, #4]
 800665e:	4638      	mov	r0, r7
 8006660:	3101      	adds	r1, #1
 8006662:	f7ff ff79 	bl	8006558 <_Balloc>
 8006666:	4680      	mov	r8, r0
 8006668:	b928      	cbnz	r0, 8006676 <__multadd+0x5a>
 800666a:	4602      	mov	r2, r0
 800666c:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <__multadd+0x84>)
 800666e:	480d      	ldr	r0, [pc, #52]	@ (80066a4 <__multadd+0x88>)
 8006670:	21ba      	movs	r1, #186	@ 0xba
 8006672:	f7ff f807 	bl	8005684 <__assert_func>
 8006676:	6922      	ldr	r2, [r4, #16]
 8006678:	3202      	adds	r2, #2
 800667a:	f104 010c 	add.w	r1, r4, #12
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	300c      	adds	r0, #12
 8006682:	f001 fe4b 	bl	800831c <memcpy>
 8006686:	4621      	mov	r1, r4
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa5 	bl	80065d8 <_Bfree>
 800668e:	4644      	mov	r4, r8
 8006690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006694:	3501      	adds	r5, #1
 8006696:	615e      	str	r6, [r3, #20]
 8006698:	6125      	str	r5, [r4, #16]
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a0:	080093fc 	.word	0x080093fc
 80066a4:	0800940d 	.word	0x0800940d

080066a8 <__s2b>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	4615      	mov	r5, r2
 80066b0:	461f      	mov	r7, r3
 80066b2:	2209      	movs	r2, #9
 80066b4:	3308      	adds	r3, #8
 80066b6:	4606      	mov	r6, r0
 80066b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066bc:	2100      	movs	r1, #0
 80066be:	2201      	movs	r2, #1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	db09      	blt.n	80066d8 <__s2b+0x30>
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff ff47 	bl	8006558 <_Balloc>
 80066ca:	b940      	cbnz	r0, 80066de <__s2b+0x36>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b19      	ldr	r3, [pc, #100]	@ (8006734 <__s2b+0x8c>)
 80066d0:	4819      	ldr	r0, [pc, #100]	@ (8006738 <__s2b+0x90>)
 80066d2:	21d3      	movs	r1, #211	@ 0xd3
 80066d4:	f7fe ffd6 	bl	8005684 <__assert_func>
 80066d8:	0052      	lsls	r2, r2, #1
 80066da:	3101      	adds	r1, #1
 80066dc:	e7f0      	b.n	80066c0 <__s2b+0x18>
 80066de:	9b08      	ldr	r3, [sp, #32]
 80066e0:	6143      	str	r3, [r0, #20]
 80066e2:	2d09      	cmp	r5, #9
 80066e4:	f04f 0301 	mov.w	r3, #1
 80066e8:	6103      	str	r3, [r0, #16]
 80066ea:	dd16      	ble.n	800671a <__s2b+0x72>
 80066ec:	f104 0909 	add.w	r9, r4, #9
 80066f0:	46c8      	mov	r8, r9
 80066f2:	442c      	add	r4, r5
 80066f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066f8:	4601      	mov	r1, r0
 80066fa:	3b30      	subs	r3, #48	@ 0x30
 80066fc:	220a      	movs	r2, #10
 80066fe:	4630      	mov	r0, r6
 8006700:	f7ff ff8c 	bl	800661c <__multadd>
 8006704:	45a0      	cmp	r8, r4
 8006706:	d1f5      	bne.n	80066f4 <__s2b+0x4c>
 8006708:	f1a5 0408 	sub.w	r4, r5, #8
 800670c:	444c      	add	r4, r9
 800670e:	1b2d      	subs	r5, r5, r4
 8006710:	1963      	adds	r3, r4, r5
 8006712:	42bb      	cmp	r3, r7
 8006714:	db04      	blt.n	8006720 <__s2b+0x78>
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671a:	340a      	adds	r4, #10
 800671c:	2509      	movs	r5, #9
 800671e:	e7f6      	b.n	800670e <__s2b+0x66>
 8006720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006724:	4601      	mov	r1, r0
 8006726:	3b30      	subs	r3, #48	@ 0x30
 8006728:	220a      	movs	r2, #10
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ff76 	bl	800661c <__multadd>
 8006730:	e7ee      	b.n	8006710 <__s2b+0x68>
 8006732:	bf00      	nop
 8006734:	080093fc 	.word	0x080093fc
 8006738:	0800940d 	.word	0x0800940d

0800673c <__hi0bits>:
 800673c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006740:	4603      	mov	r3, r0
 8006742:	bf36      	itet	cc
 8006744:	0403      	lslcc	r3, r0, #16
 8006746:	2000      	movcs	r0, #0
 8006748:	2010      	movcc	r0, #16
 800674a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800674e:	bf3c      	itt	cc
 8006750:	021b      	lslcc	r3, r3, #8
 8006752:	3008      	addcc	r0, #8
 8006754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006758:	bf3c      	itt	cc
 800675a:	011b      	lslcc	r3, r3, #4
 800675c:	3004      	addcc	r0, #4
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006762:	bf3c      	itt	cc
 8006764:	009b      	lslcc	r3, r3, #2
 8006766:	3002      	addcc	r0, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	db05      	blt.n	8006778 <__hi0bits+0x3c>
 800676c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006770:	f100 0001 	add.w	r0, r0, #1
 8006774:	bf08      	it	eq
 8006776:	2020      	moveq	r0, #32
 8006778:	4770      	bx	lr

0800677a <__lo0bits>:
 800677a:	6803      	ldr	r3, [r0, #0]
 800677c:	4602      	mov	r2, r0
 800677e:	f013 0007 	ands.w	r0, r3, #7
 8006782:	d00b      	beq.n	800679c <__lo0bits+0x22>
 8006784:	07d9      	lsls	r1, r3, #31
 8006786:	d421      	bmi.n	80067cc <__lo0bits+0x52>
 8006788:	0798      	lsls	r0, r3, #30
 800678a:	bf49      	itett	mi
 800678c:	085b      	lsrmi	r3, r3, #1
 800678e:	089b      	lsrpl	r3, r3, #2
 8006790:	2001      	movmi	r0, #1
 8006792:	6013      	strmi	r3, [r2, #0]
 8006794:	bf5c      	itt	pl
 8006796:	6013      	strpl	r3, [r2, #0]
 8006798:	2002      	movpl	r0, #2
 800679a:	4770      	bx	lr
 800679c:	b299      	uxth	r1, r3
 800679e:	b909      	cbnz	r1, 80067a4 <__lo0bits+0x2a>
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	2010      	movs	r0, #16
 80067a4:	b2d9      	uxtb	r1, r3
 80067a6:	b909      	cbnz	r1, 80067ac <__lo0bits+0x32>
 80067a8:	3008      	adds	r0, #8
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	0719      	lsls	r1, r3, #28
 80067ae:	bf04      	itt	eq
 80067b0:	091b      	lsreq	r3, r3, #4
 80067b2:	3004      	addeq	r0, #4
 80067b4:	0799      	lsls	r1, r3, #30
 80067b6:	bf04      	itt	eq
 80067b8:	089b      	lsreq	r3, r3, #2
 80067ba:	3002      	addeq	r0, #2
 80067bc:	07d9      	lsls	r1, r3, #31
 80067be:	d403      	bmi.n	80067c8 <__lo0bits+0x4e>
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	f100 0001 	add.w	r0, r0, #1
 80067c6:	d003      	beq.n	80067d0 <__lo0bits+0x56>
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4770      	bx	lr
 80067cc:	2000      	movs	r0, #0
 80067ce:	4770      	bx	lr
 80067d0:	2020      	movs	r0, #32
 80067d2:	4770      	bx	lr

080067d4 <__i2b>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	460c      	mov	r4, r1
 80067d8:	2101      	movs	r1, #1
 80067da:	f7ff febd 	bl	8006558 <_Balloc>
 80067de:	4602      	mov	r2, r0
 80067e0:	b928      	cbnz	r0, 80067ee <__i2b+0x1a>
 80067e2:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <__i2b+0x24>)
 80067e4:	4805      	ldr	r0, [pc, #20]	@ (80067fc <__i2b+0x28>)
 80067e6:	f240 1145 	movw	r1, #325	@ 0x145
 80067ea:	f7fe ff4b 	bl	8005684 <__assert_func>
 80067ee:	2301      	movs	r3, #1
 80067f0:	6144      	str	r4, [r0, #20]
 80067f2:	6103      	str	r3, [r0, #16]
 80067f4:	bd10      	pop	{r4, pc}
 80067f6:	bf00      	nop
 80067f8:	080093fc 	.word	0x080093fc
 80067fc:	0800940d 	.word	0x0800940d

08006800 <__multiply>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4614      	mov	r4, r2
 8006806:	690a      	ldr	r2, [r1, #16]
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	429a      	cmp	r2, r3
 800680c:	bfa8      	it	ge
 800680e:	4623      	movge	r3, r4
 8006810:	460f      	mov	r7, r1
 8006812:	bfa4      	itt	ge
 8006814:	460c      	movge	r4, r1
 8006816:	461f      	movge	r7, r3
 8006818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800681c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	6861      	ldr	r1, [r4, #4]
 8006824:	eb0a 0609 	add.w	r6, sl, r9
 8006828:	42b3      	cmp	r3, r6
 800682a:	b085      	sub	sp, #20
 800682c:	bfb8      	it	lt
 800682e:	3101      	addlt	r1, #1
 8006830:	f7ff fe92 	bl	8006558 <_Balloc>
 8006834:	b930      	cbnz	r0, 8006844 <__multiply+0x44>
 8006836:	4602      	mov	r2, r0
 8006838:	4b44      	ldr	r3, [pc, #272]	@ (800694c <__multiply+0x14c>)
 800683a:	4845      	ldr	r0, [pc, #276]	@ (8006950 <__multiply+0x150>)
 800683c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006840:	f7fe ff20 	bl	8005684 <__assert_func>
 8006844:	f100 0514 	add.w	r5, r0, #20
 8006848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800684c:	462b      	mov	r3, r5
 800684e:	2200      	movs	r2, #0
 8006850:	4543      	cmp	r3, r8
 8006852:	d321      	bcc.n	8006898 <__multiply+0x98>
 8006854:	f107 0114 	add.w	r1, r7, #20
 8006858:	f104 0214 	add.w	r2, r4, #20
 800685c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	1b13      	subs	r3, r2, r4
 8006868:	3b15      	subs	r3, #21
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	3304      	adds	r3, #4
 8006870:	f104 0715 	add.w	r7, r4, #21
 8006874:	42ba      	cmp	r2, r7
 8006876:	bf38      	it	cc
 8006878:	2304      	movcc	r3, #4
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	9b02      	ldr	r3, [sp, #8]
 800687e:	9103      	str	r1, [sp, #12]
 8006880:	428b      	cmp	r3, r1
 8006882:	d80c      	bhi.n	800689e <__multiply+0x9e>
 8006884:	2e00      	cmp	r6, #0
 8006886:	dd03      	ble.n	8006890 <__multiply+0x90>
 8006888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800688c:	2b00      	cmp	r3, #0
 800688e:	d05b      	beq.n	8006948 <__multiply+0x148>
 8006890:	6106      	str	r6, [r0, #16]
 8006892:	b005      	add	sp, #20
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	f843 2b04 	str.w	r2, [r3], #4
 800689c:	e7d8      	b.n	8006850 <__multiply+0x50>
 800689e:	f8b1 a000 	ldrh.w	sl, [r1]
 80068a2:	f1ba 0f00 	cmp.w	sl, #0
 80068a6:	d024      	beq.n	80068f2 <__multiply+0xf2>
 80068a8:	f104 0e14 	add.w	lr, r4, #20
 80068ac:	46a9      	mov	r9, r5
 80068ae:	f04f 0c00 	mov.w	ip, #0
 80068b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068b6:	f8d9 3000 	ldr.w	r3, [r9]
 80068ba:	fa1f fb87 	uxth.w	fp, r7
 80068be:	b29b      	uxth	r3, r3
 80068c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80068c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80068c8:	f8d9 7000 	ldr.w	r7, [r9]
 80068cc:	4463      	add	r3, ip
 80068ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80068d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068e0:	4572      	cmp	r2, lr
 80068e2:	f849 3b04 	str.w	r3, [r9], #4
 80068e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068ea:	d8e2      	bhi.n	80068b2 <__multiply+0xb2>
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	f845 c003 	str.w	ip, [r5, r3]
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80068f8:	3104      	adds	r1, #4
 80068fa:	f1b9 0f00 	cmp.w	r9, #0
 80068fe:	d021      	beq.n	8006944 <__multiply+0x144>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	f104 0c14 	add.w	ip, r4, #20
 8006906:	46ae      	mov	lr, r5
 8006908:	f04f 0a00 	mov.w	sl, #0
 800690c:	f8bc b000 	ldrh.w	fp, [ip]
 8006910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006914:	fb09 770b 	mla	r7, r9, fp, r7
 8006918:	4457      	add	r7, sl
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006920:	f84e 3b04 	str.w	r3, [lr], #4
 8006924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800692c:	f8be 3000 	ldrh.w	r3, [lr]
 8006930:	fb09 330a 	mla	r3, r9, sl, r3
 8006934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006938:	4562      	cmp	r2, ip
 800693a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800693e:	d8e5      	bhi.n	800690c <__multiply+0x10c>
 8006940:	9f01      	ldr	r7, [sp, #4]
 8006942:	51eb      	str	r3, [r5, r7]
 8006944:	3504      	adds	r5, #4
 8006946:	e799      	b.n	800687c <__multiply+0x7c>
 8006948:	3e01      	subs	r6, #1
 800694a:	e79b      	b.n	8006884 <__multiply+0x84>
 800694c:	080093fc 	.word	0x080093fc
 8006950:	0800940d 	.word	0x0800940d

08006954 <__pow5mult>:
 8006954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006958:	4615      	mov	r5, r2
 800695a:	f012 0203 	ands.w	r2, r2, #3
 800695e:	4607      	mov	r7, r0
 8006960:	460e      	mov	r6, r1
 8006962:	d007      	beq.n	8006974 <__pow5mult+0x20>
 8006964:	4c25      	ldr	r4, [pc, #148]	@ (80069fc <__pow5mult+0xa8>)
 8006966:	3a01      	subs	r2, #1
 8006968:	2300      	movs	r3, #0
 800696a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800696e:	f7ff fe55 	bl	800661c <__multadd>
 8006972:	4606      	mov	r6, r0
 8006974:	10ad      	asrs	r5, r5, #2
 8006976:	d03d      	beq.n	80069f4 <__pow5mult+0xa0>
 8006978:	69fc      	ldr	r4, [r7, #28]
 800697a:	b97c      	cbnz	r4, 800699c <__pow5mult+0x48>
 800697c:	2010      	movs	r0, #16
 800697e:	f7ff fd35 	bl	80063ec <malloc>
 8006982:	4602      	mov	r2, r0
 8006984:	61f8      	str	r0, [r7, #28]
 8006986:	b928      	cbnz	r0, 8006994 <__pow5mult+0x40>
 8006988:	4b1d      	ldr	r3, [pc, #116]	@ (8006a00 <__pow5mult+0xac>)
 800698a:	481e      	ldr	r0, [pc, #120]	@ (8006a04 <__pow5mult+0xb0>)
 800698c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006990:	f7fe fe78 	bl	8005684 <__assert_func>
 8006994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006998:	6004      	str	r4, [r0, #0]
 800699a:	60c4      	str	r4, [r0, #12]
 800699c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80069a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069a4:	b94c      	cbnz	r4, 80069ba <__pow5mult+0x66>
 80069a6:	f240 2171 	movw	r1, #625	@ 0x271
 80069aa:	4638      	mov	r0, r7
 80069ac:	f7ff ff12 	bl	80067d4 <__i2b>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b6:	4604      	mov	r4, r0
 80069b8:	6003      	str	r3, [r0, #0]
 80069ba:	f04f 0900 	mov.w	r9, #0
 80069be:	07eb      	lsls	r3, r5, #31
 80069c0:	d50a      	bpl.n	80069d8 <__pow5mult+0x84>
 80069c2:	4631      	mov	r1, r6
 80069c4:	4622      	mov	r2, r4
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7ff ff1a 	bl	8006800 <__multiply>
 80069cc:	4631      	mov	r1, r6
 80069ce:	4680      	mov	r8, r0
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff fe01 	bl	80065d8 <_Bfree>
 80069d6:	4646      	mov	r6, r8
 80069d8:	106d      	asrs	r5, r5, #1
 80069da:	d00b      	beq.n	80069f4 <__pow5mult+0xa0>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	b938      	cbnz	r0, 80069f0 <__pow5mult+0x9c>
 80069e0:	4622      	mov	r2, r4
 80069e2:	4621      	mov	r1, r4
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ff0b 	bl	8006800 <__multiply>
 80069ea:	6020      	str	r0, [r4, #0]
 80069ec:	f8c0 9000 	str.w	r9, [r0]
 80069f0:	4604      	mov	r4, r0
 80069f2:	e7e4      	b.n	80069be <__pow5mult+0x6a>
 80069f4:	4630      	mov	r0, r6
 80069f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069fa:	bf00      	nop
 80069fc:	08009468 	.word	0x08009468
 8006a00:	080092ea 	.word	0x080092ea
 8006a04:	0800940d 	.word	0x0800940d

08006a08 <__lshift>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	6849      	ldr	r1, [r1, #4]
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a16:	68a3      	ldr	r3, [r4, #8]
 8006a18:	4607      	mov	r7, r0
 8006a1a:	4691      	mov	r9, r2
 8006a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a20:	f108 0601 	add.w	r6, r8, #1
 8006a24:	42b3      	cmp	r3, r6
 8006a26:	db0b      	blt.n	8006a40 <__lshift+0x38>
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff fd95 	bl	8006558 <_Balloc>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b948      	cbnz	r0, 8006a46 <__lshift+0x3e>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4b28      	ldr	r3, [pc, #160]	@ (8006ad8 <__lshift+0xd0>)
 8006a36:	4829      	ldr	r0, [pc, #164]	@ (8006adc <__lshift+0xd4>)
 8006a38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a3c:	f7fe fe22 	bl	8005684 <__assert_func>
 8006a40:	3101      	adds	r1, #1
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	e7ee      	b.n	8006a24 <__lshift+0x1c>
 8006a46:	2300      	movs	r3, #0
 8006a48:	f100 0114 	add.w	r1, r0, #20
 8006a4c:	f100 0210 	add.w	r2, r0, #16
 8006a50:	4618      	mov	r0, r3
 8006a52:	4553      	cmp	r3, sl
 8006a54:	db33      	blt.n	8006abe <__lshift+0xb6>
 8006a56:	6920      	ldr	r0, [r4, #16]
 8006a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a5c:	f104 0314 	add.w	r3, r4, #20
 8006a60:	f019 091f 	ands.w	r9, r9, #31
 8006a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a6c:	d02b      	beq.n	8006ac6 <__lshift+0xbe>
 8006a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006a72:	468a      	mov	sl, r1
 8006a74:	2200      	movs	r2, #0
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	fa00 f009 	lsl.w	r0, r0, r9
 8006a7c:	4310      	orrs	r0, r2
 8006a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	459c      	cmp	ip, r3
 8006a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a8c:	d8f3      	bhi.n	8006a76 <__lshift+0x6e>
 8006a8e:	ebac 0304 	sub.w	r3, ip, r4
 8006a92:	3b15      	subs	r3, #21
 8006a94:	f023 0303 	bic.w	r3, r3, #3
 8006a98:	3304      	adds	r3, #4
 8006a9a:	f104 0015 	add.w	r0, r4, #21
 8006a9e:	4584      	cmp	ip, r0
 8006aa0:	bf38      	it	cc
 8006aa2:	2304      	movcc	r3, #4
 8006aa4:	50ca      	str	r2, [r1, r3]
 8006aa6:	b10a      	cbz	r2, 8006aac <__lshift+0xa4>
 8006aa8:	f108 0602 	add.w	r6, r8, #2
 8006aac:	3e01      	subs	r6, #1
 8006aae:	4638      	mov	r0, r7
 8006ab0:	612e      	str	r6, [r5, #16]
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	f7ff fd90 	bl	80065d8 <_Bfree>
 8006ab8:	4628      	mov	r0, r5
 8006aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	e7c5      	b.n	8006a52 <__lshift+0x4a>
 8006ac6:	3904      	subs	r1, #4
 8006ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ad0:	459c      	cmp	ip, r3
 8006ad2:	d8f9      	bhi.n	8006ac8 <__lshift+0xc0>
 8006ad4:	e7ea      	b.n	8006aac <__lshift+0xa4>
 8006ad6:	bf00      	nop
 8006ad8:	080093fc 	.word	0x080093fc
 8006adc:	0800940d 	.word	0x0800940d

08006ae0 <__mcmp>:
 8006ae0:	690a      	ldr	r2, [r1, #16]
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6900      	ldr	r0, [r0, #16]
 8006ae6:	1a80      	subs	r0, r0, r2
 8006ae8:	b530      	push	{r4, r5, lr}
 8006aea:	d10e      	bne.n	8006b0a <__mcmp+0x2a>
 8006aec:	3314      	adds	r3, #20
 8006aee:	3114      	adds	r1, #20
 8006af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b00:	4295      	cmp	r5, r2
 8006b02:	d003      	beq.n	8006b0c <__mcmp+0x2c>
 8006b04:	d205      	bcs.n	8006b12 <__mcmp+0x32>
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	bd30      	pop	{r4, r5, pc}
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d3f3      	bcc.n	8006af8 <__mcmp+0x18>
 8006b10:	e7fb      	b.n	8006b0a <__mcmp+0x2a>
 8006b12:	2001      	movs	r0, #1
 8006b14:	e7f9      	b.n	8006b0a <__mcmp+0x2a>
	...

08006b18 <__mdiff>:
 8006b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	4689      	mov	r9, r1
 8006b1e:	4606      	mov	r6, r0
 8006b20:	4611      	mov	r1, r2
 8006b22:	4648      	mov	r0, r9
 8006b24:	4614      	mov	r4, r2
 8006b26:	f7ff ffdb 	bl	8006ae0 <__mcmp>
 8006b2a:	1e05      	subs	r5, r0, #0
 8006b2c:	d112      	bne.n	8006b54 <__mdiff+0x3c>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff fd11 	bl	8006558 <_Balloc>
 8006b36:	4602      	mov	r2, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <__mdiff+0x2e>
 8006b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c38 <__mdiff+0x120>)
 8006b3c:	f240 2137 	movw	r1, #567	@ 0x237
 8006b40:	483e      	ldr	r0, [pc, #248]	@ (8006c3c <__mdiff+0x124>)
 8006b42:	f7fe fd9f 	bl	8005684 <__assert_func>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	b003      	add	sp, #12
 8006b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	bfbc      	itt	lt
 8006b56:	464b      	movlt	r3, r9
 8006b58:	46a1      	movlt	r9, r4
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b60:	bfba      	itte	lt
 8006b62:	461c      	movlt	r4, r3
 8006b64:	2501      	movlt	r5, #1
 8006b66:	2500      	movge	r5, #0
 8006b68:	f7ff fcf6 	bl	8006558 <_Balloc>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	b918      	cbnz	r0, 8006b78 <__mdiff+0x60>
 8006b70:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <__mdiff+0x120>)
 8006b72:	f240 2145 	movw	r1, #581	@ 0x245
 8006b76:	e7e3      	b.n	8006b40 <__mdiff+0x28>
 8006b78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b7c:	6926      	ldr	r6, [r4, #16]
 8006b7e:	60c5      	str	r5, [r0, #12]
 8006b80:	f109 0310 	add.w	r3, r9, #16
 8006b84:	f109 0514 	add.w	r5, r9, #20
 8006b88:	f104 0e14 	add.w	lr, r4, #20
 8006b8c:	f100 0b14 	add.w	fp, r0, #20
 8006b90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	46d9      	mov	r9, fp
 8006b9c:	f04f 0c00 	mov.w	ip, #0
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	fa1f f38a 	uxth.w	r3, sl
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	b283      	uxth	r3, r0
 8006bb4:	1acb      	subs	r3, r1, r3
 8006bb6:	0c00      	lsrs	r0, r0, #16
 8006bb8:	4463      	add	r3, ip
 8006bba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006bbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006bc8:	4576      	cmp	r6, lr
 8006bca:	f849 3b04 	str.w	r3, [r9], #4
 8006bce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bd2:	d8e5      	bhi.n	8006ba0 <__mdiff+0x88>
 8006bd4:	1b33      	subs	r3, r6, r4
 8006bd6:	3b15      	subs	r3, #21
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	3415      	adds	r4, #21
 8006bde:	3304      	adds	r3, #4
 8006be0:	42a6      	cmp	r6, r4
 8006be2:	bf38      	it	cc
 8006be4:	2304      	movcc	r3, #4
 8006be6:	441d      	add	r5, r3
 8006be8:	445b      	add	r3, fp
 8006bea:	461e      	mov	r6, r3
 8006bec:	462c      	mov	r4, r5
 8006bee:	4544      	cmp	r4, r8
 8006bf0:	d30e      	bcc.n	8006c10 <__mdiff+0xf8>
 8006bf2:	f108 0103 	add.w	r1, r8, #3
 8006bf6:	1b49      	subs	r1, r1, r5
 8006bf8:	f021 0103 	bic.w	r1, r1, #3
 8006bfc:	3d03      	subs	r5, #3
 8006bfe:	45a8      	cmp	r8, r5
 8006c00:	bf38      	it	cc
 8006c02:	2100      	movcc	r1, #0
 8006c04:	440b      	add	r3, r1
 8006c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c0a:	b191      	cbz	r1, 8006c32 <__mdiff+0x11a>
 8006c0c:	6117      	str	r7, [r2, #16]
 8006c0e:	e79d      	b.n	8006b4c <__mdiff+0x34>
 8006c10:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c14:	46e6      	mov	lr, ip
 8006c16:	0c08      	lsrs	r0, r1, #16
 8006c18:	fa1c fc81 	uxtah	ip, ip, r1
 8006c1c:	4471      	add	r1, lr
 8006c1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c22:	b289      	uxth	r1, r1
 8006c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c28:	f846 1b04 	str.w	r1, [r6], #4
 8006c2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c30:	e7dd      	b.n	8006bee <__mdiff+0xd6>
 8006c32:	3f01      	subs	r7, #1
 8006c34:	e7e7      	b.n	8006c06 <__mdiff+0xee>
 8006c36:	bf00      	nop
 8006c38:	080093fc 	.word	0x080093fc
 8006c3c:	0800940d 	.word	0x0800940d

08006c40 <__ulp>:
 8006c40:	b082      	sub	sp, #8
 8006c42:	ed8d 0b00 	vstr	d0, [sp]
 8006c46:	9a01      	ldr	r2, [sp, #4]
 8006c48:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <__ulp+0x48>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dc08      	bgt.n	8006c66 <__ulp+0x26>
 8006c54:	425b      	negs	r3, r3
 8006c56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006c5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c5e:	da04      	bge.n	8006c6a <__ulp+0x2a>
 8006c60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006c64:	4113      	asrs	r3, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	e008      	b.n	8006c7c <__ulp+0x3c>
 8006c6a:	f1a2 0314 	sub.w	r3, r2, #20
 8006c6e:	2b1e      	cmp	r3, #30
 8006c70:	bfda      	itte	le
 8006c72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006c76:	40da      	lsrle	r2, r3
 8006c78:	2201      	movgt	r2, #1
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	ec41 0b10 	vmov	d0, r0, r1
 8006c84:	b002      	add	sp, #8
 8006c86:	4770      	bx	lr
 8006c88:	7ff00000 	.word	0x7ff00000

08006c8c <__b2d>:
 8006c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c90:	6906      	ldr	r6, [r0, #16]
 8006c92:	f100 0814 	add.w	r8, r0, #20
 8006c96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006c9a:	1f37      	subs	r7, r6, #4
 8006c9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	f7ff fd4b 	bl	800673c <__hi0bits>
 8006ca6:	f1c0 0320 	rsb	r3, r0, #32
 8006caa:	280a      	cmp	r0, #10
 8006cac:	600b      	str	r3, [r1, #0]
 8006cae:	491b      	ldr	r1, [pc, #108]	@ (8006d1c <__b2d+0x90>)
 8006cb0:	dc15      	bgt.n	8006cde <__b2d+0x52>
 8006cb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006cb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8006cba:	45b8      	cmp	r8, r7
 8006cbc:	ea43 0501 	orr.w	r5, r3, r1
 8006cc0:	bf34      	ite	cc
 8006cc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006cc6:	2300      	movcs	r3, #0
 8006cc8:	3015      	adds	r0, #21
 8006cca:	fa02 f000 	lsl.w	r0, r2, r0
 8006cce:	fa23 f30c 	lsr.w	r3, r3, ip
 8006cd2:	4303      	orrs	r3, r0
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	ec45 4b10 	vmov	d0, r4, r5
 8006cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cde:	45b8      	cmp	r8, r7
 8006ce0:	bf3a      	itte	cc
 8006ce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006ce6:	f1a6 0708 	subcc.w	r7, r6, #8
 8006cea:	2300      	movcs	r3, #0
 8006cec:	380b      	subs	r0, #11
 8006cee:	d012      	beq.n	8006d16 <__b2d+0x8a>
 8006cf0:	f1c0 0120 	rsb	r1, r0, #32
 8006cf4:	fa23 f401 	lsr.w	r4, r3, r1
 8006cf8:	4082      	lsls	r2, r0
 8006cfa:	4322      	orrs	r2, r4
 8006cfc:	4547      	cmp	r7, r8
 8006cfe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006d02:	bf8c      	ite	hi
 8006d04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006d08:	2200      	movls	r2, #0
 8006d0a:	4083      	lsls	r3, r0
 8006d0c:	40ca      	lsrs	r2, r1
 8006d0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006d12:	4313      	orrs	r3, r2
 8006d14:	e7de      	b.n	8006cd4 <__b2d+0x48>
 8006d16:	ea42 0501 	orr.w	r5, r2, r1
 8006d1a:	e7db      	b.n	8006cd4 <__b2d+0x48>
 8006d1c:	3ff00000 	.word	0x3ff00000

08006d20 <__d2b>:
 8006d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	460f      	mov	r7, r1
 8006d26:	2101      	movs	r1, #1
 8006d28:	ec59 8b10 	vmov	r8, r9, d0
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	f7ff fc13 	bl	8006558 <_Balloc>
 8006d32:	4604      	mov	r4, r0
 8006d34:	b930      	cbnz	r0, 8006d44 <__d2b+0x24>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b23      	ldr	r3, [pc, #140]	@ (8006dc8 <__d2b+0xa8>)
 8006d3a:	4824      	ldr	r0, [pc, #144]	@ (8006dcc <__d2b+0xac>)
 8006d3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d40:	f7fe fca0 	bl	8005684 <__assert_func>
 8006d44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d4c:	b10d      	cbz	r5, 8006d52 <__d2b+0x32>
 8006d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	f1b8 0300 	subs.w	r3, r8, #0
 8006d58:	d023      	beq.n	8006da2 <__d2b+0x82>
 8006d5a:	4668      	mov	r0, sp
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	f7ff fd0c 	bl	800677a <__lo0bits>
 8006d62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d66:	b1d0      	cbz	r0, 8006d9e <__d2b+0x7e>
 8006d68:	f1c0 0320 	rsb	r3, r0, #32
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	430b      	orrs	r3, r1
 8006d72:	40c2      	lsrs	r2, r0
 8006d74:	6163      	str	r3, [r4, #20]
 8006d76:	9201      	str	r2, [sp, #4]
 8006d78:	9b01      	ldr	r3, [sp, #4]
 8006d7a:	61a3      	str	r3, [r4, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf0c      	ite	eq
 8006d80:	2201      	moveq	r2, #1
 8006d82:	2202      	movne	r2, #2
 8006d84:	6122      	str	r2, [r4, #16]
 8006d86:	b1a5      	cbz	r5, 8006db2 <__d2b+0x92>
 8006d88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d8c:	4405      	add	r5, r0
 8006d8e:	603d      	str	r5, [r7, #0]
 8006d90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d94:	6030      	str	r0, [r6, #0]
 8006d96:	4620      	mov	r0, r4
 8006d98:	b003      	add	sp, #12
 8006d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d9e:	6161      	str	r1, [r4, #20]
 8006da0:	e7ea      	b.n	8006d78 <__d2b+0x58>
 8006da2:	a801      	add	r0, sp, #4
 8006da4:	f7ff fce9 	bl	800677a <__lo0bits>
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	6163      	str	r3, [r4, #20]
 8006dac:	3020      	adds	r0, #32
 8006dae:	2201      	movs	r2, #1
 8006db0:	e7e8      	b.n	8006d84 <__d2b+0x64>
 8006db2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006db6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006dba:	6038      	str	r0, [r7, #0]
 8006dbc:	6918      	ldr	r0, [r3, #16]
 8006dbe:	f7ff fcbd 	bl	800673c <__hi0bits>
 8006dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dc6:	e7e5      	b.n	8006d94 <__d2b+0x74>
 8006dc8:	080093fc 	.word	0x080093fc
 8006dcc:	0800940d 	.word	0x0800940d

08006dd0 <__ratio>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	e9cd 1000 	strd	r1, r0, [sp]
 8006dda:	a902      	add	r1, sp, #8
 8006ddc:	f7ff ff56 	bl	8006c8c <__b2d>
 8006de0:	9800      	ldr	r0, [sp, #0]
 8006de2:	a903      	add	r1, sp, #12
 8006de4:	ec55 4b10 	vmov	r4, r5, d0
 8006de8:	f7ff ff50 	bl	8006c8c <__b2d>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	6919      	ldr	r1, [r3, #16]
 8006df0:	9b00      	ldr	r3, [sp, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	1ac9      	subs	r1, r1, r3
 8006df6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	ec5b ab10 	vmov	sl, fp, d0
 8006e00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bfce      	itee	gt
 8006e08:	462a      	movgt	r2, r5
 8006e0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e0e:	465a      	movle	r2, fp
 8006e10:	462f      	mov	r7, r5
 8006e12:	46d9      	mov	r9, fp
 8006e14:	bfcc      	ite	gt
 8006e16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006e1e:	464b      	mov	r3, r9
 8006e20:	4652      	mov	r2, sl
 8006e22:	4620      	mov	r0, r4
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fd11 	bl	800084c <__aeabi_ddiv>
 8006e2a:	ec41 0b10 	vmov	d0, r0, r1
 8006e2e:	b005      	add	sp, #20
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e34 <__copybits>:
 8006e34:	3901      	subs	r1, #1
 8006e36:	b570      	push	{r4, r5, r6, lr}
 8006e38:	1149      	asrs	r1, r1, #5
 8006e3a:	6914      	ldr	r4, [r2, #16]
 8006e3c:	3101      	adds	r1, #1
 8006e3e:	f102 0314 	add.w	r3, r2, #20
 8006e42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e4a:	1f05      	subs	r5, r0, #4
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d30c      	bcc.n	8006e6a <__copybits+0x36>
 8006e50:	1aa3      	subs	r3, r4, r2
 8006e52:	3b11      	subs	r3, #17
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	3211      	adds	r2, #17
 8006e5a:	42a2      	cmp	r2, r4
 8006e5c:	bf88      	it	hi
 8006e5e:	2300      	movhi	r3, #0
 8006e60:	4418      	add	r0, r3
 8006e62:	2300      	movs	r3, #0
 8006e64:	4288      	cmp	r0, r1
 8006e66:	d305      	bcc.n	8006e74 <__copybits+0x40>
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
 8006e6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e72:	e7eb      	b.n	8006e4c <__copybits+0x18>
 8006e74:	f840 3b04 	str.w	r3, [r0], #4
 8006e78:	e7f4      	b.n	8006e64 <__copybits+0x30>

08006e7a <__any_on>:
 8006e7a:	f100 0214 	add.w	r2, r0, #20
 8006e7e:	6900      	ldr	r0, [r0, #16]
 8006e80:	114b      	asrs	r3, r1, #5
 8006e82:	4298      	cmp	r0, r3
 8006e84:	b510      	push	{r4, lr}
 8006e86:	db11      	blt.n	8006eac <__any_on+0x32>
 8006e88:	dd0a      	ble.n	8006ea0 <__any_on+0x26>
 8006e8a:	f011 011f 	ands.w	r1, r1, #31
 8006e8e:	d007      	beq.n	8006ea0 <__any_on+0x26>
 8006e90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e94:	fa24 f001 	lsr.w	r0, r4, r1
 8006e98:	fa00 f101 	lsl.w	r1, r0, r1
 8006e9c:	428c      	cmp	r4, r1
 8006e9e:	d10b      	bne.n	8006eb8 <__any_on+0x3e>
 8006ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d803      	bhi.n	8006eb0 <__any_on+0x36>
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	bd10      	pop	{r4, pc}
 8006eac:	4603      	mov	r3, r0
 8006eae:	e7f7      	b.n	8006ea0 <__any_on+0x26>
 8006eb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d0f5      	beq.n	8006ea4 <__any_on+0x2a>
 8006eb8:	2001      	movs	r0, #1
 8006eba:	e7f6      	b.n	8006eaa <__any_on+0x30>

08006ebc <sulp>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	ec45 4b10 	vmov	d0, r4, r5
 8006ec6:	4616      	mov	r6, r2
 8006ec8:	f7ff feba 	bl	8006c40 <__ulp>
 8006ecc:	ec51 0b10 	vmov	r0, r1, d0
 8006ed0:	b17e      	cbz	r6, 8006ef2 <sulp+0x36>
 8006ed2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ed6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	dd09      	ble.n	8006ef2 <sulp+0x36>
 8006ede:	051b      	lsls	r3, r3, #20
 8006ee0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ee4:	2400      	movs	r4, #0
 8006ee6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006eea:	4622      	mov	r2, r4
 8006eec:	462b      	mov	r3, r5
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	ec41 0b10 	vmov	d0, r0, r1
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <_strtod_l>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	b09f      	sub	sp, #124	@ 0x7c
 8006efe:	460c      	mov	r4, r1
 8006f00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006f02:	2200      	movs	r2, #0
 8006f04:	921a      	str	r2, [sp, #104]	@ 0x68
 8006f06:	9005      	str	r0, [sp, #20]
 8006f08:	f04f 0a00 	mov.w	sl, #0
 8006f0c:	f04f 0b00 	mov.w	fp, #0
 8006f10:	460a      	mov	r2, r1
 8006f12:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f14:	7811      	ldrb	r1, [r2, #0]
 8006f16:	292b      	cmp	r1, #43	@ 0x2b
 8006f18:	d04a      	beq.n	8006fb0 <_strtod_l+0xb8>
 8006f1a:	d838      	bhi.n	8006f8e <_strtod_l+0x96>
 8006f1c:	290d      	cmp	r1, #13
 8006f1e:	d832      	bhi.n	8006f86 <_strtod_l+0x8e>
 8006f20:	2908      	cmp	r1, #8
 8006f22:	d832      	bhi.n	8006f8a <_strtod_l+0x92>
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d03b      	beq.n	8006fa0 <_strtod_l+0xa8>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006f2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006f2e:	782a      	ldrb	r2, [r5, #0]
 8006f30:	2a30      	cmp	r2, #48	@ 0x30
 8006f32:	f040 80b3 	bne.w	800709c <_strtod_l+0x1a4>
 8006f36:	786a      	ldrb	r2, [r5, #1]
 8006f38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f3c:	2a58      	cmp	r2, #88	@ 0x58
 8006f3e:	d16e      	bne.n	800701e <_strtod_l+0x126>
 8006f40:	9302      	str	r3, [sp, #8]
 8006f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4a8e      	ldr	r2, [pc, #568]	@ (8007184 <_strtod_l+0x28c>)
 8006f4c:	9805      	ldr	r0, [sp, #20]
 8006f4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f50:	a919      	add	r1, sp, #100	@ 0x64
 8006f52:	f001 fa7b 	bl	800844c <__gethex>
 8006f56:	f010 060f 	ands.w	r6, r0, #15
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	d005      	beq.n	8006f6a <_strtod_l+0x72>
 8006f5e:	2e06      	cmp	r6, #6
 8006f60:	d128      	bne.n	8006fb4 <_strtod_l+0xbc>
 8006f62:	3501      	adds	r5, #1
 8006f64:	2300      	movs	r3, #0
 8006f66:	9519      	str	r5, [sp, #100]	@ 0x64
 8006f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 858e 	bne.w	8007a8e <_strtod_l+0xb96>
 8006f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f74:	b1cb      	cbz	r3, 8006faa <_strtod_l+0xb2>
 8006f76:	4652      	mov	r2, sl
 8006f78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006f7c:	ec43 2b10 	vmov	d0, r2, r3
 8006f80:	b01f      	add	sp, #124	@ 0x7c
 8006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f86:	2920      	cmp	r1, #32
 8006f88:	d1ce      	bne.n	8006f28 <_strtod_l+0x30>
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	e7c1      	b.n	8006f12 <_strtod_l+0x1a>
 8006f8e:	292d      	cmp	r1, #45	@ 0x2d
 8006f90:	d1ca      	bne.n	8006f28 <_strtod_l+0x30>
 8006f92:	2101      	movs	r1, #1
 8006f94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f96:	1c51      	adds	r1, r2, #1
 8006f98:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f9a:	7852      	ldrb	r2, [r2, #1]
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	d1c5      	bne.n	8006f2c <_strtod_l+0x34>
 8006fa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 8570 	bne.w	8007a8a <_strtod_l+0xb92>
 8006faa:	4652      	mov	r2, sl
 8006fac:	465b      	mov	r3, fp
 8006fae:	e7e5      	b.n	8006f7c <_strtod_l+0x84>
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	e7ef      	b.n	8006f94 <_strtod_l+0x9c>
 8006fb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fb6:	b13a      	cbz	r2, 8006fc8 <_strtod_l+0xd0>
 8006fb8:	2135      	movs	r1, #53	@ 0x35
 8006fba:	a81c      	add	r0, sp, #112	@ 0x70
 8006fbc:	f7ff ff3a 	bl	8006e34 <__copybits>
 8006fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fc2:	9805      	ldr	r0, [sp, #20]
 8006fc4:	f7ff fb08 	bl	80065d8 <_Bfree>
 8006fc8:	3e01      	subs	r6, #1
 8006fca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006fcc:	2e04      	cmp	r6, #4
 8006fce:	d806      	bhi.n	8006fde <_strtod_l+0xe6>
 8006fd0:	e8df f006 	tbb	[pc, r6]
 8006fd4:	201d0314 	.word	0x201d0314
 8006fd8:	14          	.byte	0x14
 8006fd9:	00          	.byte	0x00
 8006fda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006fde:	05e1      	lsls	r1, r4, #23
 8006fe0:	bf48      	it	mi
 8006fe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fea:	0d1b      	lsrs	r3, r3, #20
 8006fec:	051b      	lsls	r3, r3, #20
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1bb      	bne.n	8006f6a <_strtod_l+0x72>
 8006ff2:	f7fe fb13 	bl	800561c <__errno>
 8006ff6:	2322      	movs	r3, #34	@ 0x22
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	e7b6      	b.n	8006f6a <_strtod_l+0x72>
 8006ffc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007000:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007004:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007008:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800700c:	e7e7      	b.n	8006fde <_strtod_l+0xe6>
 800700e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800718c <_strtod_l+0x294>
 8007012:	e7e4      	b.n	8006fde <_strtod_l+0xe6>
 8007014:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007018:	f04f 3aff 	mov.w	sl, #4294967295
 800701c:	e7df      	b.n	8006fde <_strtod_l+0xe6>
 800701e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	9219      	str	r2, [sp, #100]	@ 0x64
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b30      	cmp	r3, #48	@ 0x30
 8007028:	d0f9      	beq.n	800701e <_strtod_l+0x126>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d09d      	beq.n	8006f6a <_strtod_l+0x72>
 800702e:	2301      	movs	r3, #1
 8007030:	9309      	str	r3, [sp, #36]	@ 0x24
 8007032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007034:	930c      	str	r3, [sp, #48]	@ 0x30
 8007036:	2300      	movs	r3, #0
 8007038:	9308      	str	r3, [sp, #32]
 800703a:	930a      	str	r3, [sp, #40]	@ 0x28
 800703c:	461f      	mov	r7, r3
 800703e:	220a      	movs	r2, #10
 8007040:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007042:	7805      	ldrb	r5, [r0, #0]
 8007044:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007048:	b2d9      	uxtb	r1, r3
 800704a:	2909      	cmp	r1, #9
 800704c:	d928      	bls.n	80070a0 <_strtod_l+0x1a8>
 800704e:	494e      	ldr	r1, [pc, #312]	@ (8007188 <_strtod_l+0x290>)
 8007050:	2201      	movs	r2, #1
 8007052:	f001 f941 	bl	80082d8 <strncmp>
 8007056:	2800      	cmp	r0, #0
 8007058:	d032      	beq.n	80070c0 <_strtod_l+0x1c8>
 800705a:	2000      	movs	r0, #0
 800705c:	462a      	mov	r2, r5
 800705e:	4681      	mov	r9, r0
 8007060:	463d      	mov	r5, r7
 8007062:	4603      	mov	r3, r0
 8007064:	2a65      	cmp	r2, #101	@ 0x65
 8007066:	d001      	beq.n	800706c <_strtod_l+0x174>
 8007068:	2a45      	cmp	r2, #69	@ 0x45
 800706a:	d114      	bne.n	8007096 <_strtod_l+0x19e>
 800706c:	b91d      	cbnz	r5, 8007076 <_strtod_l+0x17e>
 800706e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007070:	4302      	orrs	r2, r0
 8007072:	d095      	beq.n	8006fa0 <_strtod_l+0xa8>
 8007074:	2500      	movs	r5, #0
 8007076:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007078:	1c62      	adds	r2, r4, #1
 800707a:	9219      	str	r2, [sp, #100]	@ 0x64
 800707c:	7862      	ldrb	r2, [r4, #1]
 800707e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007080:	d077      	beq.n	8007172 <_strtod_l+0x27a>
 8007082:	2a2d      	cmp	r2, #45	@ 0x2d
 8007084:	d07b      	beq.n	800717e <_strtod_l+0x286>
 8007086:	f04f 0c00 	mov.w	ip, #0
 800708a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800708e:	2909      	cmp	r1, #9
 8007090:	f240 8082 	bls.w	8007198 <_strtod_l+0x2a0>
 8007094:	9419      	str	r4, [sp, #100]	@ 0x64
 8007096:	f04f 0800 	mov.w	r8, #0
 800709a:	e0a2      	b.n	80071e2 <_strtod_l+0x2ea>
 800709c:	2300      	movs	r3, #0
 800709e:	e7c7      	b.n	8007030 <_strtod_l+0x138>
 80070a0:	2f08      	cmp	r7, #8
 80070a2:	bfd5      	itete	le
 80070a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80070a6:	9908      	ldrgt	r1, [sp, #32]
 80070a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80070ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80070b0:	f100 0001 	add.w	r0, r0, #1
 80070b4:	bfd4      	ite	le
 80070b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80070b8:	9308      	strgt	r3, [sp, #32]
 80070ba:	3701      	adds	r7, #1
 80070bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80070be:	e7bf      	b.n	8007040 <_strtod_l+0x148>
 80070c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80070c6:	785a      	ldrb	r2, [r3, #1]
 80070c8:	b37f      	cbz	r7, 800712a <_strtod_l+0x232>
 80070ca:	4681      	mov	r9, r0
 80070cc:	463d      	mov	r5, r7
 80070ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d912      	bls.n	80070fc <_strtod_l+0x204>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7c4      	b.n	8007064 <_strtod_l+0x16c>
 80070da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	9219      	str	r2, [sp, #100]	@ 0x64
 80070e0:	785a      	ldrb	r2, [r3, #1]
 80070e2:	3001      	adds	r0, #1
 80070e4:	2a30      	cmp	r2, #48	@ 0x30
 80070e6:	d0f8      	beq.n	80070da <_strtod_l+0x1e2>
 80070e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	f200 84d3 	bhi.w	8007a98 <_strtod_l+0xba0>
 80070f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80070f6:	4681      	mov	r9, r0
 80070f8:	2000      	movs	r0, #0
 80070fa:	4605      	mov	r5, r0
 80070fc:	3a30      	subs	r2, #48	@ 0x30
 80070fe:	f100 0301 	add.w	r3, r0, #1
 8007102:	d02a      	beq.n	800715a <_strtod_l+0x262>
 8007104:	4499      	add	r9, r3
 8007106:	eb00 0c05 	add.w	ip, r0, r5
 800710a:	462b      	mov	r3, r5
 800710c:	210a      	movs	r1, #10
 800710e:	4563      	cmp	r3, ip
 8007110:	d10d      	bne.n	800712e <_strtod_l+0x236>
 8007112:	1c69      	adds	r1, r5, #1
 8007114:	4401      	add	r1, r0
 8007116:	4428      	add	r0, r5
 8007118:	2808      	cmp	r0, #8
 800711a:	dc16      	bgt.n	800714a <_strtod_l+0x252>
 800711c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800711e:	230a      	movs	r3, #10
 8007120:	fb03 2300 	mla	r3, r3, r0, r2
 8007124:	930a      	str	r3, [sp, #40]	@ 0x28
 8007126:	2300      	movs	r3, #0
 8007128:	e018      	b.n	800715c <_strtod_l+0x264>
 800712a:	4638      	mov	r0, r7
 800712c:	e7da      	b.n	80070e4 <_strtod_l+0x1ec>
 800712e:	2b08      	cmp	r3, #8
 8007130:	f103 0301 	add.w	r3, r3, #1
 8007134:	dc03      	bgt.n	800713e <_strtod_l+0x246>
 8007136:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007138:	434e      	muls	r6, r1
 800713a:	960a      	str	r6, [sp, #40]	@ 0x28
 800713c:	e7e7      	b.n	800710e <_strtod_l+0x216>
 800713e:	2b10      	cmp	r3, #16
 8007140:	bfde      	ittt	le
 8007142:	9e08      	ldrle	r6, [sp, #32]
 8007144:	434e      	mulle	r6, r1
 8007146:	9608      	strle	r6, [sp, #32]
 8007148:	e7e1      	b.n	800710e <_strtod_l+0x216>
 800714a:	280f      	cmp	r0, #15
 800714c:	dceb      	bgt.n	8007126 <_strtod_l+0x22e>
 800714e:	9808      	ldr	r0, [sp, #32]
 8007150:	230a      	movs	r3, #10
 8007152:	fb03 2300 	mla	r3, r3, r0, r2
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	e7e5      	b.n	8007126 <_strtod_l+0x22e>
 800715a:	4629      	mov	r1, r5
 800715c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800715e:	1c50      	adds	r0, r2, #1
 8007160:	9019      	str	r0, [sp, #100]	@ 0x64
 8007162:	7852      	ldrb	r2, [r2, #1]
 8007164:	4618      	mov	r0, r3
 8007166:	460d      	mov	r5, r1
 8007168:	e7b1      	b.n	80070ce <_strtod_l+0x1d6>
 800716a:	f04f 0900 	mov.w	r9, #0
 800716e:	2301      	movs	r3, #1
 8007170:	e77d      	b.n	800706e <_strtod_l+0x176>
 8007172:	f04f 0c00 	mov.w	ip, #0
 8007176:	1ca2      	adds	r2, r4, #2
 8007178:	9219      	str	r2, [sp, #100]	@ 0x64
 800717a:	78a2      	ldrb	r2, [r4, #2]
 800717c:	e785      	b.n	800708a <_strtod_l+0x192>
 800717e:	f04f 0c01 	mov.w	ip, #1
 8007182:	e7f8      	b.n	8007176 <_strtod_l+0x27e>
 8007184:	08009580 	.word	0x08009580
 8007188:	08009568 	.word	0x08009568
 800718c:	7ff00000 	.word	0x7ff00000
 8007190:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007192:	1c51      	adds	r1, r2, #1
 8007194:	9119      	str	r1, [sp, #100]	@ 0x64
 8007196:	7852      	ldrb	r2, [r2, #1]
 8007198:	2a30      	cmp	r2, #48	@ 0x30
 800719a:	d0f9      	beq.n	8007190 <_strtod_l+0x298>
 800719c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80071a0:	2908      	cmp	r1, #8
 80071a2:	f63f af78 	bhi.w	8007096 <_strtod_l+0x19e>
 80071a6:	3a30      	subs	r2, #48	@ 0x30
 80071a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80071ae:	f04f 080a 	mov.w	r8, #10
 80071b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071b4:	1c56      	adds	r6, r2, #1
 80071b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80071b8:	7852      	ldrb	r2, [r2, #1]
 80071ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80071be:	f1be 0f09 	cmp.w	lr, #9
 80071c2:	d939      	bls.n	8007238 <_strtod_l+0x340>
 80071c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80071c6:	1a76      	subs	r6, r6, r1
 80071c8:	2e08      	cmp	r6, #8
 80071ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80071ce:	dc03      	bgt.n	80071d8 <_strtod_l+0x2e0>
 80071d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071d2:	4588      	cmp	r8, r1
 80071d4:	bfa8      	it	ge
 80071d6:	4688      	movge	r8, r1
 80071d8:	f1bc 0f00 	cmp.w	ip, #0
 80071dc:	d001      	beq.n	80071e2 <_strtod_l+0x2ea>
 80071de:	f1c8 0800 	rsb	r8, r8, #0
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	d14e      	bne.n	8007284 <_strtod_l+0x38c>
 80071e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071e8:	4308      	orrs	r0, r1
 80071ea:	f47f aebe 	bne.w	8006f6a <_strtod_l+0x72>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f47f aed6 	bne.w	8006fa0 <_strtod_l+0xa8>
 80071f4:	2a69      	cmp	r2, #105	@ 0x69
 80071f6:	d028      	beq.n	800724a <_strtod_l+0x352>
 80071f8:	dc25      	bgt.n	8007246 <_strtod_l+0x34e>
 80071fa:	2a49      	cmp	r2, #73	@ 0x49
 80071fc:	d025      	beq.n	800724a <_strtod_l+0x352>
 80071fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8007200:	f47f aece 	bne.w	8006fa0 <_strtod_l+0xa8>
 8007204:	499b      	ldr	r1, [pc, #620]	@ (8007474 <_strtod_l+0x57c>)
 8007206:	a819      	add	r0, sp, #100	@ 0x64
 8007208:	f001 fb42 	bl	8008890 <__match>
 800720c:	2800      	cmp	r0, #0
 800720e:	f43f aec7 	beq.w	8006fa0 <_strtod_l+0xa8>
 8007212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b28      	cmp	r3, #40	@ 0x28
 8007218:	d12e      	bne.n	8007278 <_strtod_l+0x380>
 800721a:	4997      	ldr	r1, [pc, #604]	@ (8007478 <_strtod_l+0x580>)
 800721c:	aa1c      	add	r2, sp, #112	@ 0x70
 800721e:	a819      	add	r0, sp, #100	@ 0x64
 8007220:	f001 fb4a 	bl	80088b8 <__hexnan>
 8007224:	2805      	cmp	r0, #5
 8007226:	d127      	bne.n	8007278 <_strtod_l+0x380>
 8007228:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800722a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800722e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007232:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007236:	e698      	b.n	8006f6a <_strtod_l+0x72>
 8007238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800723a:	fb08 2101 	mla	r1, r8, r1, r2
 800723e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007242:	920e      	str	r2, [sp, #56]	@ 0x38
 8007244:	e7b5      	b.n	80071b2 <_strtod_l+0x2ba>
 8007246:	2a6e      	cmp	r2, #110	@ 0x6e
 8007248:	e7da      	b.n	8007200 <_strtod_l+0x308>
 800724a:	498c      	ldr	r1, [pc, #560]	@ (800747c <_strtod_l+0x584>)
 800724c:	a819      	add	r0, sp, #100	@ 0x64
 800724e:	f001 fb1f 	bl	8008890 <__match>
 8007252:	2800      	cmp	r0, #0
 8007254:	f43f aea4 	beq.w	8006fa0 <_strtod_l+0xa8>
 8007258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725a:	4989      	ldr	r1, [pc, #548]	@ (8007480 <_strtod_l+0x588>)
 800725c:	3b01      	subs	r3, #1
 800725e:	a819      	add	r0, sp, #100	@ 0x64
 8007260:	9319      	str	r3, [sp, #100]	@ 0x64
 8007262:	f001 fb15 	bl	8008890 <__match>
 8007266:	b910      	cbnz	r0, 800726e <_strtod_l+0x376>
 8007268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800726a:	3301      	adds	r3, #1
 800726c:	9319      	str	r3, [sp, #100]	@ 0x64
 800726e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007490 <_strtod_l+0x598>
 8007272:	f04f 0a00 	mov.w	sl, #0
 8007276:	e678      	b.n	8006f6a <_strtod_l+0x72>
 8007278:	4882      	ldr	r0, [pc, #520]	@ (8007484 <_strtod_l+0x58c>)
 800727a:	f001 f85d 	bl	8008338 <nan>
 800727e:	ec5b ab10 	vmov	sl, fp, d0
 8007282:	e672      	b.n	8006f6a <_strtod_l+0x72>
 8007284:	eba8 0309 	sub.w	r3, r8, r9
 8007288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800728a:	9309      	str	r3, [sp, #36]	@ 0x24
 800728c:	2f00      	cmp	r7, #0
 800728e:	bf08      	it	eq
 8007290:	462f      	moveq	r7, r5
 8007292:	2d10      	cmp	r5, #16
 8007294:	462c      	mov	r4, r5
 8007296:	bfa8      	it	ge
 8007298:	2410      	movge	r4, #16
 800729a:	f7f9 f933 	bl	8000504 <__aeabi_ui2d>
 800729e:	2d09      	cmp	r5, #9
 80072a0:	4682      	mov	sl, r0
 80072a2:	468b      	mov	fp, r1
 80072a4:	dc13      	bgt.n	80072ce <_strtod_l+0x3d6>
 80072a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f43f ae5e 	beq.w	8006f6a <_strtod_l+0x72>
 80072ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b0:	dd78      	ble.n	80073a4 <_strtod_l+0x4ac>
 80072b2:	2b16      	cmp	r3, #22
 80072b4:	dc5f      	bgt.n	8007376 <_strtod_l+0x47e>
 80072b6:	4974      	ldr	r1, [pc, #464]	@ (8007488 <_strtod_l+0x590>)
 80072b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c0:	4652      	mov	r2, sl
 80072c2:	465b      	mov	r3, fp
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	4682      	mov	sl, r0
 80072ca:	468b      	mov	fp, r1
 80072cc:	e64d      	b.n	8006f6a <_strtod_l+0x72>
 80072ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007488 <_strtod_l+0x590>)
 80072d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	4682      	mov	sl, r0
 80072de:	9808      	ldr	r0, [sp, #32]
 80072e0:	468b      	mov	fp, r1
 80072e2:	f7f9 f90f 	bl	8000504 <__aeabi_ui2d>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4650      	mov	r0, sl
 80072ec:	4659      	mov	r1, fp
 80072ee:	f7f8 ffcd 	bl	800028c <__adddf3>
 80072f2:	2d0f      	cmp	r5, #15
 80072f4:	4682      	mov	sl, r0
 80072f6:	468b      	mov	fp, r1
 80072f8:	ddd5      	ble.n	80072a6 <_strtod_l+0x3ae>
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	1b2c      	subs	r4, r5, r4
 80072fe:	441c      	add	r4, r3
 8007300:	2c00      	cmp	r4, #0
 8007302:	f340 8096 	ble.w	8007432 <_strtod_l+0x53a>
 8007306:	f014 030f 	ands.w	r3, r4, #15
 800730a:	d00a      	beq.n	8007322 <_strtod_l+0x42a>
 800730c:	495e      	ldr	r1, [pc, #376]	@ (8007488 <_strtod_l+0x590>)
 800730e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800731a:	f7f9 f96d 	bl	80005f8 <__aeabi_dmul>
 800731e:	4682      	mov	sl, r0
 8007320:	468b      	mov	fp, r1
 8007322:	f034 040f 	bics.w	r4, r4, #15
 8007326:	d073      	beq.n	8007410 <_strtod_l+0x518>
 8007328:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800732c:	dd48      	ble.n	80073c0 <_strtod_l+0x4c8>
 800732e:	2400      	movs	r4, #0
 8007330:	46a0      	mov	r8, r4
 8007332:	940a      	str	r4, [sp, #40]	@ 0x28
 8007334:	46a1      	mov	r9, r4
 8007336:	9a05      	ldr	r2, [sp, #20]
 8007338:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007490 <_strtod_l+0x598>
 800733c:	2322      	movs	r3, #34	@ 0x22
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	f04f 0a00 	mov.w	sl, #0
 8007344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	f43f ae0f 	beq.w	8006f6a <_strtod_l+0x72>
 800734c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800734e:	9805      	ldr	r0, [sp, #20]
 8007350:	f7ff f942 	bl	80065d8 <_Bfree>
 8007354:	9805      	ldr	r0, [sp, #20]
 8007356:	4649      	mov	r1, r9
 8007358:	f7ff f93e 	bl	80065d8 <_Bfree>
 800735c:	9805      	ldr	r0, [sp, #20]
 800735e:	4641      	mov	r1, r8
 8007360:	f7ff f93a 	bl	80065d8 <_Bfree>
 8007364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007366:	9805      	ldr	r0, [sp, #20]
 8007368:	f7ff f936 	bl	80065d8 <_Bfree>
 800736c:	9805      	ldr	r0, [sp, #20]
 800736e:	4621      	mov	r1, r4
 8007370:	f7ff f932 	bl	80065d8 <_Bfree>
 8007374:	e5f9      	b.n	8006f6a <_strtod_l+0x72>
 8007376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007378:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800737c:	4293      	cmp	r3, r2
 800737e:	dbbc      	blt.n	80072fa <_strtod_l+0x402>
 8007380:	4c41      	ldr	r4, [pc, #260]	@ (8007488 <_strtod_l+0x590>)
 8007382:	f1c5 050f 	rsb	r5, r5, #15
 8007386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800738a:	4652      	mov	r2, sl
 800738c:	465b      	mov	r3, fp
 800738e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007392:	f7f9 f931 	bl	80005f8 <__aeabi_dmul>
 8007396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007398:	1b5d      	subs	r5, r3, r5
 800739a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800739e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073a2:	e78f      	b.n	80072c4 <_strtod_l+0x3cc>
 80073a4:	3316      	adds	r3, #22
 80073a6:	dba8      	blt.n	80072fa <_strtod_l+0x402>
 80073a8:	4b37      	ldr	r3, [pc, #220]	@ (8007488 <_strtod_l+0x590>)
 80073aa:	eba9 0808 	sub.w	r8, r9, r8
 80073ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80073b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80073b6:	4650      	mov	r0, sl
 80073b8:	4659      	mov	r1, fp
 80073ba:	f7f9 fa47 	bl	800084c <__aeabi_ddiv>
 80073be:	e783      	b.n	80072c8 <_strtod_l+0x3d0>
 80073c0:	4b32      	ldr	r3, [pc, #200]	@ (800748c <_strtod_l+0x594>)
 80073c2:	9308      	str	r3, [sp, #32]
 80073c4:	2300      	movs	r3, #0
 80073c6:	1124      	asrs	r4, r4, #4
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	461e      	mov	r6, r3
 80073ce:	2c01      	cmp	r4, #1
 80073d0:	dc21      	bgt.n	8007416 <_strtod_l+0x51e>
 80073d2:	b10b      	cbz	r3, 80073d8 <_strtod_l+0x4e0>
 80073d4:	4682      	mov	sl, r0
 80073d6:	468b      	mov	fp, r1
 80073d8:	492c      	ldr	r1, [pc, #176]	@ (800748c <_strtod_l+0x594>)
 80073da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80073de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80073e2:	4652      	mov	r2, sl
 80073e4:	465b      	mov	r3, fp
 80073e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ea:	f7f9 f905 	bl	80005f8 <__aeabi_dmul>
 80073ee:	4b28      	ldr	r3, [pc, #160]	@ (8007490 <_strtod_l+0x598>)
 80073f0:	460a      	mov	r2, r1
 80073f2:	400b      	ands	r3, r1
 80073f4:	4927      	ldr	r1, [pc, #156]	@ (8007494 <_strtod_l+0x59c>)
 80073f6:	428b      	cmp	r3, r1
 80073f8:	4682      	mov	sl, r0
 80073fa:	d898      	bhi.n	800732e <_strtod_l+0x436>
 80073fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007400:	428b      	cmp	r3, r1
 8007402:	bf86      	itte	hi
 8007404:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007498 <_strtod_l+0x5a0>
 8007408:	f04f 3aff 	movhi.w	sl, #4294967295
 800740c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007410:	2300      	movs	r3, #0
 8007412:	9308      	str	r3, [sp, #32]
 8007414:	e07a      	b.n	800750c <_strtod_l+0x614>
 8007416:	07e2      	lsls	r2, r4, #31
 8007418:	d505      	bpl.n	8007426 <_strtod_l+0x52e>
 800741a:	9b08      	ldr	r3, [sp, #32]
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f9 f8ea 	bl	80005f8 <__aeabi_dmul>
 8007424:	2301      	movs	r3, #1
 8007426:	9a08      	ldr	r2, [sp, #32]
 8007428:	3208      	adds	r2, #8
 800742a:	3601      	adds	r6, #1
 800742c:	1064      	asrs	r4, r4, #1
 800742e:	9208      	str	r2, [sp, #32]
 8007430:	e7cd      	b.n	80073ce <_strtod_l+0x4d6>
 8007432:	d0ed      	beq.n	8007410 <_strtod_l+0x518>
 8007434:	4264      	negs	r4, r4
 8007436:	f014 020f 	ands.w	r2, r4, #15
 800743a:	d00a      	beq.n	8007452 <_strtod_l+0x55a>
 800743c:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <_strtod_l+0x590>)
 800743e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007442:	4650      	mov	r0, sl
 8007444:	4659      	mov	r1, fp
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f9 f9ff 	bl	800084c <__aeabi_ddiv>
 800744e:	4682      	mov	sl, r0
 8007450:	468b      	mov	fp, r1
 8007452:	1124      	asrs	r4, r4, #4
 8007454:	d0dc      	beq.n	8007410 <_strtod_l+0x518>
 8007456:	2c1f      	cmp	r4, #31
 8007458:	dd20      	ble.n	800749c <_strtod_l+0x5a4>
 800745a:	2400      	movs	r4, #0
 800745c:	46a0      	mov	r8, r4
 800745e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007460:	46a1      	mov	r9, r4
 8007462:	9a05      	ldr	r2, [sp, #20]
 8007464:	2322      	movs	r3, #34	@ 0x22
 8007466:	f04f 0a00 	mov.w	sl, #0
 800746a:	f04f 0b00 	mov.w	fp, #0
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	e768      	b.n	8007344 <_strtod_l+0x44c>
 8007472:	bf00      	nop
 8007474:	080092be 	.word	0x080092be
 8007478:	0800956c 	.word	0x0800956c
 800747c:	080092b6 	.word	0x080092b6
 8007480:	0800939a 	.word	0x0800939a
 8007484:	08009396 	.word	0x08009396
 8007488:	080094a0 	.word	0x080094a0
 800748c:	08009478 	.word	0x08009478
 8007490:	7ff00000 	.word	0x7ff00000
 8007494:	7ca00000 	.word	0x7ca00000
 8007498:	7fefffff 	.word	0x7fefffff
 800749c:	f014 0310 	ands.w	r3, r4, #16
 80074a0:	bf18      	it	ne
 80074a2:	236a      	movne	r3, #106	@ 0x6a
 80074a4:	4ea9      	ldr	r6, [pc, #676]	@ (800774c <_strtod_l+0x854>)
 80074a6:	9308      	str	r3, [sp, #32]
 80074a8:	4650      	mov	r0, sl
 80074aa:	4659      	mov	r1, fp
 80074ac:	2300      	movs	r3, #0
 80074ae:	07e2      	lsls	r2, r4, #31
 80074b0:	d504      	bpl.n	80074bc <_strtod_l+0x5c4>
 80074b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074b6:	f7f9 f89f 	bl	80005f8 <__aeabi_dmul>
 80074ba:	2301      	movs	r3, #1
 80074bc:	1064      	asrs	r4, r4, #1
 80074be:	f106 0608 	add.w	r6, r6, #8
 80074c2:	d1f4      	bne.n	80074ae <_strtod_l+0x5b6>
 80074c4:	b10b      	cbz	r3, 80074ca <_strtod_l+0x5d2>
 80074c6:	4682      	mov	sl, r0
 80074c8:	468b      	mov	fp, r1
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	b1b3      	cbz	r3, 80074fc <_strtod_l+0x604>
 80074ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80074d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	4659      	mov	r1, fp
 80074da:	dd0f      	ble.n	80074fc <_strtod_l+0x604>
 80074dc:	2b1f      	cmp	r3, #31
 80074de:	dd55      	ble.n	800758c <_strtod_l+0x694>
 80074e0:	2b34      	cmp	r3, #52	@ 0x34
 80074e2:	bfde      	ittt	le
 80074e4:	f04f 33ff 	movle.w	r3, #4294967295
 80074e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80074ec:	4093      	lslle	r3, r2
 80074ee:	f04f 0a00 	mov.w	sl, #0
 80074f2:	bfcc      	ite	gt
 80074f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80074f8:	ea03 0b01 	andle.w	fp, r3, r1
 80074fc:	2200      	movs	r2, #0
 80074fe:	2300      	movs	r3, #0
 8007500:	4650      	mov	r0, sl
 8007502:	4659      	mov	r1, fp
 8007504:	f7f9 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007508:	2800      	cmp	r0, #0
 800750a:	d1a6      	bne.n	800745a <_strtod_l+0x562>
 800750c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007512:	9805      	ldr	r0, [sp, #20]
 8007514:	462b      	mov	r3, r5
 8007516:	463a      	mov	r2, r7
 8007518:	f7ff f8c6 	bl	80066a8 <__s2b>
 800751c:	900a      	str	r0, [sp, #40]	@ 0x28
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f af05 	beq.w	800732e <_strtod_l+0x436>
 8007524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007526:	2a00      	cmp	r2, #0
 8007528:	eba9 0308 	sub.w	r3, r9, r8
 800752c:	bfa8      	it	ge
 800752e:	2300      	movge	r3, #0
 8007530:	9312      	str	r3, [sp, #72]	@ 0x48
 8007532:	2400      	movs	r4, #0
 8007534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007538:	9316      	str	r3, [sp, #88]	@ 0x58
 800753a:	46a0      	mov	r8, r4
 800753c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800753e:	9805      	ldr	r0, [sp, #20]
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	f7ff f809 	bl	8006558 <_Balloc>
 8007546:	4681      	mov	r9, r0
 8007548:	2800      	cmp	r0, #0
 800754a:	f43f aef4 	beq.w	8007336 <_strtod_l+0x43e>
 800754e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	3202      	adds	r2, #2
 8007554:	f103 010c 	add.w	r1, r3, #12
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	300c      	adds	r0, #12
 800755c:	f000 fede 	bl	800831c <memcpy>
 8007560:	ec4b ab10 	vmov	d0, sl, fp
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	aa1c      	add	r2, sp, #112	@ 0x70
 8007568:	a91b      	add	r1, sp, #108	@ 0x6c
 800756a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800756e:	f7ff fbd7 	bl	8006d20 <__d2b>
 8007572:	901a      	str	r0, [sp, #104]	@ 0x68
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f aede 	beq.w	8007336 <_strtod_l+0x43e>
 800757a:	9805      	ldr	r0, [sp, #20]
 800757c:	2101      	movs	r1, #1
 800757e:	f7ff f929 	bl	80067d4 <__i2b>
 8007582:	4680      	mov	r8, r0
 8007584:	b948      	cbnz	r0, 800759a <_strtod_l+0x6a2>
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	e6d4      	b.n	8007336 <_strtod_l+0x43e>
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	ea03 0a0a 	and.w	sl, r3, sl
 8007598:	e7b0      	b.n	80074fc <_strtod_l+0x604>
 800759a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800759c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800759e:	2d00      	cmp	r5, #0
 80075a0:	bfab      	itete	ge
 80075a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80075a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80075a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80075a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80075aa:	bfac      	ite	ge
 80075ac:	18ef      	addge	r7, r5, r3
 80075ae:	1b5e      	sublt	r6, r3, r5
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	1aed      	subs	r5, r5, r3
 80075b4:	4415      	add	r5, r2
 80075b6:	4b66      	ldr	r3, [pc, #408]	@ (8007750 <_strtod_l+0x858>)
 80075b8:	3d01      	subs	r5, #1
 80075ba:	429d      	cmp	r5, r3
 80075bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80075c0:	da50      	bge.n	8007664 <_strtod_l+0x76c>
 80075c2:	1b5b      	subs	r3, r3, r5
 80075c4:	2b1f      	cmp	r3, #31
 80075c6:	eba2 0203 	sub.w	r2, r2, r3
 80075ca:	f04f 0101 	mov.w	r1, #1
 80075ce:	dc3d      	bgt.n	800764c <_strtod_l+0x754>
 80075d0:	fa01 f303 	lsl.w	r3, r1, r3
 80075d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075d6:	2300      	movs	r3, #0
 80075d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80075da:	18bd      	adds	r5, r7, r2
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	42af      	cmp	r7, r5
 80075e0:	4416      	add	r6, r2
 80075e2:	441e      	add	r6, r3
 80075e4:	463b      	mov	r3, r7
 80075e6:	bfa8      	it	ge
 80075e8:	462b      	movge	r3, r5
 80075ea:	42b3      	cmp	r3, r6
 80075ec:	bfa8      	it	ge
 80075ee:	4633      	movge	r3, r6
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfc2      	ittt	gt
 80075f4:	1aed      	subgt	r5, r5, r3
 80075f6:	1af6      	subgt	r6, r6, r3
 80075f8:	1aff      	subgt	r7, r7, r3
 80075fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd16      	ble.n	800762e <_strtod_l+0x736>
 8007600:	4641      	mov	r1, r8
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	461a      	mov	r2, r3
 8007606:	f7ff f9a5 	bl	8006954 <__pow5mult>
 800760a:	4680      	mov	r8, r0
 800760c:	2800      	cmp	r0, #0
 800760e:	d0ba      	beq.n	8007586 <_strtod_l+0x68e>
 8007610:	4601      	mov	r1, r0
 8007612:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007614:	9805      	ldr	r0, [sp, #20]
 8007616:	f7ff f8f3 	bl	8006800 <__multiply>
 800761a:	900e      	str	r0, [sp, #56]	@ 0x38
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f ae8a 	beq.w	8007336 <_strtod_l+0x43e>
 8007622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007624:	9805      	ldr	r0, [sp, #20]
 8007626:	f7fe ffd7 	bl	80065d8 <_Bfree>
 800762a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800762c:	931a      	str	r3, [sp, #104]	@ 0x68
 800762e:	2d00      	cmp	r5, #0
 8007630:	dc1d      	bgt.n	800766e <_strtod_l+0x776>
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd23      	ble.n	8007680 <_strtod_l+0x788>
 8007638:	4649      	mov	r1, r9
 800763a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800763c:	9805      	ldr	r0, [sp, #20]
 800763e:	f7ff f989 	bl	8006954 <__pow5mult>
 8007642:	4681      	mov	r9, r0
 8007644:	b9e0      	cbnz	r0, 8007680 <_strtod_l+0x788>
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	e674      	b.n	8007336 <_strtod_l+0x43e>
 800764c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007650:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007654:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007658:	35e2      	adds	r5, #226	@ 0xe2
 800765a:	fa01 f305 	lsl.w	r3, r1, r5
 800765e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007660:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007662:	e7ba      	b.n	80075da <_strtod_l+0x6e2>
 8007664:	2300      	movs	r3, #0
 8007666:	9310      	str	r3, [sp, #64]	@ 0x40
 8007668:	2301      	movs	r3, #1
 800766a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800766c:	e7b5      	b.n	80075da <_strtod_l+0x6e2>
 800766e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007670:	9805      	ldr	r0, [sp, #20]
 8007672:	462a      	mov	r2, r5
 8007674:	f7ff f9c8 	bl	8006a08 <__lshift>
 8007678:	901a      	str	r0, [sp, #104]	@ 0x68
 800767a:	2800      	cmp	r0, #0
 800767c:	d1d9      	bne.n	8007632 <_strtod_l+0x73a>
 800767e:	e65a      	b.n	8007336 <_strtod_l+0x43e>
 8007680:	2e00      	cmp	r6, #0
 8007682:	dd07      	ble.n	8007694 <_strtod_l+0x79c>
 8007684:	4649      	mov	r1, r9
 8007686:	9805      	ldr	r0, [sp, #20]
 8007688:	4632      	mov	r2, r6
 800768a:	f7ff f9bd 	bl	8006a08 <__lshift>
 800768e:	4681      	mov	r9, r0
 8007690:	2800      	cmp	r0, #0
 8007692:	d0d8      	beq.n	8007646 <_strtod_l+0x74e>
 8007694:	2f00      	cmp	r7, #0
 8007696:	dd08      	ble.n	80076aa <_strtod_l+0x7b2>
 8007698:	4641      	mov	r1, r8
 800769a:	9805      	ldr	r0, [sp, #20]
 800769c:	463a      	mov	r2, r7
 800769e:	f7ff f9b3 	bl	8006a08 <__lshift>
 80076a2:	4680      	mov	r8, r0
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f43f ae46 	beq.w	8007336 <_strtod_l+0x43e>
 80076aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	464a      	mov	r2, r9
 80076b0:	f7ff fa32 	bl	8006b18 <__mdiff>
 80076b4:	4604      	mov	r4, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f43f ae3d 	beq.w	8007336 <_strtod_l+0x43e>
 80076bc:	68c3      	ldr	r3, [r0, #12]
 80076be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076c0:	2300      	movs	r3, #0
 80076c2:	60c3      	str	r3, [r0, #12]
 80076c4:	4641      	mov	r1, r8
 80076c6:	f7ff fa0b 	bl	8006ae0 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	da46      	bge.n	800775c <_strtod_l+0x864>
 80076ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076d0:	ea53 030a 	orrs.w	r3, r3, sl
 80076d4:	d16c      	bne.n	80077b0 <_strtod_l+0x8b8>
 80076d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d168      	bne.n	80077b0 <_strtod_l+0x8b8>
 80076de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076e2:	0d1b      	lsrs	r3, r3, #20
 80076e4:	051b      	lsls	r3, r3, #20
 80076e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076ea:	d961      	bls.n	80077b0 <_strtod_l+0x8b8>
 80076ec:	6963      	ldr	r3, [r4, #20]
 80076ee:	b913      	cbnz	r3, 80076f6 <_strtod_l+0x7fe>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	dd5c      	ble.n	80077b0 <_strtod_l+0x8b8>
 80076f6:	4621      	mov	r1, r4
 80076f8:	2201      	movs	r2, #1
 80076fa:	9805      	ldr	r0, [sp, #20]
 80076fc:	f7ff f984 	bl	8006a08 <__lshift>
 8007700:	4641      	mov	r1, r8
 8007702:	4604      	mov	r4, r0
 8007704:	f7ff f9ec 	bl	8006ae0 <__mcmp>
 8007708:	2800      	cmp	r0, #0
 800770a:	dd51      	ble.n	80077b0 <_strtod_l+0x8b8>
 800770c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007710:	9a08      	ldr	r2, [sp, #32]
 8007712:	0d1b      	lsrs	r3, r3, #20
 8007714:	051b      	lsls	r3, r3, #20
 8007716:	2a00      	cmp	r2, #0
 8007718:	d06b      	beq.n	80077f2 <_strtod_l+0x8fa>
 800771a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800771e:	d868      	bhi.n	80077f2 <_strtod_l+0x8fa>
 8007720:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007724:	f67f ae9d 	bls.w	8007462 <_strtod_l+0x56a>
 8007728:	4b0a      	ldr	r3, [pc, #40]	@ (8007754 <_strtod_l+0x85c>)
 800772a:	4650      	mov	r0, sl
 800772c:	4659      	mov	r1, fp
 800772e:	2200      	movs	r2, #0
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4b08      	ldr	r3, [pc, #32]	@ (8007758 <_strtod_l+0x860>)
 8007736:	400b      	ands	r3, r1
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f ae05 	bne.w	800734c <_strtod_l+0x454>
 8007742:	9a05      	ldr	r2, [sp, #20]
 8007744:	2322      	movs	r3, #34	@ 0x22
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e600      	b.n	800734c <_strtod_l+0x454>
 800774a:	bf00      	nop
 800774c:	08009598 	.word	0x08009598
 8007750:	fffffc02 	.word	0xfffffc02
 8007754:	39500000 	.word	0x39500000
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007760:	d165      	bne.n	800782e <_strtod_l+0x936>
 8007762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007768:	b35a      	cbz	r2, 80077c2 <_strtod_l+0x8ca>
 800776a:	4a9f      	ldr	r2, [pc, #636]	@ (80079e8 <_strtod_l+0xaf0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d12b      	bne.n	80077c8 <_strtod_l+0x8d0>
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	4651      	mov	r1, sl
 8007774:	b303      	cbz	r3, 80077b8 <_strtod_l+0x8c0>
 8007776:	4b9d      	ldr	r3, [pc, #628]	@ (80079ec <_strtod_l+0xaf4>)
 8007778:	465a      	mov	r2, fp
 800777a:	4013      	ands	r3, r2
 800777c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	d81b      	bhi.n	80077be <_strtod_l+0x8c6>
 8007786:	0d1b      	lsrs	r3, r3, #20
 8007788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	4299      	cmp	r1, r3
 8007792:	d119      	bne.n	80077c8 <_strtod_l+0x8d0>
 8007794:	4b96      	ldr	r3, [pc, #600]	@ (80079f0 <_strtod_l+0xaf8>)
 8007796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007798:	429a      	cmp	r2, r3
 800779a:	d102      	bne.n	80077a2 <_strtod_l+0x8aa>
 800779c:	3101      	adds	r1, #1
 800779e:	f43f adca 	beq.w	8007336 <_strtod_l+0x43e>
 80077a2:	4b92      	ldr	r3, [pc, #584]	@ (80079ec <_strtod_l+0xaf4>)
 80077a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077a6:	401a      	ands	r2, r3
 80077a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80077ac:	f04f 0a00 	mov.w	sl, #0
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1b8      	bne.n	8007728 <_strtod_l+0x830>
 80077b6:	e5c9      	b.n	800734c <_strtod_l+0x454>
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295
 80077bc:	e7e8      	b.n	8007790 <_strtod_l+0x898>
 80077be:	4613      	mov	r3, r2
 80077c0:	e7e6      	b.n	8007790 <_strtod_l+0x898>
 80077c2:	ea53 030a 	orrs.w	r3, r3, sl
 80077c6:	d0a1      	beq.n	800770c <_strtod_l+0x814>
 80077c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077ca:	b1db      	cbz	r3, 8007804 <_strtod_l+0x90c>
 80077cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ce:	4213      	tst	r3, r2
 80077d0:	d0ee      	beq.n	80077b0 <_strtod_l+0x8b8>
 80077d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d4:	9a08      	ldr	r2, [sp, #32]
 80077d6:	4650      	mov	r0, sl
 80077d8:	4659      	mov	r1, fp
 80077da:	b1bb      	cbz	r3, 800780c <_strtod_l+0x914>
 80077dc:	f7ff fb6e 	bl	8006ebc <sulp>
 80077e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077e4:	ec53 2b10 	vmov	r2, r3, d0
 80077e8:	f7f8 fd50 	bl	800028c <__adddf3>
 80077ec:	4682      	mov	sl, r0
 80077ee:	468b      	mov	fp, r1
 80077f0:	e7de      	b.n	80077b0 <_strtod_l+0x8b8>
 80077f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80077f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077fe:	f04f 3aff 	mov.w	sl, #4294967295
 8007802:	e7d5      	b.n	80077b0 <_strtod_l+0x8b8>
 8007804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007806:	ea13 0f0a 	tst.w	r3, sl
 800780a:	e7e1      	b.n	80077d0 <_strtod_l+0x8d8>
 800780c:	f7ff fb56 	bl	8006ebc <sulp>
 8007810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007814:	ec53 2b10 	vmov	r2, r3, d0
 8007818:	f7f8 fd36 	bl	8000288 <__aeabi_dsub>
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	f7f9 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0c1      	beq.n	80077b0 <_strtod_l+0x8b8>
 800782c:	e619      	b.n	8007462 <_strtod_l+0x56a>
 800782e:	4641      	mov	r1, r8
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff facd 	bl	8006dd0 <__ratio>
 8007836:	ec57 6b10 	vmov	r6, r7, d0
 800783a:	2200      	movs	r2, #0
 800783c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f954 	bl	8000af0 <__aeabi_dcmple>
 8007848:	2800      	cmp	r0, #0
 800784a:	d06f      	beq.n	800792c <_strtod_l+0xa34>
 800784c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d17a      	bne.n	8007948 <_strtod_l+0xa50>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	d158      	bne.n	800790a <_strtod_l+0xa12>
 8007858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800785e:	2b00      	cmp	r3, #0
 8007860:	d15a      	bne.n	8007918 <_strtod_l+0xa20>
 8007862:	4b64      	ldr	r3, [pc, #400]	@ (80079f4 <_strtod_l+0xafc>)
 8007864:	2200      	movs	r2, #0
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	f7f9 f937 	bl	8000adc <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	d159      	bne.n	8007926 <_strtod_l+0xa2e>
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	4b60      	ldr	r3, [pc, #384]	@ (80079f8 <_strtod_l+0xb00>)
 8007878:	2200      	movs	r2, #0
 800787a:	f7f8 febd 	bl	80005f8 <__aeabi_dmul>
 800787e:	4606      	mov	r6, r0
 8007880:	460f      	mov	r7, r1
 8007882:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007886:	9606      	str	r6, [sp, #24]
 8007888:	9307      	str	r3, [sp, #28]
 800788a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800788e:	4d57      	ldr	r5, [pc, #348]	@ (80079ec <_strtod_l+0xaf4>)
 8007890:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007896:	401d      	ands	r5, r3
 8007898:	4b58      	ldr	r3, [pc, #352]	@ (80079fc <_strtod_l+0xb04>)
 800789a:	429d      	cmp	r5, r3
 800789c:	f040 80b2 	bne.w	8007a04 <_strtod_l+0xb0c>
 80078a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80078a6:	ec4b ab10 	vmov	d0, sl, fp
 80078aa:	f7ff f9c9 	bl	8006c40 <__ulp>
 80078ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078b2:	ec51 0b10 	vmov	r0, r1, d0
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	f7f8 fce5 	bl	800028c <__adddf3>
 80078c2:	460b      	mov	r3, r1
 80078c4:	4949      	ldr	r1, [pc, #292]	@ (80079ec <_strtod_l+0xaf4>)
 80078c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007a00 <_strtod_l+0xb08>)
 80078c8:	4019      	ands	r1, r3
 80078ca:	4291      	cmp	r1, r2
 80078cc:	4682      	mov	sl, r0
 80078ce:	d942      	bls.n	8007956 <_strtod_l+0xa5e>
 80078d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078d2:	4b47      	ldr	r3, [pc, #284]	@ (80079f0 <_strtod_l+0xaf8>)
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d103      	bne.n	80078e0 <_strtod_l+0x9e8>
 80078d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078da:	3301      	adds	r3, #1
 80078dc:	f43f ad2b 	beq.w	8007336 <_strtod_l+0x43e>
 80078e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80079f0 <_strtod_l+0xaf8>
 80078e4:	f04f 3aff 	mov.w	sl, #4294967295
 80078e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078ea:	9805      	ldr	r0, [sp, #20]
 80078ec:	f7fe fe74 	bl	80065d8 <_Bfree>
 80078f0:	9805      	ldr	r0, [sp, #20]
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7fe fe70 	bl	80065d8 <_Bfree>
 80078f8:	9805      	ldr	r0, [sp, #20]
 80078fa:	4641      	mov	r1, r8
 80078fc:	f7fe fe6c 	bl	80065d8 <_Bfree>
 8007900:	9805      	ldr	r0, [sp, #20]
 8007902:	4621      	mov	r1, r4
 8007904:	f7fe fe68 	bl	80065d8 <_Bfree>
 8007908:	e618      	b.n	800753c <_strtod_l+0x644>
 800790a:	f1ba 0f01 	cmp.w	sl, #1
 800790e:	d103      	bne.n	8007918 <_strtod_l+0xa20>
 8007910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	f43f ada5 	beq.w	8007462 <_strtod_l+0x56a>
 8007918:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80079c8 <_strtod_l+0xad0>
 800791c:	4f35      	ldr	r7, [pc, #212]	@ (80079f4 <_strtod_l+0xafc>)
 800791e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007922:	2600      	movs	r6, #0
 8007924:	e7b1      	b.n	800788a <_strtod_l+0x992>
 8007926:	4f34      	ldr	r7, [pc, #208]	@ (80079f8 <_strtod_l+0xb00>)
 8007928:	2600      	movs	r6, #0
 800792a:	e7aa      	b.n	8007882 <_strtod_l+0x98a>
 800792c:	4b32      	ldr	r3, [pc, #200]	@ (80079f8 <_strtod_l+0xb00>)
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	2200      	movs	r2, #0
 8007934:	f7f8 fe60 	bl	80005f8 <__aeabi_dmul>
 8007938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d09f      	beq.n	8007882 <_strtod_l+0x98a>
 8007942:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007946:	e7a0      	b.n	800788a <_strtod_l+0x992>
 8007948:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80079d0 <_strtod_l+0xad8>
 800794c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007950:	ec57 6b17 	vmov	r6, r7, d7
 8007954:	e799      	b.n	800788a <_strtod_l+0x992>
 8007956:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1c1      	bne.n	80078e8 <_strtod_l+0x9f0>
 8007964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007968:	0d1b      	lsrs	r3, r3, #20
 800796a:	051b      	lsls	r3, r3, #20
 800796c:	429d      	cmp	r5, r3
 800796e:	d1bb      	bne.n	80078e8 <_strtod_l+0x9f0>
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f9a0 	bl	8000cb8 <__aeabi_d2lz>
 8007978:	f7f8 fe10 	bl	800059c <__aeabi_l2d>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4630      	mov	r0, r6
 8007982:	4639      	mov	r1, r7
 8007984:	f7f8 fc80 	bl	8000288 <__aeabi_dsub>
 8007988:	460b      	mov	r3, r1
 800798a:	4602      	mov	r2, r0
 800798c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007990:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007996:	ea46 060a 	orr.w	r6, r6, sl
 800799a:	431e      	orrs	r6, r3
 800799c:	d06f      	beq.n	8007a7e <_strtod_l+0xb86>
 800799e:	a30e      	add	r3, pc, #56	@ (adr r3, 80079d8 <_strtod_l+0xae0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f9 f89a 	bl	8000adc <__aeabi_dcmplt>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f47f accf 	bne.w	800734c <_strtod_l+0x454>
 80079ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80079e0 <_strtod_l+0xae8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079b8:	f7f9 f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d093      	beq.n	80078e8 <_strtod_l+0x9f0>
 80079c0:	e4c4      	b.n	800734c <_strtod_l+0x454>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	00000000 	.word	0x00000000
 80079cc:	bff00000 	.word	0xbff00000
 80079d0:	00000000 	.word	0x00000000
 80079d4:	3ff00000 	.word	0x3ff00000
 80079d8:	94a03595 	.word	0x94a03595
 80079dc:	3fdfffff 	.word	0x3fdfffff
 80079e0:	35afe535 	.word	0x35afe535
 80079e4:	3fe00000 	.word	0x3fe00000
 80079e8:	000fffff 	.word	0x000fffff
 80079ec:	7ff00000 	.word	0x7ff00000
 80079f0:	7fefffff 	.word	0x7fefffff
 80079f4:	3ff00000 	.word	0x3ff00000
 80079f8:	3fe00000 	.word	0x3fe00000
 80079fc:	7fe00000 	.word	0x7fe00000
 8007a00:	7c9fffff 	.word	0x7c9fffff
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	b323      	cbz	r3, 8007a52 <_strtod_l+0xb5a>
 8007a08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007a0c:	d821      	bhi.n	8007a52 <_strtod_l+0xb5a>
 8007a0e:	a328      	add	r3, pc, #160	@ (adr r3, 8007ab0 <_strtod_l+0xbb8>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	4630      	mov	r0, r6
 8007a16:	4639      	mov	r1, r7
 8007a18:	f7f9 f86a 	bl	8000af0 <__aeabi_dcmple>
 8007a1c:	b1a0      	cbz	r0, 8007a48 <_strtod_l+0xb50>
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7f9 f8c1 	bl	8000ba8 <__aeabi_d2uiz>
 8007a26:	2801      	cmp	r0, #1
 8007a28:	bf38      	it	cc
 8007a2a:	2001      	movcc	r0, #1
 8007a2c:	f7f8 fd6a 	bl	8000504 <__aeabi_ui2d>
 8007a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	b9fb      	cbnz	r3, 8007a78 <_strtod_l+0xb80>
 8007a38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007a44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007a4e:	1b5b      	subs	r3, r3, r5
 8007a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007a5a:	f7ff f8f1 	bl	8006c40 <__ulp>
 8007a5e:	4650      	mov	r0, sl
 8007a60:	ec53 2b10 	vmov	r2, r3, d0
 8007a64:	4659      	mov	r1, fp
 8007a66:	f7f8 fdc7 	bl	80005f8 <__aeabi_dmul>
 8007a6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a6e:	f7f8 fc0d 	bl	800028c <__adddf3>
 8007a72:	4682      	mov	sl, r0
 8007a74:	468b      	mov	fp, r1
 8007a76:	e770      	b.n	800795a <_strtod_l+0xa62>
 8007a78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a7c:	e7e0      	b.n	8007a40 <_strtod_l+0xb48>
 8007a7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ab8 <_strtod_l+0xbc0>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f9 f82a 	bl	8000adc <__aeabi_dcmplt>
 8007a88:	e798      	b.n	80079bc <_strtod_l+0xac4>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	f7ff ba6d 	b.w	8006f72 <_strtod_l+0x7a>
 8007a98:	2a65      	cmp	r2, #101	@ 0x65
 8007a9a:	f43f ab66 	beq.w	800716a <_strtod_l+0x272>
 8007a9e:	2a45      	cmp	r2, #69	@ 0x45
 8007aa0:	f43f ab63 	beq.w	800716a <_strtod_l+0x272>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f7ff bb9e 	b.w	80071e6 <_strtod_l+0x2ee>
 8007aaa:	bf00      	nop
 8007aac:	f3af 8000 	nop.w
 8007ab0:	ffc00000 	.word	0xffc00000
 8007ab4:	41dfffff 	.word	0x41dfffff
 8007ab8:	94a03595 	.word	0x94a03595
 8007abc:	3fcfffff 	.word	0x3fcfffff

08007ac0 <_strtod_r>:
 8007ac0:	4b01      	ldr	r3, [pc, #4]	@ (8007ac8 <_strtod_r+0x8>)
 8007ac2:	f7ff ba19 	b.w	8006ef8 <_strtod_l>
 8007ac6:	bf00      	nop
 8007ac8:	20000068 	.word	0x20000068

08007acc <__ssputs_r>:
 8007acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	688e      	ldr	r6, [r1, #8]
 8007ad2:	461f      	mov	r7, r3
 8007ad4:	42be      	cmp	r6, r7
 8007ad6:	680b      	ldr	r3, [r1, #0]
 8007ad8:	4682      	mov	sl, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	4690      	mov	r8, r2
 8007ade:	d82d      	bhi.n	8007b3c <__ssputs_r+0x70>
 8007ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae8:	d026      	beq.n	8007b38 <__ssputs_r+0x6c>
 8007aea:	6965      	ldr	r5, [r4, #20]
 8007aec:	6909      	ldr	r1, [r1, #16]
 8007aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af2:	eba3 0901 	sub.w	r9, r3, r1
 8007af6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007afa:	1c7b      	adds	r3, r7, #1
 8007afc:	444b      	add	r3, r9
 8007afe:	106d      	asrs	r5, r5, #1
 8007b00:	429d      	cmp	r5, r3
 8007b02:	bf38      	it	cc
 8007b04:	461d      	movcc	r5, r3
 8007b06:	0553      	lsls	r3, r2, #21
 8007b08:	d527      	bpl.n	8007b5a <__ssputs_r+0x8e>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7fe fc98 	bl	8006440 <_malloc_r>
 8007b10:	4606      	mov	r6, r0
 8007b12:	b360      	cbz	r0, 8007b6e <__ssputs_r+0xa2>
 8007b14:	6921      	ldr	r1, [r4, #16]
 8007b16:	464a      	mov	r2, r9
 8007b18:	f000 fc00 	bl	800831c <memcpy>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	6126      	str	r6, [r4, #16]
 8007b2a:	6165      	str	r5, [r4, #20]
 8007b2c:	444e      	add	r6, r9
 8007b2e:	eba5 0509 	sub.w	r5, r5, r9
 8007b32:	6026      	str	r6, [r4, #0]
 8007b34:	60a5      	str	r5, [r4, #8]
 8007b36:	463e      	mov	r6, r7
 8007b38:	42be      	cmp	r6, r7
 8007b3a:	d900      	bls.n	8007b3e <__ssputs_r+0x72>
 8007b3c:	463e      	mov	r6, r7
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	4632      	mov	r2, r6
 8007b42:	4641      	mov	r1, r8
 8007b44:	f000 fbae 	bl	80082a4 <memmove>
 8007b48:	68a3      	ldr	r3, [r4, #8]
 8007b4a:	1b9b      	subs	r3, r3, r6
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	4433      	add	r3, r6
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	f000 ff59 	bl	8008a12 <_realloc_r>
 8007b60:	4606      	mov	r6, r0
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d1e0      	bne.n	8007b28 <__ssputs_r+0x5c>
 8007b66:	6921      	ldr	r1, [r4, #16]
 8007b68:	4650      	mov	r0, sl
 8007b6a:	f7fe fbf5 	bl	8006358 <_free_r>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	f8ca 3000 	str.w	r3, [sl]
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e7e9      	b.n	8007b56 <__ssputs_r+0x8a>
	...

08007b84 <_svfiprintf_r>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4698      	mov	r8, r3
 8007b8a:	898b      	ldrh	r3, [r1, #12]
 8007b8c:	061b      	lsls	r3, r3, #24
 8007b8e:	b09d      	sub	sp, #116	@ 0x74
 8007b90:	4607      	mov	r7, r0
 8007b92:	460d      	mov	r5, r1
 8007b94:	4614      	mov	r4, r2
 8007b96:	d510      	bpl.n	8007bba <_svfiprintf_r+0x36>
 8007b98:	690b      	ldr	r3, [r1, #16]
 8007b9a:	b973      	cbnz	r3, 8007bba <_svfiprintf_r+0x36>
 8007b9c:	2140      	movs	r1, #64	@ 0x40
 8007b9e:	f7fe fc4f 	bl	8006440 <_malloc_r>
 8007ba2:	6028      	str	r0, [r5, #0]
 8007ba4:	6128      	str	r0, [r5, #16]
 8007ba6:	b930      	cbnz	r0, 8007bb6 <_svfiprintf_r+0x32>
 8007ba8:	230c      	movs	r3, #12
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	b01d      	add	sp, #116	@ 0x74
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	2340      	movs	r3, #64	@ 0x40
 8007bb8:	616b      	str	r3, [r5, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc8:	2330      	movs	r3, #48	@ 0x30
 8007bca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d68 <_svfiprintf_r+0x1e4>
 8007bce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd2:	f04f 0901 	mov.w	r9, #1
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	469a      	mov	sl, r3
 8007bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bde:	b10a      	cbz	r2, 8007be4 <_svfiprintf_r+0x60>
 8007be0:	2a25      	cmp	r2, #37	@ 0x25
 8007be2:	d1f9      	bne.n	8007bd8 <_svfiprintf_r+0x54>
 8007be4:	ebba 0b04 	subs.w	fp, sl, r4
 8007be8:	d00b      	beq.n	8007c02 <_svfiprintf_r+0x7e>
 8007bea:	465b      	mov	r3, fp
 8007bec:	4622      	mov	r2, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ff6b 	bl	8007acc <__ssputs_r>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f000 80a7 	beq.w	8007d4a <_svfiprintf_r+0x1c6>
 8007bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfe:	445a      	add	r2, fp
 8007c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c02:	f89a 3000 	ldrb.w	r3, [sl]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 809f 	beq.w	8007d4a <_svfiprintf_r+0x1c6>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c16:	f10a 0a01 	add.w	sl, sl, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	9307      	str	r3, [sp, #28]
 8007c1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c24:	4654      	mov	r4, sl
 8007c26:	2205      	movs	r2, #5
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	484e      	ldr	r0, [pc, #312]	@ (8007d68 <_svfiprintf_r+0x1e4>)
 8007c2e:	f7f8 facf 	bl	80001d0 <memchr>
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	b9d8      	cbnz	r0, 8007c6e <_svfiprintf_r+0xea>
 8007c36:	06d0      	lsls	r0, r2, #27
 8007c38:	bf44      	itt	mi
 8007c3a:	2320      	movmi	r3, #32
 8007c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c40:	0711      	lsls	r1, r2, #28
 8007c42:	bf44      	itt	mi
 8007c44:	232b      	movmi	r3, #43	@ 0x2b
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c50:	d015      	beq.n	8007c7e <_svfiprintf_r+0xfa>
 8007c52:	9a07      	ldr	r2, [sp, #28]
 8007c54:	4654      	mov	r4, sl
 8007c56:	2000      	movs	r0, #0
 8007c58:	f04f 0c0a 	mov.w	ip, #10
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c62:	3b30      	subs	r3, #48	@ 0x30
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d94b      	bls.n	8007d00 <_svfiprintf_r+0x17c>
 8007c68:	b1b0      	cbz	r0, 8007c98 <_svfiprintf_r+0x114>
 8007c6a:	9207      	str	r2, [sp, #28]
 8007c6c:	e014      	b.n	8007c98 <_svfiprintf_r+0x114>
 8007c6e:	eba0 0308 	sub.w	r3, r0, r8
 8007c72:	fa09 f303 	lsl.w	r3, r9, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	46a2      	mov	sl, r4
 8007c7c:	e7d2      	b.n	8007c24 <_svfiprintf_r+0xa0>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfbb      	ittet	lt
 8007c8a:	425b      	neglt	r3, r3
 8007c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c90:	9307      	strge	r3, [sp, #28]
 8007c92:	9307      	strlt	r3, [sp, #28]
 8007c94:	bfb8      	it	lt
 8007c96:	9204      	strlt	r2, [sp, #16]
 8007c98:	7823      	ldrb	r3, [r4, #0]
 8007c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c9c:	d10a      	bne.n	8007cb4 <_svfiprintf_r+0x130>
 8007c9e:	7863      	ldrb	r3, [r4, #1]
 8007ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca2:	d132      	bne.n	8007d0a <_svfiprintf_r+0x186>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9203      	str	r2, [sp, #12]
 8007cac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb0:	3402      	adds	r4, #2
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d78 <_svfiprintf_r+0x1f4>
 8007cb8:	7821      	ldrb	r1, [r4, #0]
 8007cba:	2203      	movs	r2, #3
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	f7f8 fa87 	bl	80001d0 <memchr>
 8007cc2:	b138      	cbz	r0, 8007cd4 <_svfiprintf_r+0x150>
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	eba0 000a 	sub.w	r0, r0, sl
 8007cca:	2240      	movs	r2, #64	@ 0x40
 8007ccc:	4082      	lsls	r2, r0
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd8:	4824      	ldr	r0, [pc, #144]	@ (8007d6c <_svfiprintf_r+0x1e8>)
 8007cda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cde:	2206      	movs	r2, #6
 8007ce0:	f7f8 fa76 	bl	80001d0 <memchr>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d036      	beq.n	8007d56 <_svfiprintf_r+0x1d2>
 8007ce8:	4b21      	ldr	r3, [pc, #132]	@ (8007d70 <_svfiprintf_r+0x1ec>)
 8007cea:	bb1b      	cbnz	r3, 8007d34 <_svfiprintf_r+0x1b0>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	3307      	adds	r3, #7
 8007cf0:	f023 0307 	bic.w	r3, r3, #7
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	9303      	str	r3, [sp, #12]
 8007cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfa:	4433      	add	r3, r6
 8007cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfe:	e76a      	b.n	8007bd6 <_svfiprintf_r+0x52>
 8007d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d04:	460c      	mov	r4, r1
 8007d06:	2001      	movs	r0, #1
 8007d08:	e7a8      	b.n	8007c5c <_svfiprintf_r+0xd8>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	3401      	adds	r4, #1
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	4619      	mov	r1, r3
 8007d12:	f04f 0c0a 	mov.w	ip, #10
 8007d16:	4620      	mov	r0, r4
 8007d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1c:	3a30      	subs	r2, #48	@ 0x30
 8007d1e:	2a09      	cmp	r2, #9
 8007d20:	d903      	bls.n	8007d2a <_svfiprintf_r+0x1a6>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c6      	beq.n	8007cb4 <_svfiprintf_r+0x130>
 8007d26:	9105      	str	r1, [sp, #20]
 8007d28:	e7c4      	b.n	8007cb4 <_svfiprintf_r+0x130>
 8007d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2e:	4604      	mov	r4, r0
 8007d30:	2301      	movs	r3, #1
 8007d32:	e7f0      	b.n	8007d16 <_svfiprintf_r+0x192>
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	462a      	mov	r2, r5
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <_svfiprintf_r+0x1f0>)
 8007d3c:	a904      	add	r1, sp, #16
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f7fc fcba 	bl	80046b8 <_printf_float>
 8007d44:	1c42      	adds	r2, r0, #1
 8007d46:	4606      	mov	r6, r0
 8007d48:	d1d6      	bne.n	8007cf8 <_svfiprintf_r+0x174>
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	065b      	lsls	r3, r3, #25
 8007d4e:	f53f af2d 	bmi.w	8007bac <_svfiprintf_r+0x28>
 8007d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d54:	e72c      	b.n	8007bb0 <_svfiprintf_r+0x2c>
 8007d56:	ab03      	add	r3, sp, #12
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <_svfiprintf_r+0x1f0>)
 8007d5e:	a904      	add	r1, sp, #16
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7fc ff41 	bl	8004be8 <_printf_i>
 8007d66:	e7ed      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d68:	080095c0 	.word	0x080095c0
 8007d6c:	080095ca 	.word	0x080095ca
 8007d70:	080046b9 	.word	0x080046b9
 8007d74:	08007acd 	.word	0x08007acd
 8007d78:	080095c6 	.word	0x080095c6

08007d7c <__sfputc_r>:
 8007d7c:	6893      	ldr	r3, [r2, #8]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	b410      	push	{r4}
 8007d84:	6093      	str	r3, [r2, #8]
 8007d86:	da08      	bge.n	8007d9a <__sfputc_r+0x1e>
 8007d88:	6994      	ldr	r4, [r2, #24]
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	db01      	blt.n	8007d92 <__sfputc_r+0x16>
 8007d8e:	290a      	cmp	r1, #10
 8007d90:	d103      	bne.n	8007d9a <__sfputc_r+0x1e>
 8007d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d96:	f000 b9f1 	b.w	800817c <__swbuf_r>
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	1c58      	adds	r0, r3, #1
 8007d9e:	6010      	str	r0, [r2, #0]
 8007da0:	7019      	strb	r1, [r3, #0]
 8007da2:	4608      	mov	r0, r1
 8007da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <__sfputs_r>:
 8007daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dac:	4606      	mov	r6, r0
 8007dae:	460f      	mov	r7, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	18d5      	adds	r5, r2, r3
 8007db4:	42ac      	cmp	r4, r5
 8007db6:	d101      	bne.n	8007dbc <__sfputs_r+0x12>
 8007db8:	2000      	movs	r0, #0
 8007dba:	e007      	b.n	8007dcc <__sfputs_r+0x22>
 8007dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc0:	463a      	mov	r2, r7
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffda 	bl	8007d7c <__sfputc_r>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d1f3      	bne.n	8007db4 <__sfputs_r+0xa>
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd0 <_vfiprintf_r>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	b09d      	sub	sp, #116	@ 0x74
 8007dd8:	4614      	mov	r4, r2
 8007dda:	4698      	mov	r8, r3
 8007ddc:	4606      	mov	r6, r0
 8007dde:	b118      	cbz	r0, 8007de8 <_vfiprintf_r+0x18>
 8007de0:	6a03      	ldr	r3, [r0, #32]
 8007de2:	b90b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x18>
 8007de4:	f7fd fac0 	bl	8005368 <__sinit>
 8007de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d405      	bmi.n	8007dfa <_vfiprintf_r+0x2a>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	059a      	lsls	r2, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_vfiprintf_r+0x2a>
 8007df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007df6:	f7fd fc3c 	bl	8005672 <__retarget_lock_acquire_recursive>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	071b      	lsls	r3, r3, #28
 8007dfe:	d501      	bpl.n	8007e04 <_vfiprintf_r+0x34>
 8007e00:	692b      	ldr	r3, [r5, #16]
 8007e02:	b99b      	cbnz	r3, 8007e2c <_vfiprintf_r+0x5c>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f9f6 	bl	80081f8 <__swsetup_r>
 8007e0c:	b170      	cbz	r0, 8007e2c <_vfiprintf_r+0x5c>
 8007e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e10:	07dc      	lsls	r4, r3, #31
 8007e12:	d504      	bpl.n	8007e1e <_vfiprintf_r+0x4e>
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	b01d      	add	sp, #116	@ 0x74
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	0598      	lsls	r0, r3, #22
 8007e22:	d4f7      	bmi.n	8007e14 <_vfiprintf_r+0x44>
 8007e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e26:	f7fd fc25 	bl	8005674 <__retarget_lock_release_recursive>
 8007e2a:	e7f3      	b.n	8007e14 <_vfiprintf_r+0x44>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e30:	2320      	movs	r3, #32
 8007e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e3a:	2330      	movs	r3, #48	@ 0x30
 8007e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fec <_vfiprintf_r+0x21c>
 8007e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e44:	f04f 0901 	mov.w	r9, #1
 8007e48:	4623      	mov	r3, r4
 8007e4a:	469a      	mov	sl, r3
 8007e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e50:	b10a      	cbz	r2, 8007e56 <_vfiprintf_r+0x86>
 8007e52:	2a25      	cmp	r2, #37	@ 0x25
 8007e54:	d1f9      	bne.n	8007e4a <_vfiprintf_r+0x7a>
 8007e56:	ebba 0b04 	subs.w	fp, sl, r4
 8007e5a:	d00b      	beq.n	8007e74 <_vfiprintf_r+0xa4>
 8007e5c:	465b      	mov	r3, fp
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ffa1 	bl	8007daa <__sfputs_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f000 80a7 	beq.w	8007fbc <_vfiprintf_r+0x1ec>
 8007e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e70:	445a      	add	r2, fp
 8007e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e74:	f89a 3000 	ldrb.w	r3, [sl]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 809f 	beq.w	8007fbc <_vfiprintf_r+0x1ec>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e88:	f10a 0a01 	add.w	sl, sl, #1
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e96:	4654      	mov	r4, sl
 8007e98:	2205      	movs	r2, #5
 8007e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9e:	4853      	ldr	r0, [pc, #332]	@ (8007fec <_vfiprintf_r+0x21c>)
 8007ea0:	f7f8 f996 	bl	80001d0 <memchr>
 8007ea4:	9a04      	ldr	r2, [sp, #16]
 8007ea6:	b9d8      	cbnz	r0, 8007ee0 <_vfiprintf_r+0x110>
 8007ea8:	06d1      	lsls	r1, r2, #27
 8007eaa:	bf44      	itt	mi
 8007eac:	2320      	movmi	r3, #32
 8007eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eb2:	0713      	lsls	r3, r2, #28
 8007eb4:	bf44      	itt	mi
 8007eb6:	232b      	movmi	r3, #43	@ 0x2b
 8007eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec2:	d015      	beq.n	8007ef0 <_vfiprintf_r+0x120>
 8007ec4:	9a07      	ldr	r2, [sp, #28]
 8007ec6:	4654      	mov	r4, sl
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f04f 0c0a 	mov.w	ip, #10
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed4:	3b30      	subs	r3, #48	@ 0x30
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d94b      	bls.n	8007f72 <_vfiprintf_r+0x1a2>
 8007eda:	b1b0      	cbz	r0, 8007f0a <_vfiprintf_r+0x13a>
 8007edc:	9207      	str	r2, [sp, #28]
 8007ede:	e014      	b.n	8007f0a <_vfiprintf_r+0x13a>
 8007ee0:	eba0 0308 	sub.w	r3, r0, r8
 8007ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	9304      	str	r3, [sp, #16]
 8007eec:	46a2      	mov	sl, r4
 8007eee:	e7d2      	b.n	8007e96 <_vfiprintf_r+0xc6>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	1d19      	adds	r1, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	9103      	str	r1, [sp, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bfbb      	ittet	lt
 8007efc:	425b      	neglt	r3, r3
 8007efe:	f042 0202 	orrlt.w	r2, r2, #2
 8007f02:	9307      	strge	r3, [sp, #28]
 8007f04:	9307      	strlt	r3, [sp, #28]
 8007f06:	bfb8      	it	lt
 8007f08:	9204      	strlt	r2, [sp, #16]
 8007f0a:	7823      	ldrb	r3, [r4, #0]
 8007f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f0e:	d10a      	bne.n	8007f26 <_vfiprintf_r+0x156>
 8007f10:	7863      	ldrb	r3, [r4, #1]
 8007f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f14:	d132      	bne.n	8007f7c <_vfiprintf_r+0x1ac>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	9203      	str	r2, [sp, #12]
 8007f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f22:	3402      	adds	r4, #2
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ffc <_vfiprintf_r+0x22c>
 8007f2a:	7821      	ldrb	r1, [r4, #0]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f7f8 f94e 	bl	80001d0 <memchr>
 8007f34:	b138      	cbz	r0, 8007f46 <_vfiprintf_r+0x176>
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	eba0 000a 	sub.w	r0, r0, sl
 8007f3c:	2240      	movs	r2, #64	@ 0x40
 8007f3e:	4082      	lsls	r2, r0
 8007f40:	4313      	orrs	r3, r2
 8007f42:	3401      	adds	r4, #1
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4829      	ldr	r0, [pc, #164]	@ (8007ff0 <_vfiprintf_r+0x220>)
 8007f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f50:	2206      	movs	r2, #6
 8007f52:	f7f8 f93d 	bl	80001d0 <memchr>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d03f      	beq.n	8007fda <_vfiprintf_r+0x20a>
 8007f5a:	4b26      	ldr	r3, [pc, #152]	@ (8007ff4 <_vfiprintf_r+0x224>)
 8007f5c:	bb1b      	cbnz	r3, 8007fa6 <_vfiprintf_r+0x1d6>
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	3308      	adds	r3, #8
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f6c:	443b      	add	r3, r7
 8007f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f70:	e76a      	b.n	8007e48 <_vfiprintf_r+0x78>
 8007f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f76:	460c      	mov	r4, r1
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7a8      	b.n	8007ece <_vfiprintf_r+0xfe>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	3401      	adds	r4, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4619      	mov	r1, r3
 8007f84:	f04f 0c0a 	mov.w	ip, #10
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f8e:	3a30      	subs	r2, #48	@ 0x30
 8007f90:	2a09      	cmp	r2, #9
 8007f92:	d903      	bls.n	8007f9c <_vfiprintf_r+0x1cc>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0c6      	beq.n	8007f26 <_vfiprintf_r+0x156>
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	e7c4      	b.n	8007f26 <_vfiprintf_r+0x156>
 8007f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e7f0      	b.n	8007f88 <_vfiprintf_r+0x1b8>
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	462a      	mov	r2, r5
 8007fac:	4b12      	ldr	r3, [pc, #72]	@ (8007ff8 <_vfiprintf_r+0x228>)
 8007fae:	a904      	add	r1, sp, #16
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7fc fb81 	bl	80046b8 <_printf_float>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	1c78      	adds	r0, r7, #1
 8007fba:	d1d6      	bne.n	8007f6a <_vfiprintf_r+0x19a>
 8007fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_vfiprintf_r+0x1fe>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_vfiprintf_r+0x1fe>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fca:	f7fd fb53 	bl	8005674 <__retarget_lock_release_recursive>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	065b      	lsls	r3, r3, #25
 8007fd2:	f53f af1f 	bmi.w	8007e14 <_vfiprintf_r+0x44>
 8007fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fd8:	e71e      	b.n	8007e18 <_vfiprintf_r+0x48>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <_vfiprintf_r+0x228>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7fc fdff 	bl	8004be8 <_printf_i>
 8007fea:	e7e4      	b.n	8007fb6 <_vfiprintf_r+0x1e6>
 8007fec:	080095c0 	.word	0x080095c0
 8007ff0:	080095ca 	.word	0x080095ca
 8007ff4:	080046b9 	.word	0x080046b9
 8007ff8:	08007dab 	.word	0x08007dab
 8007ffc:	080095c6 	.word	0x080095c6

08008000 <__sflush_r>:
 8008000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	0716      	lsls	r6, r2, #28
 800800a:	4605      	mov	r5, r0
 800800c:	460c      	mov	r4, r1
 800800e:	d454      	bmi.n	80080ba <__sflush_r+0xba>
 8008010:	684b      	ldr	r3, [r1, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc02      	bgt.n	800801c <__sflush_r+0x1c>
 8008016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	dd48      	ble.n	80080ae <__sflush_r+0xae>
 800801c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800801e:	2e00      	cmp	r6, #0
 8008020:	d045      	beq.n	80080ae <__sflush_r+0xae>
 8008022:	2300      	movs	r3, #0
 8008024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008028:	682f      	ldr	r7, [r5, #0]
 800802a:	6a21      	ldr	r1, [r4, #32]
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	d030      	beq.n	8008092 <__sflush_r+0x92>
 8008030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0759      	lsls	r1, r3, #29
 8008036:	d505      	bpl.n	8008044 <__sflush_r+0x44>
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800803e:	b10b      	cbz	r3, 8008044 <__sflush_r+0x44>
 8008040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008042:	1ad2      	subs	r2, r2, r3
 8008044:	2300      	movs	r3, #0
 8008046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	4628      	mov	r0, r5
 800804c:	47b0      	blx	r6
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	d106      	bne.n	8008062 <__sflush_r+0x62>
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	291d      	cmp	r1, #29
 8008058:	d82b      	bhi.n	80080b2 <__sflush_r+0xb2>
 800805a:	4a2a      	ldr	r2, [pc, #168]	@ (8008104 <__sflush_r+0x104>)
 800805c:	410a      	asrs	r2, r1
 800805e:	07d6      	lsls	r6, r2, #31
 8008060:	d427      	bmi.n	80080b2 <__sflush_r+0xb2>
 8008062:	2200      	movs	r2, #0
 8008064:	6062      	str	r2, [r4, #4]
 8008066:	04d9      	lsls	r1, r3, #19
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	6022      	str	r2, [r4, #0]
 800806c:	d504      	bpl.n	8008078 <__sflush_r+0x78>
 800806e:	1c42      	adds	r2, r0, #1
 8008070:	d101      	bne.n	8008076 <__sflush_r+0x76>
 8008072:	682b      	ldr	r3, [r5, #0]
 8008074:	b903      	cbnz	r3, 8008078 <__sflush_r+0x78>
 8008076:	6560      	str	r0, [r4, #84]	@ 0x54
 8008078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800807a:	602f      	str	r7, [r5, #0]
 800807c:	b1b9      	cbz	r1, 80080ae <__sflush_r+0xae>
 800807e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008082:	4299      	cmp	r1, r3
 8008084:	d002      	beq.n	800808c <__sflush_r+0x8c>
 8008086:	4628      	mov	r0, r5
 8008088:	f7fe f966 	bl	8006358 <_free_r>
 800808c:	2300      	movs	r3, #0
 800808e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008090:	e00d      	b.n	80080ae <__sflush_r+0xae>
 8008092:	2301      	movs	r3, #1
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	4602      	mov	r2, r0
 800809a:	1c50      	adds	r0, r2, #1
 800809c:	d1c9      	bne.n	8008032 <__sflush_r+0x32>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c6      	beq.n	8008032 <__sflush_r+0x32>
 80080a4:	2b1d      	cmp	r3, #29
 80080a6:	d001      	beq.n	80080ac <__sflush_r+0xac>
 80080a8:	2b16      	cmp	r3, #22
 80080aa:	d11e      	bne.n	80080ea <__sflush_r+0xea>
 80080ac:	602f      	str	r7, [r5, #0]
 80080ae:	2000      	movs	r0, #0
 80080b0:	e022      	b.n	80080f8 <__sflush_r+0xf8>
 80080b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	e01b      	b.n	80080f2 <__sflush_r+0xf2>
 80080ba:	690f      	ldr	r7, [r1, #16]
 80080bc:	2f00      	cmp	r7, #0
 80080be:	d0f6      	beq.n	80080ae <__sflush_r+0xae>
 80080c0:	0793      	lsls	r3, r2, #30
 80080c2:	680e      	ldr	r6, [r1, #0]
 80080c4:	bf08      	it	eq
 80080c6:	694b      	ldreq	r3, [r1, #20]
 80080c8:	600f      	str	r7, [r1, #0]
 80080ca:	bf18      	it	ne
 80080cc:	2300      	movne	r3, #0
 80080ce:	eba6 0807 	sub.w	r8, r6, r7
 80080d2:	608b      	str	r3, [r1, #8]
 80080d4:	f1b8 0f00 	cmp.w	r8, #0
 80080d8:	dde9      	ble.n	80080ae <__sflush_r+0xae>
 80080da:	6a21      	ldr	r1, [r4, #32]
 80080dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080de:	4643      	mov	r3, r8
 80080e0:	463a      	mov	r2, r7
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b0      	blx	r6
 80080e6:	2800      	cmp	r0, #0
 80080e8:	dc08      	bgt.n	80080fc <__sflush_r+0xfc>
 80080ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	4407      	add	r7, r0
 80080fe:	eba8 0800 	sub.w	r8, r8, r0
 8008102:	e7e7      	b.n	80080d4 <__sflush_r+0xd4>
 8008104:	dfbffffe 	.word	0xdfbffffe

08008108 <_fflush_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b913      	cbnz	r3, 8008118 <_fflush_r+0x10>
 8008112:	2500      	movs	r5, #0
 8008114:	4628      	mov	r0, r5
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	b118      	cbz	r0, 8008122 <_fflush_r+0x1a>
 800811a:	6a03      	ldr	r3, [r0, #32]
 800811c:	b90b      	cbnz	r3, 8008122 <_fflush_r+0x1a>
 800811e:	f7fd f923 	bl	8005368 <__sinit>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f3      	beq.n	8008112 <_fflush_r+0xa>
 800812a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800812c:	07d0      	lsls	r0, r2, #31
 800812e:	d404      	bmi.n	800813a <_fflush_r+0x32>
 8008130:	0599      	lsls	r1, r3, #22
 8008132:	d402      	bmi.n	800813a <_fflush_r+0x32>
 8008134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008136:	f7fd fa9c 	bl	8005672 <__retarget_lock_acquire_recursive>
 800813a:	4628      	mov	r0, r5
 800813c:	4621      	mov	r1, r4
 800813e:	f7ff ff5f 	bl	8008000 <__sflush_r>
 8008142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008144:	07da      	lsls	r2, r3, #31
 8008146:	4605      	mov	r5, r0
 8008148:	d4e4      	bmi.n	8008114 <_fflush_r+0xc>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	d4e1      	bmi.n	8008114 <_fflush_r+0xc>
 8008150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008152:	f7fd fa8f 	bl	8005674 <__retarget_lock_release_recursive>
 8008156:	e7dd      	b.n	8008114 <_fflush_r+0xc>

08008158 <fiprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b503      	push	{r0, r1, lr}
 800815c:	4601      	mov	r1, r0
 800815e:	ab03      	add	r3, sp, #12
 8008160:	4805      	ldr	r0, [pc, #20]	@ (8008178 <fiprintf+0x20>)
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f7ff fe31 	bl	8007dd0 <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	f85d eb04 	ldr.w	lr, [sp], #4
 8008174:	b003      	add	sp, #12
 8008176:	4770      	bx	lr
 8008178:	20000018 	.word	0x20000018

0800817c <__swbuf_r>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	460e      	mov	r6, r1
 8008180:	4614      	mov	r4, r2
 8008182:	4605      	mov	r5, r0
 8008184:	b118      	cbz	r0, 800818e <__swbuf_r+0x12>
 8008186:	6a03      	ldr	r3, [r0, #32]
 8008188:	b90b      	cbnz	r3, 800818e <__swbuf_r+0x12>
 800818a:	f7fd f8ed 	bl	8005368 <__sinit>
 800818e:	69a3      	ldr	r3, [r4, #24]
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	071a      	lsls	r2, r3, #28
 8008196:	d501      	bpl.n	800819c <__swbuf_r+0x20>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	b943      	cbnz	r3, 80081ae <__swbuf_r+0x32>
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f82a 	bl	80081f8 <__swsetup_r>
 80081a4:	b118      	cbz	r0, 80081ae <__swbuf_r+0x32>
 80081a6:	f04f 37ff 	mov.w	r7, #4294967295
 80081aa:	4638      	mov	r0, r7
 80081ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	6922      	ldr	r2, [r4, #16]
 80081b2:	1a98      	subs	r0, r3, r2
 80081b4:	6963      	ldr	r3, [r4, #20]
 80081b6:	b2f6      	uxtb	r6, r6
 80081b8:	4283      	cmp	r3, r0
 80081ba:	4637      	mov	r7, r6
 80081bc:	dc05      	bgt.n	80081ca <__swbuf_r+0x4e>
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7ff ffa1 	bl	8008108 <_fflush_r>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1ed      	bne.n	80081a6 <__swbuf_r+0x2a>
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	60a3      	str	r3, [r4, #8]
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	701e      	strb	r6, [r3, #0]
 80081d8:	6962      	ldr	r2, [r4, #20]
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	429a      	cmp	r2, r3
 80081de:	d004      	beq.n	80081ea <__swbuf_r+0x6e>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	07db      	lsls	r3, r3, #31
 80081e4:	d5e1      	bpl.n	80081aa <__swbuf_r+0x2e>
 80081e6:	2e0a      	cmp	r6, #10
 80081e8:	d1df      	bne.n	80081aa <__swbuf_r+0x2e>
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7ff ff8b 	bl	8008108 <_fflush_r>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d0d9      	beq.n	80081aa <__swbuf_r+0x2e>
 80081f6:	e7d6      	b.n	80081a6 <__swbuf_r+0x2a>

080081f8 <__swsetup_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4b29      	ldr	r3, [pc, #164]	@ (80082a0 <__swsetup_r+0xa8>)
 80081fc:	4605      	mov	r5, r0
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	460c      	mov	r4, r1
 8008202:	b118      	cbz	r0, 800820c <__swsetup_r+0x14>
 8008204:	6a03      	ldr	r3, [r0, #32]
 8008206:	b90b      	cbnz	r3, 800820c <__swsetup_r+0x14>
 8008208:	f7fd f8ae 	bl	8005368 <__sinit>
 800820c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	d422      	bmi.n	800825a <__swsetup_r+0x62>
 8008214:	06da      	lsls	r2, r3, #27
 8008216:	d407      	bmi.n	8008228 <__swsetup_r+0x30>
 8008218:	2209      	movs	r2, #9
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	e033      	b.n	8008290 <__swsetup_r+0x98>
 8008228:	0758      	lsls	r0, r3, #29
 800822a:	d512      	bpl.n	8008252 <__swsetup_r+0x5a>
 800822c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800822e:	b141      	cbz	r1, 8008242 <__swsetup_r+0x4a>
 8008230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008234:	4299      	cmp	r1, r3
 8008236:	d002      	beq.n	800823e <__swsetup_r+0x46>
 8008238:	4628      	mov	r0, r5
 800823a:	f7fe f88d 	bl	8006358 <_free_r>
 800823e:	2300      	movs	r3, #0
 8008240:	6363      	str	r3, [r4, #52]	@ 0x34
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	2300      	movs	r3, #0
 800824c:	6063      	str	r3, [r4, #4]
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f043 0308 	orr.w	r3, r3, #8
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	b94b      	cbnz	r3, 8008272 <__swsetup_r+0x7a>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008268:	d003      	beq.n	8008272 <__swsetup_r+0x7a>
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 fc31 	bl	8008ad4 <__smakebuf_r>
 8008272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008276:	f013 0201 	ands.w	r2, r3, #1
 800827a:	d00a      	beq.n	8008292 <__swsetup_r+0x9a>
 800827c:	2200      	movs	r2, #0
 800827e:	60a2      	str	r2, [r4, #8]
 8008280:	6962      	ldr	r2, [r4, #20]
 8008282:	4252      	negs	r2, r2
 8008284:	61a2      	str	r2, [r4, #24]
 8008286:	6922      	ldr	r2, [r4, #16]
 8008288:	b942      	cbnz	r2, 800829c <__swsetup_r+0xa4>
 800828a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800828e:	d1c5      	bne.n	800821c <__swsetup_r+0x24>
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	0799      	lsls	r1, r3, #30
 8008294:	bf58      	it	pl
 8008296:	6962      	ldrpl	r2, [r4, #20]
 8008298:	60a2      	str	r2, [r4, #8]
 800829a:	e7f4      	b.n	8008286 <__swsetup_r+0x8e>
 800829c:	2000      	movs	r0, #0
 800829e:	e7f7      	b.n	8008290 <__swsetup_r+0x98>
 80082a0:	20000018 	.word	0x20000018

080082a4 <memmove>:
 80082a4:	4288      	cmp	r0, r1
 80082a6:	b510      	push	{r4, lr}
 80082a8:	eb01 0402 	add.w	r4, r1, r2
 80082ac:	d902      	bls.n	80082b4 <memmove+0x10>
 80082ae:	4284      	cmp	r4, r0
 80082b0:	4623      	mov	r3, r4
 80082b2:	d807      	bhi.n	80082c4 <memmove+0x20>
 80082b4:	1e43      	subs	r3, r0, #1
 80082b6:	42a1      	cmp	r1, r4
 80082b8:	d008      	beq.n	80082cc <memmove+0x28>
 80082ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082c2:	e7f8      	b.n	80082b6 <memmove+0x12>
 80082c4:	4402      	add	r2, r0
 80082c6:	4601      	mov	r1, r0
 80082c8:	428a      	cmp	r2, r1
 80082ca:	d100      	bne.n	80082ce <memmove+0x2a>
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082d6:	e7f7      	b.n	80082c8 <memmove+0x24>

080082d8 <strncmp>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	b16a      	cbz	r2, 80082f8 <strncmp+0x20>
 80082dc:	3901      	subs	r1, #1
 80082de:	1884      	adds	r4, r0, r2
 80082e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d103      	bne.n	80082f4 <strncmp+0x1c>
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d001      	beq.n	80082f4 <strncmp+0x1c>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d1f5      	bne.n	80082e0 <strncmp+0x8>
 80082f4:	1ad0      	subs	r0, r2, r3
 80082f6:	bd10      	pop	{r4, pc}
 80082f8:	4610      	mov	r0, r2
 80082fa:	e7fc      	b.n	80082f6 <strncmp+0x1e>

080082fc <_sbrk_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4d06      	ldr	r5, [pc, #24]	@ (8008318 <_sbrk_r+0x1c>)
 8008300:	2300      	movs	r3, #0
 8008302:	4604      	mov	r4, r0
 8008304:	4608      	mov	r0, r1
 8008306:	602b      	str	r3, [r5, #0]
 8008308:	f7f9 fc9a 	bl	8001c40 <_sbrk>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_sbrk_r+0x1a>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_sbrk_r+0x1a>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20000694 	.word	0x20000694

0800831c <memcpy>:
 800831c:	440a      	add	r2, r1
 800831e:	4291      	cmp	r1, r2
 8008320:	f100 33ff 	add.w	r3, r0, #4294967295
 8008324:	d100      	bne.n	8008328 <memcpy+0xc>
 8008326:	4770      	bx	lr
 8008328:	b510      	push	{r4, lr}
 800832a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800832e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008332:	4291      	cmp	r1, r2
 8008334:	d1f9      	bne.n	800832a <memcpy+0xe>
 8008336:	bd10      	pop	{r4, pc}

08008338 <nan>:
 8008338:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008340 <nan+0x8>
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	00000000 	.word	0x00000000
 8008344:	7ff80000 	.word	0x7ff80000

08008348 <abort>:
 8008348:	b508      	push	{r3, lr}
 800834a:	2006      	movs	r0, #6
 800834c:	f000 fc26 	bl	8008b9c <raise>
 8008350:	2001      	movs	r0, #1
 8008352:	f7f9 fbfd 	bl	8001b50 <_exit>

08008356 <_calloc_r>:
 8008356:	b570      	push	{r4, r5, r6, lr}
 8008358:	fba1 5402 	umull	r5, r4, r1, r2
 800835c:	b93c      	cbnz	r4, 800836e <_calloc_r+0x18>
 800835e:	4629      	mov	r1, r5
 8008360:	f7fe f86e 	bl	8006440 <_malloc_r>
 8008364:	4606      	mov	r6, r0
 8008366:	b928      	cbnz	r0, 8008374 <_calloc_r+0x1e>
 8008368:	2600      	movs	r6, #0
 800836a:	4630      	mov	r0, r6
 800836c:	bd70      	pop	{r4, r5, r6, pc}
 800836e:	220c      	movs	r2, #12
 8008370:	6002      	str	r2, [r0, #0]
 8008372:	e7f9      	b.n	8008368 <_calloc_r+0x12>
 8008374:	462a      	mov	r2, r5
 8008376:	4621      	mov	r1, r4
 8008378:	f7fd f8a1 	bl	80054be <memset>
 800837c:	e7f5      	b.n	800836a <_calloc_r+0x14>

0800837e <rshift>:
 800837e:	6903      	ldr	r3, [r0, #16]
 8008380:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008388:	ea4f 1261 	mov.w	r2, r1, asr #5
 800838c:	f100 0414 	add.w	r4, r0, #20
 8008390:	dd45      	ble.n	800841e <rshift+0xa0>
 8008392:	f011 011f 	ands.w	r1, r1, #31
 8008396:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800839a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800839e:	d10c      	bne.n	80083ba <rshift+0x3c>
 80083a0:	f100 0710 	add.w	r7, r0, #16
 80083a4:	4629      	mov	r1, r5
 80083a6:	42b1      	cmp	r1, r6
 80083a8:	d334      	bcc.n	8008414 <rshift+0x96>
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	1eea      	subs	r2, r5, #3
 80083b0:	4296      	cmp	r6, r2
 80083b2:	bf38      	it	cc
 80083b4:	2300      	movcc	r3, #0
 80083b6:	4423      	add	r3, r4
 80083b8:	e015      	b.n	80083e6 <rshift+0x68>
 80083ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083be:	f1c1 0820 	rsb	r8, r1, #32
 80083c2:	40cf      	lsrs	r7, r1
 80083c4:	f105 0e04 	add.w	lr, r5, #4
 80083c8:	46a1      	mov	r9, r4
 80083ca:	4576      	cmp	r6, lr
 80083cc:	46f4      	mov	ip, lr
 80083ce:	d815      	bhi.n	80083fc <rshift+0x7e>
 80083d0:	1a9a      	subs	r2, r3, r2
 80083d2:	0092      	lsls	r2, r2, #2
 80083d4:	3a04      	subs	r2, #4
 80083d6:	3501      	adds	r5, #1
 80083d8:	42ae      	cmp	r6, r5
 80083da:	bf38      	it	cc
 80083dc:	2200      	movcc	r2, #0
 80083de:	18a3      	adds	r3, r4, r2
 80083e0:	50a7      	str	r7, [r4, r2]
 80083e2:	b107      	cbz	r7, 80083e6 <rshift+0x68>
 80083e4:	3304      	adds	r3, #4
 80083e6:	1b1a      	subs	r2, r3, r4
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083ee:	bf08      	it	eq
 80083f0:	2300      	moveq	r3, #0
 80083f2:	6102      	str	r2, [r0, #16]
 80083f4:	bf08      	it	eq
 80083f6:	6143      	streq	r3, [r0, #20]
 80083f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fc:	f8dc c000 	ldr.w	ip, [ip]
 8008400:	fa0c fc08 	lsl.w	ip, ip, r8
 8008404:	ea4c 0707 	orr.w	r7, ip, r7
 8008408:	f849 7b04 	str.w	r7, [r9], #4
 800840c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008410:	40cf      	lsrs	r7, r1
 8008412:	e7da      	b.n	80083ca <rshift+0x4c>
 8008414:	f851 cb04 	ldr.w	ip, [r1], #4
 8008418:	f847 cf04 	str.w	ip, [r7, #4]!
 800841c:	e7c3      	b.n	80083a6 <rshift+0x28>
 800841e:	4623      	mov	r3, r4
 8008420:	e7e1      	b.n	80083e6 <rshift+0x68>

08008422 <__hexdig_fun>:
 8008422:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008426:	2b09      	cmp	r3, #9
 8008428:	d802      	bhi.n	8008430 <__hexdig_fun+0xe>
 800842a:	3820      	subs	r0, #32
 800842c:	b2c0      	uxtb	r0, r0
 800842e:	4770      	bx	lr
 8008430:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008434:	2b05      	cmp	r3, #5
 8008436:	d801      	bhi.n	800843c <__hexdig_fun+0x1a>
 8008438:	3847      	subs	r0, #71	@ 0x47
 800843a:	e7f7      	b.n	800842c <__hexdig_fun+0xa>
 800843c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008440:	2b05      	cmp	r3, #5
 8008442:	d801      	bhi.n	8008448 <__hexdig_fun+0x26>
 8008444:	3827      	subs	r0, #39	@ 0x27
 8008446:	e7f1      	b.n	800842c <__hexdig_fun+0xa>
 8008448:	2000      	movs	r0, #0
 800844a:	4770      	bx	lr

0800844c <__gethex>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	b085      	sub	sp, #20
 8008452:	468a      	mov	sl, r1
 8008454:	9302      	str	r3, [sp, #8]
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	9001      	str	r0, [sp, #4]
 800845a:	4690      	mov	r8, r2
 800845c:	1c9c      	adds	r4, r3, #2
 800845e:	46a1      	mov	r9, r4
 8008460:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008464:	2830      	cmp	r0, #48	@ 0x30
 8008466:	d0fa      	beq.n	800845e <__gethex+0x12>
 8008468:	eba9 0303 	sub.w	r3, r9, r3
 800846c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008470:	f7ff ffd7 	bl	8008422 <__hexdig_fun>
 8008474:	4605      	mov	r5, r0
 8008476:	2800      	cmp	r0, #0
 8008478:	d168      	bne.n	800854c <__gethex+0x100>
 800847a:	49a0      	ldr	r1, [pc, #640]	@ (80086fc <__gethex+0x2b0>)
 800847c:	2201      	movs	r2, #1
 800847e:	4648      	mov	r0, r9
 8008480:	f7ff ff2a 	bl	80082d8 <strncmp>
 8008484:	4607      	mov	r7, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	d167      	bne.n	800855a <__gethex+0x10e>
 800848a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800848e:	4626      	mov	r6, r4
 8008490:	f7ff ffc7 	bl	8008422 <__hexdig_fun>
 8008494:	2800      	cmp	r0, #0
 8008496:	d062      	beq.n	800855e <__gethex+0x112>
 8008498:	4623      	mov	r3, r4
 800849a:	7818      	ldrb	r0, [r3, #0]
 800849c:	2830      	cmp	r0, #48	@ 0x30
 800849e:	4699      	mov	r9, r3
 80084a0:	f103 0301 	add.w	r3, r3, #1
 80084a4:	d0f9      	beq.n	800849a <__gethex+0x4e>
 80084a6:	f7ff ffbc 	bl	8008422 <__hexdig_fun>
 80084aa:	fab0 f580 	clz	r5, r0
 80084ae:	096d      	lsrs	r5, r5, #5
 80084b0:	f04f 0b01 	mov.w	fp, #1
 80084b4:	464a      	mov	r2, r9
 80084b6:	4616      	mov	r6, r2
 80084b8:	3201      	adds	r2, #1
 80084ba:	7830      	ldrb	r0, [r6, #0]
 80084bc:	f7ff ffb1 	bl	8008422 <__hexdig_fun>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1f8      	bne.n	80084b6 <__gethex+0x6a>
 80084c4:	498d      	ldr	r1, [pc, #564]	@ (80086fc <__gethex+0x2b0>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff ff05 	bl	80082d8 <strncmp>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d13f      	bne.n	8008552 <__gethex+0x106>
 80084d2:	b944      	cbnz	r4, 80084e6 <__gethex+0x9a>
 80084d4:	1c74      	adds	r4, r6, #1
 80084d6:	4622      	mov	r2, r4
 80084d8:	4616      	mov	r6, r2
 80084da:	3201      	adds	r2, #1
 80084dc:	7830      	ldrb	r0, [r6, #0]
 80084de:	f7ff ffa0 	bl	8008422 <__hexdig_fun>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d1f8      	bne.n	80084d8 <__gethex+0x8c>
 80084e6:	1ba4      	subs	r4, r4, r6
 80084e8:	00a7      	lsls	r7, r4, #2
 80084ea:	7833      	ldrb	r3, [r6, #0]
 80084ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80084f0:	2b50      	cmp	r3, #80	@ 0x50
 80084f2:	d13e      	bne.n	8008572 <__gethex+0x126>
 80084f4:	7873      	ldrb	r3, [r6, #1]
 80084f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80084f8:	d033      	beq.n	8008562 <__gethex+0x116>
 80084fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80084fc:	d034      	beq.n	8008568 <__gethex+0x11c>
 80084fe:	1c71      	adds	r1, r6, #1
 8008500:	2400      	movs	r4, #0
 8008502:	7808      	ldrb	r0, [r1, #0]
 8008504:	f7ff ff8d 	bl	8008422 <__hexdig_fun>
 8008508:	1e43      	subs	r3, r0, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b18      	cmp	r3, #24
 800850e:	d830      	bhi.n	8008572 <__gethex+0x126>
 8008510:	f1a0 0210 	sub.w	r2, r0, #16
 8008514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008518:	f7ff ff83 	bl	8008422 <__hexdig_fun>
 800851c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008520:	fa5f fc8c 	uxtb.w	ip, ip
 8008524:	f1bc 0f18 	cmp.w	ip, #24
 8008528:	f04f 030a 	mov.w	r3, #10
 800852c:	d91e      	bls.n	800856c <__gethex+0x120>
 800852e:	b104      	cbz	r4, 8008532 <__gethex+0xe6>
 8008530:	4252      	negs	r2, r2
 8008532:	4417      	add	r7, r2
 8008534:	f8ca 1000 	str.w	r1, [sl]
 8008538:	b1ed      	cbz	r5, 8008576 <__gethex+0x12a>
 800853a:	f1bb 0f00 	cmp.w	fp, #0
 800853e:	bf0c      	ite	eq
 8008540:	2506      	moveq	r5, #6
 8008542:	2500      	movne	r5, #0
 8008544:	4628      	mov	r0, r5
 8008546:	b005      	add	sp, #20
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	2500      	movs	r5, #0
 800854e:	462c      	mov	r4, r5
 8008550:	e7b0      	b.n	80084b4 <__gethex+0x68>
 8008552:	2c00      	cmp	r4, #0
 8008554:	d1c7      	bne.n	80084e6 <__gethex+0x9a>
 8008556:	4627      	mov	r7, r4
 8008558:	e7c7      	b.n	80084ea <__gethex+0x9e>
 800855a:	464e      	mov	r6, r9
 800855c:	462f      	mov	r7, r5
 800855e:	2501      	movs	r5, #1
 8008560:	e7c3      	b.n	80084ea <__gethex+0x9e>
 8008562:	2400      	movs	r4, #0
 8008564:	1cb1      	adds	r1, r6, #2
 8008566:	e7cc      	b.n	8008502 <__gethex+0xb6>
 8008568:	2401      	movs	r4, #1
 800856a:	e7fb      	b.n	8008564 <__gethex+0x118>
 800856c:	fb03 0002 	mla	r0, r3, r2, r0
 8008570:	e7ce      	b.n	8008510 <__gethex+0xc4>
 8008572:	4631      	mov	r1, r6
 8008574:	e7de      	b.n	8008534 <__gethex+0xe8>
 8008576:	eba6 0309 	sub.w	r3, r6, r9
 800857a:	3b01      	subs	r3, #1
 800857c:	4629      	mov	r1, r5
 800857e:	2b07      	cmp	r3, #7
 8008580:	dc0a      	bgt.n	8008598 <__gethex+0x14c>
 8008582:	9801      	ldr	r0, [sp, #4]
 8008584:	f7fd ffe8 	bl	8006558 <_Balloc>
 8008588:	4604      	mov	r4, r0
 800858a:	b940      	cbnz	r0, 800859e <__gethex+0x152>
 800858c:	4b5c      	ldr	r3, [pc, #368]	@ (8008700 <__gethex+0x2b4>)
 800858e:	4602      	mov	r2, r0
 8008590:	21e4      	movs	r1, #228	@ 0xe4
 8008592:	485c      	ldr	r0, [pc, #368]	@ (8008704 <__gethex+0x2b8>)
 8008594:	f7fd f876 	bl	8005684 <__assert_func>
 8008598:	3101      	adds	r1, #1
 800859a:	105b      	asrs	r3, r3, #1
 800859c:	e7ef      	b.n	800857e <__gethex+0x132>
 800859e:	f100 0a14 	add.w	sl, r0, #20
 80085a2:	2300      	movs	r3, #0
 80085a4:	4655      	mov	r5, sl
 80085a6:	469b      	mov	fp, r3
 80085a8:	45b1      	cmp	r9, r6
 80085aa:	d337      	bcc.n	800861c <__gethex+0x1d0>
 80085ac:	f845 bb04 	str.w	fp, [r5], #4
 80085b0:	eba5 050a 	sub.w	r5, r5, sl
 80085b4:	10ad      	asrs	r5, r5, #2
 80085b6:	6125      	str	r5, [r4, #16]
 80085b8:	4658      	mov	r0, fp
 80085ba:	f7fe f8bf 	bl	800673c <__hi0bits>
 80085be:	016d      	lsls	r5, r5, #5
 80085c0:	f8d8 6000 	ldr.w	r6, [r8]
 80085c4:	1a2d      	subs	r5, r5, r0
 80085c6:	42b5      	cmp	r5, r6
 80085c8:	dd54      	ble.n	8008674 <__gethex+0x228>
 80085ca:	1bad      	subs	r5, r5, r6
 80085cc:	4629      	mov	r1, r5
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7fe fc53 	bl	8006e7a <__any_on>
 80085d4:	4681      	mov	r9, r0
 80085d6:	b178      	cbz	r0, 80085f8 <__gethex+0x1ac>
 80085d8:	1e6b      	subs	r3, r5, #1
 80085da:	1159      	asrs	r1, r3, #5
 80085dc:	f003 021f 	and.w	r2, r3, #31
 80085e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085e4:	f04f 0901 	mov.w	r9, #1
 80085e8:	fa09 f202 	lsl.w	r2, r9, r2
 80085ec:	420a      	tst	r2, r1
 80085ee:	d003      	beq.n	80085f8 <__gethex+0x1ac>
 80085f0:	454b      	cmp	r3, r9
 80085f2:	dc36      	bgt.n	8008662 <__gethex+0x216>
 80085f4:	f04f 0902 	mov.w	r9, #2
 80085f8:	4629      	mov	r1, r5
 80085fa:	4620      	mov	r0, r4
 80085fc:	f7ff febf 	bl	800837e <rshift>
 8008600:	442f      	add	r7, r5
 8008602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008606:	42bb      	cmp	r3, r7
 8008608:	da42      	bge.n	8008690 <__gethex+0x244>
 800860a:	9801      	ldr	r0, [sp, #4]
 800860c:	4621      	mov	r1, r4
 800860e:	f7fd ffe3 	bl	80065d8 <_Bfree>
 8008612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008614:	2300      	movs	r3, #0
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	25a3      	movs	r5, #163	@ 0xa3
 800861a:	e793      	b.n	8008544 <__gethex+0xf8>
 800861c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008620:	2a2e      	cmp	r2, #46	@ 0x2e
 8008622:	d012      	beq.n	800864a <__gethex+0x1fe>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d104      	bne.n	8008632 <__gethex+0x1e6>
 8008628:	f845 bb04 	str.w	fp, [r5], #4
 800862c:	f04f 0b00 	mov.w	fp, #0
 8008630:	465b      	mov	r3, fp
 8008632:	7830      	ldrb	r0, [r6, #0]
 8008634:	9303      	str	r3, [sp, #12]
 8008636:	f7ff fef4 	bl	8008422 <__hexdig_fun>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	f000 000f 	and.w	r0, r0, #15
 8008640:	4098      	lsls	r0, r3
 8008642:	ea4b 0b00 	orr.w	fp, fp, r0
 8008646:	3304      	adds	r3, #4
 8008648:	e7ae      	b.n	80085a8 <__gethex+0x15c>
 800864a:	45b1      	cmp	r9, r6
 800864c:	d8ea      	bhi.n	8008624 <__gethex+0x1d8>
 800864e:	492b      	ldr	r1, [pc, #172]	@ (80086fc <__gethex+0x2b0>)
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff fe3f 	bl	80082d8 <strncmp>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	2800      	cmp	r0, #0
 800865e:	d1e1      	bne.n	8008624 <__gethex+0x1d8>
 8008660:	e7a2      	b.n	80085a8 <__gethex+0x15c>
 8008662:	1ea9      	subs	r1, r5, #2
 8008664:	4620      	mov	r0, r4
 8008666:	f7fe fc08 	bl	8006e7a <__any_on>
 800866a:	2800      	cmp	r0, #0
 800866c:	d0c2      	beq.n	80085f4 <__gethex+0x1a8>
 800866e:	f04f 0903 	mov.w	r9, #3
 8008672:	e7c1      	b.n	80085f8 <__gethex+0x1ac>
 8008674:	da09      	bge.n	800868a <__gethex+0x23e>
 8008676:	1b75      	subs	r5, r6, r5
 8008678:	4621      	mov	r1, r4
 800867a:	9801      	ldr	r0, [sp, #4]
 800867c:	462a      	mov	r2, r5
 800867e:	f7fe f9c3 	bl	8006a08 <__lshift>
 8008682:	1b7f      	subs	r7, r7, r5
 8008684:	4604      	mov	r4, r0
 8008686:	f100 0a14 	add.w	sl, r0, #20
 800868a:	f04f 0900 	mov.w	r9, #0
 800868e:	e7b8      	b.n	8008602 <__gethex+0x1b6>
 8008690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008694:	42bd      	cmp	r5, r7
 8008696:	dd6f      	ble.n	8008778 <__gethex+0x32c>
 8008698:	1bed      	subs	r5, r5, r7
 800869a:	42ae      	cmp	r6, r5
 800869c:	dc34      	bgt.n	8008708 <__gethex+0x2bc>
 800869e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d022      	beq.n	80086ec <__gethex+0x2a0>
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d024      	beq.n	80086f4 <__gethex+0x2a8>
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d115      	bne.n	80086da <__gethex+0x28e>
 80086ae:	42ae      	cmp	r6, r5
 80086b0:	d113      	bne.n	80086da <__gethex+0x28e>
 80086b2:	2e01      	cmp	r6, #1
 80086b4:	d10b      	bne.n	80086ce <__gethex+0x282>
 80086b6:	9a02      	ldr	r2, [sp, #8]
 80086b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	2301      	movs	r3, #1
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	f8ca 3000 	str.w	r3, [sl]
 80086c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c8:	2562      	movs	r5, #98	@ 0x62
 80086ca:	601c      	str	r4, [r3, #0]
 80086cc:	e73a      	b.n	8008544 <__gethex+0xf8>
 80086ce:	1e71      	subs	r1, r6, #1
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7fe fbd2 	bl	8006e7a <__any_on>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d1ed      	bne.n	80086b6 <__gethex+0x26a>
 80086da:	9801      	ldr	r0, [sp, #4]
 80086dc:	4621      	mov	r1, r4
 80086de:	f7fd ff7b 	bl	80065d8 <_Bfree>
 80086e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086e4:	2300      	movs	r3, #0
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	2550      	movs	r5, #80	@ 0x50
 80086ea:	e72b      	b.n	8008544 <__gethex+0xf8>
 80086ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f3      	bne.n	80086da <__gethex+0x28e>
 80086f2:	e7e0      	b.n	80086b6 <__gethex+0x26a>
 80086f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1dd      	bne.n	80086b6 <__gethex+0x26a>
 80086fa:	e7ee      	b.n	80086da <__gethex+0x28e>
 80086fc:	08009568 	.word	0x08009568
 8008700:	080093fc 	.word	0x080093fc
 8008704:	080095d9 	.word	0x080095d9
 8008708:	1e6f      	subs	r7, r5, #1
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	d130      	bne.n	8008772 <__gethex+0x326>
 8008710:	b127      	cbz	r7, 800871c <__gethex+0x2d0>
 8008712:	4639      	mov	r1, r7
 8008714:	4620      	mov	r0, r4
 8008716:	f7fe fbb0 	bl	8006e7a <__any_on>
 800871a:	4681      	mov	r9, r0
 800871c:	117a      	asrs	r2, r7, #5
 800871e:	2301      	movs	r3, #1
 8008720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008724:	f007 071f 	and.w	r7, r7, #31
 8008728:	40bb      	lsls	r3, r7
 800872a:	4213      	tst	r3, r2
 800872c:	4629      	mov	r1, r5
 800872e:	4620      	mov	r0, r4
 8008730:	bf18      	it	ne
 8008732:	f049 0902 	orrne.w	r9, r9, #2
 8008736:	f7ff fe22 	bl	800837e <rshift>
 800873a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800873e:	1b76      	subs	r6, r6, r5
 8008740:	2502      	movs	r5, #2
 8008742:	f1b9 0f00 	cmp.w	r9, #0
 8008746:	d047      	beq.n	80087d8 <__gethex+0x38c>
 8008748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d015      	beq.n	800877c <__gethex+0x330>
 8008750:	2b03      	cmp	r3, #3
 8008752:	d017      	beq.n	8008784 <__gethex+0x338>
 8008754:	2b01      	cmp	r3, #1
 8008756:	d109      	bne.n	800876c <__gethex+0x320>
 8008758:	f019 0f02 	tst.w	r9, #2
 800875c:	d006      	beq.n	800876c <__gethex+0x320>
 800875e:	f8da 3000 	ldr.w	r3, [sl]
 8008762:	ea49 0903 	orr.w	r9, r9, r3
 8008766:	f019 0f01 	tst.w	r9, #1
 800876a:	d10e      	bne.n	800878a <__gethex+0x33e>
 800876c:	f045 0510 	orr.w	r5, r5, #16
 8008770:	e032      	b.n	80087d8 <__gethex+0x38c>
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	e7d1      	b.n	800871c <__gethex+0x2d0>
 8008778:	2501      	movs	r5, #1
 800877a:	e7e2      	b.n	8008742 <__gethex+0x2f6>
 800877c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800877e:	f1c3 0301 	rsb	r3, r3, #1
 8008782:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f0      	beq.n	800876c <__gethex+0x320>
 800878a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800878e:	f104 0314 	add.w	r3, r4, #20
 8008792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800879a:	f04f 0c00 	mov.w	ip, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087a8:	d01b      	beq.n	80087e2 <__gethex+0x396>
 80087aa:	3201      	adds	r2, #1
 80087ac:	6002      	str	r2, [r0, #0]
 80087ae:	2d02      	cmp	r5, #2
 80087b0:	f104 0314 	add.w	r3, r4, #20
 80087b4:	d13c      	bne.n	8008830 <__gethex+0x3e4>
 80087b6:	f8d8 2000 	ldr.w	r2, [r8]
 80087ba:	3a01      	subs	r2, #1
 80087bc:	42b2      	cmp	r2, r6
 80087be:	d109      	bne.n	80087d4 <__gethex+0x388>
 80087c0:	1171      	asrs	r1, r6, #5
 80087c2:	2201      	movs	r2, #1
 80087c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087c8:	f006 061f 	and.w	r6, r6, #31
 80087cc:	fa02 f606 	lsl.w	r6, r2, r6
 80087d0:	421e      	tst	r6, r3
 80087d2:	d13a      	bne.n	800884a <__gethex+0x3fe>
 80087d4:	f045 0520 	orr.w	r5, r5, #32
 80087d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087da:	601c      	str	r4, [r3, #0]
 80087dc:	9b02      	ldr	r3, [sp, #8]
 80087de:	601f      	str	r7, [r3, #0]
 80087e0:	e6b0      	b.n	8008544 <__gethex+0xf8>
 80087e2:	4299      	cmp	r1, r3
 80087e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80087e8:	d8d9      	bhi.n	800879e <__gethex+0x352>
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	459b      	cmp	fp, r3
 80087ee:	db17      	blt.n	8008820 <__gethex+0x3d4>
 80087f0:	6861      	ldr	r1, [r4, #4]
 80087f2:	9801      	ldr	r0, [sp, #4]
 80087f4:	3101      	adds	r1, #1
 80087f6:	f7fd feaf 	bl	8006558 <_Balloc>
 80087fa:	4681      	mov	r9, r0
 80087fc:	b918      	cbnz	r0, 8008806 <__gethex+0x3ba>
 80087fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <__gethex+0x41c>)
 8008800:	4602      	mov	r2, r0
 8008802:	2184      	movs	r1, #132	@ 0x84
 8008804:	e6c5      	b.n	8008592 <__gethex+0x146>
 8008806:	6922      	ldr	r2, [r4, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	f104 010c 	add.w	r1, r4, #12
 800880e:	0092      	lsls	r2, r2, #2
 8008810:	300c      	adds	r0, #12
 8008812:	f7ff fd83 	bl	800831c <memcpy>
 8008816:	4621      	mov	r1, r4
 8008818:	9801      	ldr	r0, [sp, #4]
 800881a:	f7fd fedd 	bl	80065d8 <_Bfree>
 800881e:	464c      	mov	r4, r9
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008828:	6122      	str	r2, [r4, #16]
 800882a:	2201      	movs	r2, #1
 800882c:	615a      	str	r2, [r3, #20]
 800882e:	e7be      	b.n	80087ae <__gethex+0x362>
 8008830:	6922      	ldr	r2, [r4, #16]
 8008832:	455a      	cmp	r2, fp
 8008834:	dd0b      	ble.n	800884e <__gethex+0x402>
 8008836:	2101      	movs	r1, #1
 8008838:	4620      	mov	r0, r4
 800883a:	f7ff fda0 	bl	800837e <rshift>
 800883e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008842:	3701      	adds	r7, #1
 8008844:	42bb      	cmp	r3, r7
 8008846:	f6ff aee0 	blt.w	800860a <__gethex+0x1be>
 800884a:	2501      	movs	r5, #1
 800884c:	e7c2      	b.n	80087d4 <__gethex+0x388>
 800884e:	f016 061f 	ands.w	r6, r6, #31
 8008852:	d0fa      	beq.n	800884a <__gethex+0x3fe>
 8008854:	4453      	add	r3, sl
 8008856:	f1c6 0620 	rsb	r6, r6, #32
 800885a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800885e:	f7fd ff6d 	bl	800673c <__hi0bits>
 8008862:	42b0      	cmp	r0, r6
 8008864:	dbe7      	blt.n	8008836 <__gethex+0x3ea>
 8008866:	e7f0      	b.n	800884a <__gethex+0x3fe>
 8008868:	080093fc 	.word	0x080093fc

0800886c <L_shift>:
 800886c:	f1c2 0208 	rsb	r2, r2, #8
 8008870:	0092      	lsls	r2, r2, #2
 8008872:	b570      	push	{r4, r5, r6, lr}
 8008874:	f1c2 0620 	rsb	r6, r2, #32
 8008878:	6843      	ldr	r3, [r0, #4]
 800887a:	6804      	ldr	r4, [r0, #0]
 800887c:	fa03 f506 	lsl.w	r5, r3, r6
 8008880:	432c      	orrs	r4, r5
 8008882:	40d3      	lsrs	r3, r2
 8008884:	6004      	str	r4, [r0, #0]
 8008886:	f840 3f04 	str.w	r3, [r0, #4]!
 800888a:	4288      	cmp	r0, r1
 800888c:	d3f4      	bcc.n	8008878 <L_shift+0xc>
 800888e:	bd70      	pop	{r4, r5, r6, pc}

08008890 <__match>:
 8008890:	b530      	push	{r4, r5, lr}
 8008892:	6803      	ldr	r3, [r0, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889a:	b914      	cbnz	r4, 80088a2 <__match+0x12>
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	2001      	movs	r0, #1
 80088a0:	bd30      	pop	{r4, r5, pc}
 80088a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80088aa:	2d19      	cmp	r5, #25
 80088ac:	bf98      	it	ls
 80088ae:	3220      	addls	r2, #32
 80088b0:	42a2      	cmp	r2, r4
 80088b2:	d0f0      	beq.n	8008896 <__match+0x6>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f3      	b.n	80088a0 <__match+0x10>

080088b8 <__hexnan>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	680b      	ldr	r3, [r1, #0]
 80088be:	6801      	ldr	r1, [r0, #0]
 80088c0:	115e      	asrs	r6, r3, #5
 80088c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088c6:	f013 031f 	ands.w	r3, r3, #31
 80088ca:	b087      	sub	sp, #28
 80088cc:	bf18      	it	ne
 80088ce:	3604      	addne	r6, #4
 80088d0:	2500      	movs	r5, #0
 80088d2:	1f37      	subs	r7, r6, #4
 80088d4:	4682      	mov	sl, r0
 80088d6:	4690      	mov	r8, r2
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	f846 5c04 	str.w	r5, [r6, #-4]
 80088de:	46b9      	mov	r9, r7
 80088e0:	463c      	mov	r4, r7
 80088e2:	9502      	str	r5, [sp, #8]
 80088e4:	46ab      	mov	fp, r5
 80088e6:	784a      	ldrb	r2, [r1, #1]
 80088e8:	1c4b      	adds	r3, r1, #1
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	b342      	cbz	r2, 8008940 <__hexnan+0x88>
 80088ee:	4610      	mov	r0, r2
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	9204      	str	r2, [sp, #16]
 80088f4:	f7ff fd95 	bl	8008422 <__hexdig_fun>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d151      	bne.n	80089a0 <__hexnan+0xe8>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	9905      	ldr	r1, [sp, #20]
 8008900:	2a20      	cmp	r2, #32
 8008902:	d818      	bhi.n	8008936 <__hexnan+0x7e>
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	459b      	cmp	fp, r3
 8008908:	dd13      	ble.n	8008932 <__hexnan+0x7a>
 800890a:	454c      	cmp	r4, r9
 800890c:	d206      	bcs.n	800891c <__hexnan+0x64>
 800890e:	2d07      	cmp	r5, #7
 8008910:	dc04      	bgt.n	800891c <__hexnan+0x64>
 8008912:	462a      	mov	r2, r5
 8008914:	4649      	mov	r1, r9
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff ffa8 	bl	800886c <L_shift>
 800891c:	4544      	cmp	r4, r8
 800891e:	d952      	bls.n	80089c6 <__hexnan+0x10e>
 8008920:	2300      	movs	r3, #0
 8008922:	f1a4 0904 	sub.w	r9, r4, #4
 8008926:	f844 3c04 	str.w	r3, [r4, #-4]
 800892a:	f8cd b008 	str.w	fp, [sp, #8]
 800892e:	464c      	mov	r4, r9
 8008930:	461d      	mov	r5, r3
 8008932:	9903      	ldr	r1, [sp, #12]
 8008934:	e7d7      	b.n	80088e6 <__hexnan+0x2e>
 8008936:	2a29      	cmp	r2, #41	@ 0x29
 8008938:	d157      	bne.n	80089ea <__hexnan+0x132>
 800893a:	3102      	adds	r1, #2
 800893c:	f8ca 1000 	str.w	r1, [sl]
 8008940:	f1bb 0f00 	cmp.w	fp, #0
 8008944:	d051      	beq.n	80089ea <__hexnan+0x132>
 8008946:	454c      	cmp	r4, r9
 8008948:	d206      	bcs.n	8008958 <__hexnan+0xa0>
 800894a:	2d07      	cmp	r5, #7
 800894c:	dc04      	bgt.n	8008958 <__hexnan+0xa0>
 800894e:	462a      	mov	r2, r5
 8008950:	4649      	mov	r1, r9
 8008952:	4620      	mov	r0, r4
 8008954:	f7ff ff8a 	bl	800886c <L_shift>
 8008958:	4544      	cmp	r4, r8
 800895a:	d936      	bls.n	80089ca <__hexnan+0x112>
 800895c:	f1a8 0204 	sub.w	r2, r8, #4
 8008960:	4623      	mov	r3, r4
 8008962:	f853 1b04 	ldr.w	r1, [r3], #4
 8008966:	f842 1f04 	str.w	r1, [r2, #4]!
 800896a:	429f      	cmp	r7, r3
 800896c:	d2f9      	bcs.n	8008962 <__hexnan+0xaa>
 800896e:	1b3b      	subs	r3, r7, r4
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	3401      	adds	r4, #1
 8008978:	3e03      	subs	r6, #3
 800897a:	42b4      	cmp	r4, r6
 800897c:	bf88      	it	hi
 800897e:	2304      	movhi	r3, #4
 8008980:	4443      	add	r3, r8
 8008982:	2200      	movs	r2, #0
 8008984:	f843 2b04 	str.w	r2, [r3], #4
 8008988:	429f      	cmp	r7, r3
 800898a:	d2fb      	bcs.n	8008984 <__hexnan+0xcc>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	b91b      	cbnz	r3, 8008998 <__hexnan+0xe0>
 8008990:	4547      	cmp	r7, r8
 8008992:	d128      	bne.n	80089e6 <__hexnan+0x12e>
 8008994:	2301      	movs	r3, #1
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	2005      	movs	r0, #5
 800899a:	b007      	add	sp, #28
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	3501      	adds	r5, #1
 80089a2:	2d08      	cmp	r5, #8
 80089a4:	f10b 0b01 	add.w	fp, fp, #1
 80089a8:	dd06      	ble.n	80089b8 <__hexnan+0x100>
 80089aa:	4544      	cmp	r4, r8
 80089ac:	d9c1      	bls.n	8008932 <__hexnan+0x7a>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80089b4:	2501      	movs	r5, #1
 80089b6:	3c04      	subs	r4, #4
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	f000 000f 	and.w	r0, r0, #15
 80089be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089c2:	6020      	str	r0, [r4, #0]
 80089c4:	e7b5      	b.n	8008932 <__hexnan+0x7a>
 80089c6:	2508      	movs	r5, #8
 80089c8:	e7b3      	b.n	8008932 <__hexnan+0x7a>
 80089ca:	9b01      	ldr	r3, [sp, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0dd      	beq.n	800898c <__hexnan+0xd4>
 80089d0:	f1c3 0320 	rsb	r3, r3, #32
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	40da      	lsrs	r2, r3
 80089da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089de:	4013      	ands	r3, r2
 80089e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80089e4:	e7d2      	b.n	800898c <__hexnan+0xd4>
 80089e6:	3f04      	subs	r7, #4
 80089e8:	e7d0      	b.n	800898c <__hexnan+0xd4>
 80089ea:	2004      	movs	r0, #4
 80089ec:	e7d5      	b.n	800899a <__hexnan+0xe2>

080089ee <__ascii_mbtowc>:
 80089ee:	b082      	sub	sp, #8
 80089f0:	b901      	cbnz	r1, 80089f4 <__ascii_mbtowc+0x6>
 80089f2:	a901      	add	r1, sp, #4
 80089f4:	b142      	cbz	r2, 8008a08 <__ascii_mbtowc+0x1a>
 80089f6:	b14b      	cbz	r3, 8008a0c <__ascii_mbtowc+0x1e>
 80089f8:	7813      	ldrb	r3, [r2, #0]
 80089fa:	600b      	str	r3, [r1, #0]
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	1e10      	subs	r0, r2, #0
 8008a00:	bf18      	it	ne
 8008a02:	2001      	movne	r0, #1
 8008a04:	b002      	add	sp, #8
 8008a06:	4770      	bx	lr
 8008a08:	4610      	mov	r0, r2
 8008a0a:	e7fb      	b.n	8008a04 <__ascii_mbtowc+0x16>
 8008a0c:	f06f 0001 	mvn.w	r0, #1
 8008a10:	e7f8      	b.n	8008a04 <__ascii_mbtowc+0x16>

08008a12 <_realloc_r>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	4680      	mov	r8, r0
 8008a18:	4615      	mov	r5, r2
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b921      	cbnz	r1, 8008a28 <_realloc_r+0x16>
 8008a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a22:	4611      	mov	r1, r2
 8008a24:	f7fd bd0c 	b.w	8006440 <_malloc_r>
 8008a28:	b92a      	cbnz	r2, 8008a36 <_realloc_r+0x24>
 8008a2a:	f7fd fc95 	bl	8006358 <_free_r>
 8008a2e:	2400      	movs	r4, #0
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a36:	f000 f8ef 	bl	8008c18 <_malloc_usable_size_r>
 8008a3a:	4285      	cmp	r5, r0
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	d802      	bhi.n	8008a46 <_realloc_r+0x34>
 8008a40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a44:	d8f4      	bhi.n	8008a30 <_realloc_r+0x1e>
 8008a46:	4629      	mov	r1, r5
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f7fd fcf9 	bl	8006440 <_malloc_r>
 8008a4e:	4607      	mov	r7, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d0ec      	beq.n	8008a2e <_realloc_r+0x1c>
 8008a54:	42b5      	cmp	r5, r6
 8008a56:	462a      	mov	r2, r5
 8008a58:	4621      	mov	r1, r4
 8008a5a:	bf28      	it	cs
 8008a5c:	4632      	movcs	r2, r6
 8008a5e:	f7ff fc5d 	bl	800831c <memcpy>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4640      	mov	r0, r8
 8008a66:	f7fd fc77 	bl	8006358 <_free_r>
 8008a6a:	463c      	mov	r4, r7
 8008a6c:	e7e0      	b.n	8008a30 <_realloc_r+0x1e>

08008a6e <__ascii_wctomb>:
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	b141      	cbz	r1, 8008a86 <__ascii_wctomb+0x18>
 8008a74:	2aff      	cmp	r2, #255	@ 0xff
 8008a76:	d904      	bls.n	8008a82 <__ascii_wctomb+0x14>
 8008a78:	228a      	movs	r2, #138	@ 0x8a
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	4770      	bx	lr
 8008a82:	700a      	strb	r2, [r1, #0]
 8008a84:	2001      	movs	r0, #1
 8008a86:	4770      	bx	lr

08008a88 <__swhatbuf_r>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	b096      	sub	sp, #88	@ 0x58
 8008a94:	4615      	mov	r5, r2
 8008a96:	461e      	mov	r6, r3
 8008a98:	da0d      	bge.n	8008ab6 <__swhatbuf_r+0x2e>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aa0:	f04f 0100 	mov.w	r1, #0
 8008aa4:	bf14      	ite	ne
 8008aa6:	2340      	movne	r3, #64	@ 0x40
 8008aa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008aac:	2000      	movs	r0, #0
 8008aae:	6031      	str	r1, [r6, #0]
 8008ab0:	602b      	str	r3, [r5, #0]
 8008ab2:	b016      	add	sp, #88	@ 0x58
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	466a      	mov	r2, sp
 8008ab8:	f000 f878 	bl	8008bac <_fstat_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	dbec      	blt.n	8008a9a <__swhatbuf_r+0x12>
 8008ac0:	9901      	ldr	r1, [sp, #4]
 8008ac2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ac6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aca:	4259      	negs	r1, r3
 8008acc:	4159      	adcs	r1, r3
 8008ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ad2:	e7eb      	b.n	8008aac <__swhatbuf_r+0x24>

08008ad4 <__smakebuf_r>:
 8008ad4:	898b      	ldrh	r3, [r1, #12]
 8008ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad8:	079d      	lsls	r5, r3, #30
 8008ada:	4606      	mov	r6, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	d507      	bpl.n	8008af0 <__smakebuf_r+0x1c>
 8008ae0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	2301      	movs	r3, #1
 8008aea:	6163      	str	r3, [r4, #20]
 8008aec:	b003      	add	sp, #12
 8008aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af0:	ab01      	add	r3, sp, #4
 8008af2:	466a      	mov	r2, sp
 8008af4:	f7ff ffc8 	bl	8008a88 <__swhatbuf_r>
 8008af8:	9f00      	ldr	r7, [sp, #0]
 8008afa:	4605      	mov	r5, r0
 8008afc:	4639      	mov	r1, r7
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7fd fc9e 	bl	8006440 <_malloc_r>
 8008b04:	b948      	cbnz	r0, 8008b1a <__smakebuf_r+0x46>
 8008b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0a:	059a      	lsls	r2, r3, #22
 8008b0c:	d4ee      	bmi.n	8008aec <__smakebuf_r+0x18>
 8008b0e:	f023 0303 	bic.w	r3, r3, #3
 8008b12:	f043 0302 	orr.w	r3, r3, #2
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	e7e2      	b.n	8008ae0 <__smakebuf_r+0xc>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	6020      	str	r0, [r4, #0]
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b2a:	b15b      	cbz	r3, 8008b44 <__smakebuf_r+0x70>
 8008b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 f84d 	bl	8008bd0 <_isatty_r>
 8008b36:	b128      	cbz	r0, 8008b44 <__smakebuf_r+0x70>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	431d      	orrs	r5, r3
 8008b48:	81a5      	strh	r5, [r4, #12]
 8008b4a:	e7cf      	b.n	8008aec <__smakebuf_r+0x18>

08008b4c <_raise_r>:
 8008b4c:	291f      	cmp	r1, #31
 8008b4e:	b538      	push	{r3, r4, r5, lr}
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	d904      	bls.n	8008b60 <_raise_r+0x14>
 8008b56:	2316      	movs	r3, #22
 8008b58:	6003      	str	r3, [r0, #0]
 8008b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b62:	b112      	cbz	r2, 8008b6a <_raise_r+0x1e>
 8008b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b68:	b94b      	cbnz	r3, 8008b7e <_raise_r+0x32>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f852 	bl	8008c14 <_getpid_r>
 8008b70:	4622      	mov	r2, r4
 8008b72:	4601      	mov	r1, r0
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7a:	f000 b839 	b.w	8008bf0 <_kill_r>
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d00a      	beq.n	8008b98 <_raise_r+0x4c>
 8008b82:	1c59      	adds	r1, r3, #1
 8008b84:	d103      	bne.n	8008b8e <_raise_r+0x42>
 8008b86:	2316      	movs	r3, #22
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e7e7      	b.n	8008b5e <_raise_r+0x12>
 8008b8e:	2100      	movs	r1, #0
 8008b90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b94:	4620      	mov	r0, r4
 8008b96:	4798      	blx	r3
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e7e0      	b.n	8008b5e <_raise_r+0x12>

08008b9c <raise>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <raise+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f7ff bfd3 	b.w	8008b4c <_raise_r>
 8008ba6:	bf00      	nop
 8008ba8:	20000018 	.word	0x20000018

08008bac <_fstat_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d07      	ldr	r5, [pc, #28]	@ (8008bcc <_fstat_r+0x20>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	f7f9 f819 	bl	8001bf0 <_fstat>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d102      	bne.n	8008bc8 <_fstat_r+0x1c>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	b103      	cbz	r3, 8008bc8 <_fstat_r+0x1c>
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000694 	.word	0x20000694

08008bd0 <_isatty_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d06      	ldr	r5, [pc, #24]	@ (8008bec <_isatty_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7f9 f818 	bl	8001c10 <_isatty>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_isatty_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_isatty_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20000694 	.word	0x20000694

08008bf0 <_kill_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	@ (8008c10 <_kill_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7f8 ff97 	bl	8001b30 <_kill>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_kill_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_kill_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000694 	.word	0x20000694

08008c14 <_getpid_r>:
 8008c14:	f7f8 bf84 	b.w	8001b20 <_getpid>

08008c18 <_malloc_usable_size_r>:
 8008c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1c:	1f18      	subs	r0, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bfbc      	itt	lt
 8008c22:	580b      	ldrlt	r3, [r1, r0]
 8008c24:	18c0      	addlt	r0, r0, r3
 8008c26:	4770      	bx	lr

08008c28 <atan2>:
 8008c28:	f000 b802 	b.w	8008c30 <__ieee754_atan2>
 8008c2c:	0000      	movs	r0, r0
	...

08008c30 <__ieee754_atan2>:
 8008c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c34:	ec57 6b11 	vmov	r6, r7, d1
 8008c38:	4273      	negs	r3, r6
 8008c3a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008db8 <__ieee754_atan2+0x188>
 8008c3e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008c42:	4333      	orrs	r3, r6
 8008c44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	ec51 0b10 	vmov	r0, r1, d0
 8008c4e:	4635      	mov	r5, r6
 8008c50:	d809      	bhi.n	8008c66 <__ieee754_atan2+0x36>
 8008c52:	4244      	negs	r4, r0
 8008c54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c58:	4304      	orrs	r4, r0
 8008c5a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008c5e:	4544      	cmp	r4, r8
 8008c60:	468e      	mov	lr, r1
 8008c62:	4681      	mov	r9, r0
 8008c64:	d907      	bls.n	8008c76 <__ieee754_atan2+0x46>
 8008c66:	4632      	mov	r2, r6
 8008c68:	463b      	mov	r3, r7
 8008c6a:	f7f7 fb0f 	bl	800028c <__adddf3>
 8008c6e:	ec41 0b10 	vmov	d0, r0, r1
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008c7a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008c7e:	4334      	orrs	r4, r6
 8008c80:	d103      	bne.n	8008c8a <__ieee754_atan2+0x5a>
 8008c82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c86:	f000 b89b 	b.w	8008dc0 <atan>
 8008c8a:	17bc      	asrs	r4, r7, #30
 8008c8c:	f004 0402 	and.w	r4, r4, #2
 8008c90:	ea53 0909 	orrs.w	r9, r3, r9
 8008c94:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008c98:	d107      	bne.n	8008caa <__ieee754_atan2+0x7a>
 8008c9a:	2c02      	cmp	r4, #2
 8008c9c:	d05f      	beq.n	8008d5e <__ieee754_atan2+0x12e>
 8008c9e:	2c03      	cmp	r4, #3
 8008ca0:	d1e5      	bne.n	8008c6e <__ieee754_atan2+0x3e>
 8008ca2:	a141      	add	r1, pc, #260	@ (adr r1, 8008da8 <__ieee754_atan2+0x178>)
 8008ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca8:	e7e1      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008caa:	4315      	orrs	r5, r2
 8008cac:	d106      	bne.n	8008cbc <__ieee754_atan2+0x8c>
 8008cae:	f1be 0f00 	cmp.w	lr, #0
 8008cb2:	da5f      	bge.n	8008d74 <__ieee754_atan2+0x144>
 8008cb4:	a13e      	add	r1, pc, #248	@ (adr r1, 8008db0 <__ieee754_atan2+0x180>)
 8008cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cba:	e7d8      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008cbc:	4542      	cmp	r2, r8
 8008cbe:	d10f      	bne.n	8008ce0 <__ieee754_atan2+0xb0>
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cc6:	d107      	bne.n	8008cd8 <__ieee754_atan2+0xa8>
 8008cc8:	2c02      	cmp	r4, #2
 8008cca:	d84c      	bhi.n	8008d66 <__ieee754_atan2+0x136>
 8008ccc:	4b34      	ldr	r3, [pc, #208]	@ (8008da0 <__ieee754_atan2+0x170>)
 8008cce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd6:	e7ca      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008cd8:	2c02      	cmp	r4, #2
 8008cda:	d848      	bhi.n	8008d6e <__ieee754_atan2+0x13e>
 8008cdc:	4b31      	ldr	r3, [pc, #196]	@ (8008da4 <__ieee754_atan2+0x174>)
 8008cde:	e7f6      	b.n	8008cce <__ieee754_atan2+0x9e>
 8008ce0:	4543      	cmp	r3, r8
 8008ce2:	d0e4      	beq.n	8008cae <__ieee754_atan2+0x7e>
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008cea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008cee:	da1e      	bge.n	8008d2e <__ieee754_atan2+0xfe>
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	da01      	bge.n	8008cf8 <__ieee754_atan2+0xc8>
 8008cf4:	323c      	adds	r2, #60	@ 0x3c
 8008cf6:	db1e      	blt.n	8008d36 <__ieee754_atan2+0x106>
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	f7f7 fda6 	bl	800084c <__aeabi_ddiv>
 8008d00:	ec41 0b10 	vmov	d0, r0, r1
 8008d04:	f000 f9f4 	bl	80090f0 <fabs>
 8008d08:	f000 f85a 	bl	8008dc0 <atan>
 8008d0c:	ec51 0b10 	vmov	r0, r1, d0
 8008d10:	2c01      	cmp	r4, #1
 8008d12:	d013      	beq.n	8008d3c <__ieee754_atan2+0x10c>
 8008d14:	2c02      	cmp	r4, #2
 8008d16:	d015      	beq.n	8008d44 <__ieee754_atan2+0x114>
 8008d18:	2c00      	cmp	r4, #0
 8008d1a:	d0a8      	beq.n	8008c6e <__ieee754_atan2+0x3e>
 8008d1c:	a318      	add	r3, pc, #96	@ (adr r3, 8008d80 <__ieee754_atan2+0x150>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fab1 	bl	8000288 <__aeabi_dsub>
 8008d26:	a318      	add	r3, pc, #96	@ (adr r3, 8008d88 <__ieee754_atan2+0x158>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	e014      	b.n	8008d58 <__ieee754_atan2+0x128>
 8008d2e:	a118      	add	r1, pc, #96	@ (adr r1, 8008d90 <__ieee754_atan2+0x160>)
 8008d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d34:	e7ec      	b.n	8008d10 <__ieee754_atan2+0xe0>
 8008d36:	2000      	movs	r0, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	e7e9      	b.n	8008d10 <__ieee754_atan2+0xe0>
 8008d3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d40:	4619      	mov	r1, r3
 8008d42:	e794      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d44:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d80 <__ieee754_atan2+0x150>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fa9d 	bl	8000288 <__aeabi_dsub>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	a10d      	add	r1, pc, #52	@ (adr r1, 8008d88 <__ieee754_atan2+0x158>)
 8008d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d58:	f7f7 fa96 	bl	8000288 <__aeabi_dsub>
 8008d5c:	e787      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d5e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008d88 <__ieee754_atan2+0x158>)
 8008d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d64:	e783      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d66:	a10c      	add	r1, pc, #48	@ (adr r1, 8008d98 <__ieee754_atan2+0x168>)
 8008d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d6c:	e77f      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	2100      	movs	r1, #0
 8008d72:	e77c      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d74:	a106      	add	r1, pc, #24	@ (adr r1, 8008d90 <__ieee754_atan2+0x160>)
 8008d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d7a:	e778      	b.n	8008c6e <__ieee754_atan2+0x3e>
 8008d7c:	f3af 8000 	nop.w
 8008d80:	33145c07 	.word	0x33145c07
 8008d84:	3ca1a626 	.word	0x3ca1a626
 8008d88:	54442d18 	.word	0x54442d18
 8008d8c:	400921fb 	.word	0x400921fb
 8008d90:	54442d18 	.word	0x54442d18
 8008d94:	3ff921fb 	.word	0x3ff921fb
 8008d98:	54442d18 	.word	0x54442d18
 8008d9c:	3fe921fb 	.word	0x3fe921fb
 8008da0:	08009658 	.word	0x08009658
 8008da4:	08009640 	.word	0x08009640
 8008da8:	54442d18 	.word	0x54442d18
 8008dac:	c00921fb 	.word	0xc00921fb
 8008db0:	54442d18 	.word	0x54442d18
 8008db4:	bff921fb 	.word	0xbff921fb
 8008db8:	7ff00000 	.word	0x7ff00000
 8008dbc:	00000000 	.word	0x00000000

08008dc0 <atan>:
 8008dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	ec55 4b10 	vmov	r4, r5, d0
 8008dc8:	4bbf      	ldr	r3, [pc, #764]	@ (80090c8 <atan+0x308>)
 8008dca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	46ab      	mov	fp, r5
 8008dd2:	d918      	bls.n	8008e06 <atan+0x46>
 8008dd4:	4bbd      	ldr	r3, [pc, #756]	@ (80090cc <atan+0x30c>)
 8008dd6:	429e      	cmp	r6, r3
 8008dd8:	d801      	bhi.n	8008dde <atan+0x1e>
 8008dda:	d109      	bne.n	8008df0 <atan+0x30>
 8008ddc:	b144      	cbz	r4, 8008df0 <atan+0x30>
 8008dde:	4622      	mov	r2, r4
 8008de0:	462b      	mov	r3, r5
 8008de2:	4620      	mov	r0, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7f7 fa51 	bl	800028c <__adddf3>
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	e006      	b.n	8008dfe <atan+0x3e>
 8008df0:	f1bb 0f00 	cmp.w	fp, #0
 8008df4:	f340 812b 	ble.w	800904e <atan+0x28e>
 8008df8:	a597      	add	r5, pc, #604	@ (adr r5, 8009058 <atan+0x298>)
 8008dfa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dfe:	ec45 4b10 	vmov	d0, r4, r5
 8008e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	4bb2      	ldr	r3, [pc, #712]	@ (80090d0 <atan+0x310>)
 8008e08:	429e      	cmp	r6, r3
 8008e0a:	d813      	bhi.n	8008e34 <atan+0x74>
 8008e0c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008e10:	429e      	cmp	r6, r3
 8008e12:	d80c      	bhi.n	8008e2e <atan+0x6e>
 8008e14:	a392      	add	r3, pc, #584	@ (adr r3, 8009060 <atan+0x2a0>)
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 fa35 	bl	800028c <__adddf3>
 8008e22:	4bac      	ldr	r3, [pc, #688]	@ (80090d4 <atan+0x314>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	f7f7 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d1e7      	bne.n	8008dfe <atan+0x3e>
 8008e2e:	f04f 3aff 	mov.w	sl, #4294967295
 8008e32:	e029      	b.n	8008e88 <atan+0xc8>
 8008e34:	f000 f95c 	bl	80090f0 <fabs>
 8008e38:	4ba7      	ldr	r3, [pc, #668]	@ (80090d8 <atan+0x318>)
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	ec55 4b10 	vmov	r4, r5, d0
 8008e40:	f200 80bc 	bhi.w	8008fbc <atan+0x1fc>
 8008e44:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008e48:	429e      	cmp	r6, r3
 8008e4a:	f200 809e 	bhi.w	8008f8a <atan+0x1ca>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	462b      	mov	r3, r5
 8008e52:	4620      	mov	r0, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7f7 fa19 	bl	800028c <__adddf3>
 8008e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80090d4 <atan+0x314>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f7f7 fa13 	bl	8000288 <__aeabi_dsub>
 8008e62:	2200      	movs	r2, #0
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7f7 fa0c 	bl	800028c <__adddf3>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fce6 	bl	800084c <__aeabi_ddiv>
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	4622      	mov	r2, r4
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fbb2 	bl	80005f8 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4689      	mov	r9, r1
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	a371      	add	r3, pc, #452	@ (adr r3, 8009068 <atan+0x2a8>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460f      	mov	r7, r1
 8008eaa:	f7f7 fba5 	bl	80005f8 <__aeabi_dmul>
 8008eae:	a370      	add	r3, pc, #448	@ (adr r3, 8009070 <atan+0x2b0>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7f7 f9ea 	bl	800028c <__adddf3>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	f7f7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8008ec0:	a36d      	add	r3, pc, #436	@ (adr r3, 8009078 <atan+0x2b8>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f7f7 f9e1 	bl	800028c <__adddf3>
 8008eca:	4632      	mov	r2, r6
 8008ecc:	463b      	mov	r3, r7
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009080 <atan+0x2c0>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 f9d8 	bl	800028c <__adddf3>
 8008edc:	4632      	mov	r2, r6
 8008ede:	463b      	mov	r3, r7
 8008ee0:	f7f7 fb8a 	bl	80005f8 <__aeabi_dmul>
 8008ee4:	a368      	add	r3, pc, #416	@ (adr r3, 8009088 <atan+0x2c8>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f9cf 	bl	800028c <__adddf3>
 8008eee:	4632      	mov	r2, r6
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	f7f7 fb81 	bl	80005f8 <__aeabi_dmul>
 8008ef6:	a366      	add	r3, pc, #408	@ (adr r3, 8009090 <atan+0x2d0>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f7f7 f9c6 	bl	800028c <__adddf3>
 8008f00:	4642      	mov	r2, r8
 8008f02:	464b      	mov	r3, r9
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	a363      	add	r3, pc, #396	@ (adr r3, 8009098 <atan+0x2d8>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4689      	mov	r9, r1
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 fb6f 	bl	80005f8 <__aeabi_dmul>
 8008f1a:	a361      	add	r3, pc, #388	@ (adr r3, 80090a0 <atan+0x2e0>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f7f7 f9b2 	bl	8000288 <__aeabi_dsub>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	f7f7 fb66 	bl	80005f8 <__aeabi_dmul>
 8008f2c:	a35e      	add	r3, pc, #376	@ (adr r3, 80090a8 <atan+0x2e8>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 f9a9 	bl	8000288 <__aeabi_dsub>
 8008f36:	4632      	mov	r2, r6
 8008f38:	463b      	mov	r3, r7
 8008f3a:	f7f7 fb5d 	bl	80005f8 <__aeabi_dmul>
 8008f3e:	a35c      	add	r3, pc, #368	@ (adr r3, 80090b0 <atan+0x2f0>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 f9a0 	bl	8000288 <__aeabi_dsub>
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	a359      	add	r3, pc, #356	@ (adr r3, 80090b8 <atan+0x2f8>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 f997 	bl	8000288 <__aeabi_dsub>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 fb4b 	bl	80005f8 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 f98f 	bl	800028c <__adddf3>
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	d148      	bne.n	8009012 <atan+0x252>
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	e72f      	b.n	8008dea <atan+0x2a>
 8008f8a:	4b52      	ldr	r3, [pc, #328]	@ (80090d4 <atan+0x314>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 f979 	bl	8000288 <__aeabi_dsub>
 8008f96:	4b4f      	ldr	r3, [pc, #316]	@ (80090d4 <atan+0x314>)
 8008f98:	4606      	mov	r6, r0
 8008f9a:	460f      	mov	r7, r1
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 f973 	bl	800028c <__adddf3>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	f7f7 fc4d 	bl	800084c <__aeabi_ddiv>
 8008fb2:	f04f 0a01 	mov.w	sl, #1
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460d      	mov	r5, r1
 8008fba:	e765      	b.n	8008e88 <atan+0xc8>
 8008fbc:	4b47      	ldr	r3, [pc, #284]	@ (80090dc <atan+0x31c>)
 8008fbe:	429e      	cmp	r6, r3
 8008fc0:	d21c      	bcs.n	8008ffc <atan+0x23c>
 8008fc2:	4b47      	ldr	r3, [pc, #284]	@ (80090e0 <atan+0x320>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7f7 f95d 	bl	8000288 <__aeabi_dsub>
 8008fce:	4b44      	ldr	r3, [pc, #272]	@ (80090e0 <atan+0x320>)
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	4b3d      	ldr	r3, [pc, #244]	@ (80090d4 <atan+0x314>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f7f7 f953 	bl	800028c <__adddf3>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fc2d 	bl	800084c <__aeabi_ddiv>
 8008ff2:	f04f 0a02 	mov.w	sl, #2
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	e745      	b.n	8008e88 <atan+0xc8>
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	462b      	mov	r3, r5
 8009000:	4938      	ldr	r1, [pc, #224]	@ (80090e4 <atan+0x324>)
 8009002:	2000      	movs	r0, #0
 8009004:	f7f7 fc22 	bl	800084c <__aeabi_ddiv>
 8009008:	f04f 0a03 	mov.w	sl, #3
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	e73a      	b.n	8008e88 <atan+0xc8>
 8009012:	4b35      	ldr	r3, [pc, #212]	@ (80090e8 <atan+0x328>)
 8009014:	4e35      	ldr	r6, [pc, #212]	@ (80090ec <atan+0x32c>)
 8009016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 f933 	bl	8000288 <__aeabi_dsub>
 8009022:	4622      	mov	r2, r4
 8009024:	462b      	mov	r3, r5
 8009026:	f7f7 f92f 	bl	8000288 <__aeabi_dsub>
 800902a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	f6bf aedc 	bge.w	8008dfe <atan+0x3e>
 8009046:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800904a:	461d      	mov	r5, r3
 800904c:	e6d7      	b.n	8008dfe <atan+0x3e>
 800904e:	a51c      	add	r5, pc, #112	@ (adr r5, 80090c0 <atan+0x300>)
 8009050:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009054:	e6d3      	b.n	8008dfe <atan+0x3e>
 8009056:	bf00      	nop
 8009058:	54442d18 	.word	0x54442d18
 800905c:	3ff921fb 	.word	0x3ff921fb
 8009060:	8800759c 	.word	0x8800759c
 8009064:	7e37e43c 	.word	0x7e37e43c
 8009068:	e322da11 	.word	0xe322da11
 800906c:	3f90ad3a 	.word	0x3f90ad3a
 8009070:	24760deb 	.word	0x24760deb
 8009074:	3fa97b4b 	.word	0x3fa97b4b
 8009078:	a0d03d51 	.word	0xa0d03d51
 800907c:	3fb10d66 	.word	0x3fb10d66
 8009080:	c54c206e 	.word	0xc54c206e
 8009084:	3fb745cd 	.word	0x3fb745cd
 8009088:	920083ff 	.word	0x920083ff
 800908c:	3fc24924 	.word	0x3fc24924
 8009090:	5555550d 	.word	0x5555550d
 8009094:	3fd55555 	.word	0x3fd55555
 8009098:	2c6a6c2f 	.word	0x2c6a6c2f
 800909c:	bfa2b444 	.word	0xbfa2b444
 80090a0:	52defd9a 	.word	0x52defd9a
 80090a4:	3fadde2d 	.word	0x3fadde2d
 80090a8:	af749a6d 	.word	0xaf749a6d
 80090ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80090b0:	fe231671 	.word	0xfe231671
 80090b4:	3fbc71c6 	.word	0x3fbc71c6
 80090b8:	9998ebc4 	.word	0x9998ebc4
 80090bc:	3fc99999 	.word	0x3fc99999
 80090c0:	54442d18 	.word	0x54442d18
 80090c4:	bff921fb 	.word	0xbff921fb
 80090c8:	440fffff 	.word	0x440fffff
 80090cc:	7ff00000 	.word	0x7ff00000
 80090d0:	3fdbffff 	.word	0x3fdbffff
 80090d4:	3ff00000 	.word	0x3ff00000
 80090d8:	3ff2ffff 	.word	0x3ff2ffff
 80090dc:	40038000 	.word	0x40038000
 80090e0:	3ff80000 	.word	0x3ff80000
 80090e4:	bff00000 	.word	0xbff00000
 80090e8:	08009670 	.word	0x08009670
 80090ec:	08009690 	.word	0x08009690

080090f0 <fabs>:
 80090f0:	ec51 0b10 	vmov	r0, r1, d0
 80090f4:	4602      	mov	r2, r0
 80090f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090fa:	ec43 2b10 	vmov	d0, r2, r3
 80090fe:	4770      	bx	lr

08009100 <_init>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr

0800910c <_fini>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr
